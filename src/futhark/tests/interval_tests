#!/usr/bin/env python3
# Generated by Futhark 0.22.2
import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def param_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             build_options=[],
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_reg_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_reg_tile_size' in sizes:
        default_reg_tile_size = sizes['default_reg_tile_size']
        del sizes['default_reg_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'reg_tile_size': default_reg_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    default_reg_tile_size = default_sizes['reg_tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'] == 'reg_tile_size':
            max_value = None
            default_value = default_reg_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        build_options += ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]

        build_options += ["-D{}={}".format(s.
                                           replace('z', 'zz').
                                           replace('.', 'zi').
                                           replace('#', 'zh').
                                           replace('\'', 'zq'),
                                           v) for (s,v) in self.sizes.items()]

        if (self.platform.name == 'Oclgrind'):
            build_options += ['-DEMULATE_F16']

        return cl.Program(self.ctx, program_src).build(build_options)

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
build_options = []
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
default_reg_tile_size = None
fut_opencl_src = """
// Clang-based OpenCL implementations need this for 'static' to work.
#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable

// Some OpenCL programs dislike empty progams, or programs with no kernels.
// Declare a dummy kernel to ensure they remain our friends.
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    if (thread_gid >= n) return;
}

#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics : enable

typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;

typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;

// NVIDIAs OpenCL does not create device-wide memory fences (see #734), so we
// use inline assembly if we detect we are on an NVIDIA GPU.
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global() {
  asm("membar.gl;");
}
#else
static inline void mem_fence_global() {
  mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local() {
  mem_fence(CLK_LOCAL_MEM_FENCE);
}
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

static uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

static float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

static uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

static inline uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

static inline uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

static inline uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

static inline uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

static inline uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

static inline uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

static inline uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

static inline uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

static inline uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

static inline uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

static inline uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

static inline uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return (x + y - 1) / ys;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x % ys;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

#else

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

static inline int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

static inline int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

static inline int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

static inline int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

static inline uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

static inline uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

static inline uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

static inline uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

static inline int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

static inline int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

static inline int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

static inline int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

static inline uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

static inline uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

static inline uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

static inline uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

static inline uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

static inline uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

static inline uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

static inline uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

static inline uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

static inline uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

static inline uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

static inline uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

static inline int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

static inline int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

static inline int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

static inline int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

static inline uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

static inline uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

static inline uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

static inline uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

static inline uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

static inline uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

static inline uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

static inline uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

static inline uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

static inline uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

static inline uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

static inline uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

static inline bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

static inline bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

static inline bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

static inline bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

static inline bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

static inline bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

static inline bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

static inline bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

static inline bool slt8(int8_t x, int8_t y) {
  return x < y;
}

static inline bool slt16(int16_t x, int16_t y) {
  return x < y;
}

static inline bool slt32(int32_t x, int32_t y) {
  return x < y;
}

static inline bool slt64(int64_t x, int64_t y) {
  return x < y;
}

static inline bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

static inline bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

static inline bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

static inline bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

static inline uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline bool itob_i8_bool(int8_t x) {
  return x != 0;
}

static inline bool itob_i16_bool(int16_t x) {
  return x != 0;
}

static inline bool itob_i32_bool(int32_t x) {
  return x != 0;
}

static inline bool itob_i64_bool(int64_t x) {
  return x != 0;
}

static inline int8_t btoi_bool_i8(bool x) {
  return x;
}

static inline int16_t btoi_bool_i16(bool x) {
  return x;
}

static inline int32_t btoi_bool_i32(bool x) {
  return x;
}

static inline int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

static int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

static int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

static int32_t abs32(int32_t x) {
  return abs(x);
}

static int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

static int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

static int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

static int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

static int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

static int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

static int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

static int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  return mul_hi(a, b);
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  return mul_hi(a, b);
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mul_hi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul_hi(a, b);
}

#elif defined(__CUDA_ARCH__)

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mulhi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul64hi(a, b);
}

#elif ISPC

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l  + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  __uint128_t aa = a;
  __uint128_t bb = b;

  return aa * bb >> 64;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return mad_hi(a, b, c);
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return mad_hi(a, b, c);
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return mad_hi(a, b, c);
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return mad_hi(a, b, c);
}

#else // Not OpenCL

static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return futrts_mul_hi8(a, b) + c;
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return futrts_mul_hi16(a, b) + c;
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return futrts_mul_hi32(a, b) + c;
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return futrts_mul_hi64(a, b) + c;
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

static int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

static int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

static int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

static int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

static int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

static int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

static int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

static int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

static int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

static int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

static inline float fdiv32(float x, float y) {
  return x / y;
}

static inline float fadd32(float x, float y) {
  return x + y;
}

static inline float fsub32(float x, float y) {
  return x - y;
}

static inline float fmul32(float x, float y) {
  return x * y;
}

static inline bool cmplt32(float x, float y) {
  return x < y;
}

static inline bool cmple32(float x, float y) {
  return x <= y;
}

static inline float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

static inline float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

static inline float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

static inline float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

static inline float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

static inline float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

static inline float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

static inline float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
static inline float fabs32(float x) {
  return fabs(x);
}

static inline float fmax32(float x, float y) {
  return fmax(x, y);
}

static inline float fmin32(float x, float y) {
  return fmin(x, y);
}

static inline float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

static inline float fabs32(float x) {
  return abs(x);
}

static inline float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

static inline float fabs32(float x) {
  return fabsf(x);
}

static inline float fmax32(float x, float y) {
  return fmaxf(x, y);
}

static inline float fmin32(float x, float y) {
  return fminf(x, y);
}

static inline float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

static inline bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

static inline bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

static inline bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

static inline int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

static inline uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f32_bool(float x) {
  return x != 0;
}

static inline float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
static inline float futrts_log32(float x) {
  return log(x);
}

static inline float futrts_log2_32(float x) {
  return log2(x);
}

static inline float futrts_log10_32(float x) {
  return log10(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrt(x);
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return cosh(x);
}

static inline float futrts_sinh32(float x) {
  return sinh(x);
}

static inline float futrts_tanh32(float x) {
  return tanh(x);
}

static inline float futrts_acosh32(float x) {
  return acosh(x);
}

static inline float futrts_asinh32(float x) {
  return asinh(x);
}

static inline float futrts_atanh32(float x) {
  return atanh(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgamma(x);
}

static inline float futrts_lgamma32(float x) {
  return lgamma(x);
}

static inline float futrts_erf32(float x) {
  return erf(x);
}

static inline float futrts_erfc32(float x) {
  return erfc(x);
}

static inline float fmod32(float x, float y) {
  return fmod(x, y);
}

static inline float futrts_round32(float x) {
  return rint(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

static inline float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

static inline float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

static inline float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

static inline float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

static inline float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
static inline float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

static inline float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

static inline float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

static inline float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

static inline float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

static inline float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

static inline float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
static inline float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
static inline float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

static inline float futrts_round32(float x) {
  return round(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
static inline float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

static inline float futrts_log32(float x) {
  return logf(x);
}

static inline float futrts_log2_32(float x) {
  return log2f(x);
}

static inline float futrts_log10_32(float x) {
  return log10f(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrtf(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrtf(x);
}

static inline float futrts_exp32(float x) {
  return expf(x);
}

static inline float futrts_cos32(float x) {
  return cosf(x);
}

static inline float futrts_sin32(float x) {
  return sinf(x);
}

static inline float futrts_tan32(float x) {
  return tanf(x);
}

static inline float futrts_acos32(float x) {
  return acosf(x);
}

static inline float futrts_asin32(float x) {
  return asinf(x);
}

static inline float futrts_atan32(float x) {
  return atanf(x);
}

static inline float futrts_cosh32(float x) {
  return coshf(x);
}

static inline float futrts_sinh32(float x) {
  return sinhf(x);
}

static inline float futrts_tanh32(float x) {
  return tanhf(x);
}

static inline float futrts_acosh32(float x) {
  return acoshf(x);
}

static inline float futrts_asinh32(float x) {
  return asinhf(x);
}

static inline float futrts_atanh32(float x) {
  return atanhf(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgammaf(x);
}

static inline float futrts_lgamma32(float x) {
  return lgammaf(x);
}

static inline float futrts_erf32(float x) {
  return erff(x);
}

static inline float futrts_erfc32(float x) {
  return erfcf(x);
}

static inline float fmod32(float x, float y) {
  return fmodf(x, y);
}

static inline float futrts_round32(float x) {
  return rintf(x);
}

static inline float futrts_floor32(float x) {
  return floorf(x);
}

static inline float futrts_ceil32(float x) {
  return ceilf(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
static inline int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

static inline float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
static inline int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

static inline float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

#if ISPC
static inline bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return abs(x);
}

static inline double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

static inline double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

static inline double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

static inline double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
static inline double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

static inline double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

static inline double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

static inline double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
static inline double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
static inline double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
static inline double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
static inline double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
static inline double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

static inline double futrts_round64(double x) {
  return round(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
static inline float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0.0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

static inline int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

static inline double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return fabs(x);
}

static inline double fmax64(double x, double y) {
  return fmax(x, y);
}

static inline double fmin64(double x, double y) {
  return fmin(x, y);
}

static inline double fpow64(double x, double y) {
  return pow(x, y);
}

static inline double futrts_log64(double x) {
  return log(x);
}

static inline double futrts_log2_64(double x) {
  return log2(x);
}

static inline double futrts_log10_64(double x) {
  return log10(x);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

static inline double futrts_cbrt64(double x) {
  return cbrt(x);
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return cosh(x);
}

static inline double futrts_sinh64(double x) {
  return sinh(x);
}

static inline double futrts_tanh64(double x) {
  return tanh(x);
}

static inline double futrts_acosh64(double x) {
  return acosh(x);
}

static inline double futrts_asinh64(double x) {
  return asinh(x);
}

static inline double futrts_atanh64(double x) {
  return atanh(x);
}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

static inline double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

static inline double futrts_gamma64(double x) {
  return tgamma(x);
}

static inline double futrts_lgamma64(double x) {
  return lgamma(x);
}

static inline double futrts_erf64(double x) {
  return erf(x);
}

static inline double futrts_erfc64(double x) {
  return erfc(x);
}

static inline double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

static inline double futrts_round64(double x) {
  return rint(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

static inline float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline bool futrts_isinf64(double x) {
  return isinf(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

static inline int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

static inline double fmod64(double x, double y) {
  return fmod(x, y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

static inline double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

static inline f16 fadd16(f16 x, f16 y) {
  return x + y;
}

static inline f16 fsub16(f16 x, f16 y) {
  return x - y;
}

static inline f16 fmul16(f16 x, f16 y) {
  return x * y;
}

static inline bool cmplt16(f16 x, f16 y) {
  return x < y;
}

static inline bool cmple16(f16 x, f16 y) {
  return x <= y;
}

static inline f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

static inline f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

static inline f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

static inline f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

static inline f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

static inline f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

static inline f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

static inline f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

static inline int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

static inline int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

static inline int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

static inline int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

static inline uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

static inline uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

static inline uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

static inline uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

static inline bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

static inline f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
static inline bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

static inline f16 fabs16(f16 x) {
  return fabs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
static inline f16 fabs16(f16 x) {
  return abs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}
#else // Assuming CUDA.

static inline f16 fabs16(f16 x) {
  return fabsf(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
static inline bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
static inline bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

static inline bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
static inline f16 futrts_log16(f16 x) {
  return log(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return log2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return log10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return cos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return sin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tan(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acos(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asin(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atan(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erf(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rint(x);
}

static inline f16 futrts_floor16(f16 x) {
  return floor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

static inline f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

static inline f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

static inline f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

static inline f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

static inline f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

static inline f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

static inline f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

static inline f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

static inline f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

static inline f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

static inline f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

static inline f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

static inline f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

static inline f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

static inline f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

static inline f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

static inline f16 futrts_log16(f16 x) {
  return hlog(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

static inline f16 futrts_exp16(f16 x) {
  return hexp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return hcos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return hsin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tanf(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acosf(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asinf(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atanf(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erff(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rintf(x);
}

static inline f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
static inline int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
static inline f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

static inline int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
static inline int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

static inline f16 fabs16(f16 x) {
  return fabs32(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

static inline bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

static inline bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

static inline f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

static inline f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

static inline f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

static inline f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

static inline f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

static inline f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

static inline f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

static inline f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

static inline f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

static inline f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

static inline int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

static inline int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

static inline f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

static inline f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

static inline float fpconv_f16_f16(f16 x) {
  return x;
}

static inline float fpconv_f16_f32(f16 x) {
  return x;
}

static inline f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

static inline double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
static inline f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
static inline f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                        int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_local((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

inline int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xchg_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                         int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_cmpxchg_i64_local(volatile __local int64_t *p,
                                        int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

inline int64_t atomic_add_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

inline double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline double atomic_fadd_f64_local(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_local((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

inline int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smax_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_smin_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umax_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umin_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_and_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_or_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xor_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

// End of atomics.h



__kernel void copy_18338(int64_t virt_num_groups_18343, int64_t num_groups_18344, __global unsigned char *mem_18136, __global unsigned char *mem_18159)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18339;
    int64_t group_sizze_18341;
    int32_t copy_gid_18340;
    
    copy_ltid_18339 = get_local_id(0);
    group_sizze_18341 = get_local_size(0);
    copy_gid_18340 = get_group_id(0);
    
    int32_t copy_gtid_18338 = copy_gid_18340 * group_sizze_18341 + copy_ltid_18339;
    int32_t phys_group_id_18345;
    
    phys_group_id_18345 = get_group_id(0);
    
    int32_t iterations_18346 = sdiv_up32(sext_i64_i32(virt_num_groups_18343) - phys_group_id_18345, sext_i64_i32(num_groups_18344));
    
    for (int32_t i_18347 = 0; i_18347 < iterations_18346; i_18347++) {
        int32_t virt_group_id_18348 = phys_group_id_18345 + i_18347 * sext_i64_i32(num_groups_18344);
        int64_t global_tid_18349 = sext_i32_i64(virt_group_id_18348) * sext_i32_i64(group_sizze_18341) + sext_i32_i64(copy_ltid_18339);
        int64_t slice_18352 = (int64_t) 14;
        int64_t slice_18353 = (int64_t) 14 * slice_18352;
        int64_t copy_i_18350 = squot64(global_tid_18349, slice_18352);
        int64_t remnant_18354 = global_tid_18349 - copy_i_18350 * slice_18352;
        int64_t copy_i_18351 = remnant_18354;
        int64_t remnant_18355 = remnant_18354 - copy_i_18351;
        
        if (slt64(global_tid_18349, (int64_t) 196)) {
            float tmp_18356 = ((__global float *) mem_18136)[copy_i_18351 * (int64_t) 14 + copy_i_18350];
            
            ((__global float *) mem_18159)[copy_i_18350 * (int64_t) 14 + copy_i_18351] = tmp_18356;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18357(int64_t virt_num_groups_18362, int64_t num_groups_18363, __global unsigned char *mem_18137, __global unsigned char *mem_18162)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18358;
    int64_t group_sizze_18360;
    int32_t copy_gid_18359;
    
    copy_ltid_18358 = get_local_id(0);
    group_sizze_18360 = get_local_size(0);
    copy_gid_18359 = get_group_id(0);
    
    int32_t copy_gtid_18357 = copy_gid_18359 * group_sizze_18360 + copy_ltid_18358;
    int32_t phys_group_id_18364;
    
    phys_group_id_18364 = get_group_id(0);
    
    int32_t iterations_18365 = sdiv_up32(sext_i64_i32(virt_num_groups_18362) - phys_group_id_18364, sext_i64_i32(num_groups_18363));
    
    for (int32_t i_18366 = 0; i_18366 < iterations_18365; i_18366++) {
        int32_t virt_group_id_18367 = phys_group_id_18364 + i_18366 * sext_i64_i32(num_groups_18363);
        int64_t global_tid_18368 = sext_i32_i64(virt_group_id_18367) * sext_i32_i64(group_sizze_18360) + sext_i32_i64(copy_ltid_18358);
        int64_t slice_18371 = (int64_t) 14;
        int64_t slice_18372 = (int64_t) 14 * slice_18371;
        int64_t copy_i_18369 = squot64(global_tid_18368, slice_18371);
        int64_t remnant_18373 = global_tid_18368 - copy_i_18369 * slice_18371;
        int64_t copy_i_18370 = remnant_18373;
        int64_t remnant_18374 = remnant_18373 - copy_i_18370;
        
        if (slt64(global_tid_18368, (int64_t) 196)) {
            float tmp_18375 = ((__global float *) mem_18137)[copy_i_18370 * (int64_t) 14 + copy_i_18369];
            
            ((__global float *) mem_18162)[copy_i_18369 * (int64_t) 14 + copy_i_18370] = tmp_18375;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18376(int64_t virt_num_groups_18381, int64_t num_groups_18382, __global unsigned char *mem_18138, __global unsigned char *mem_18165)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18377;
    int64_t group_sizze_18379;
    int32_t copy_gid_18378;
    
    copy_ltid_18377 = get_local_id(0);
    group_sizze_18379 = get_local_size(0);
    copy_gid_18378 = get_group_id(0);
    
    int32_t copy_gtid_18376 = copy_gid_18378 * group_sizze_18379 + copy_ltid_18377;
    int32_t phys_group_id_18383;
    
    phys_group_id_18383 = get_group_id(0);
    
    int32_t iterations_18384 = sdiv_up32(sext_i64_i32(virt_num_groups_18381) - phys_group_id_18383, sext_i64_i32(num_groups_18382));
    
    for (int32_t i_18385 = 0; i_18385 < iterations_18384; i_18385++) {
        int32_t virt_group_id_18386 = phys_group_id_18383 + i_18385 * sext_i64_i32(num_groups_18382);
        int64_t global_tid_18387 = sext_i32_i64(virt_group_id_18386) * sext_i32_i64(group_sizze_18379) + sext_i32_i64(copy_ltid_18377);
        int64_t slice_18390 = (int64_t) 14;
        int64_t slice_18391 = (int64_t) 14 * slice_18390;
        int64_t copy_i_18388 = squot64(global_tid_18387, slice_18390);
        int64_t remnant_18392 = global_tid_18387 - copy_i_18388 * slice_18390;
        int64_t copy_i_18389 = remnant_18392;
        int64_t remnant_18393 = remnant_18392 - copy_i_18389;
        
        if (slt64(global_tid_18387, (int64_t) 196)) {
            float tmp_18394 = ((__global float *) mem_18138)[copy_i_18389 * (int64_t) 14 + copy_i_18388];
            
            ((__global float *) mem_18165)[copy_i_18388 * (int64_t) 14 + copy_i_18389] = tmp_18394;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18395(int64_t virt_num_groups_18400, int64_t num_groups_18401, __global unsigned char *mem_18139, __global unsigned char *mem_18168)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18396;
    int64_t group_sizze_18398;
    int32_t copy_gid_18397;
    
    copy_ltid_18396 = get_local_id(0);
    group_sizze_18398 = get_local_size(0);
    copy_gid_18397 = get_group_id(0);
    
    int32_t copy_gtid_18395 = copy_gid_18397 * group_sizze_18398 + copy_ltid_18396;
    int32_t phys_group_id_18402;
    
    phys_group_id_18402 = get_group_id(0);
    
    int32_t iterations_18403 = sdiv_up32(sext_i64_i32(virt_num_groups_18400) - phys_group_id_18402, sext_i64_i32(num_groups_18401));
    
    for (int32_t i_18404 = 0; i_18404 < iterations_18403; i_18404++) {
        int32_t virt_group_id_18405 = phys_group_id_18402 + i_18404 * sext_i64_i32(num_groups_18401);
        int64_t global_tid_18406 = sext_i32_i64(virt_group_id_18405) * sext_i32_i64(group_sizze_18398) + sext_i32_i64(copy_ltid_18396);
        int64_t slice_18409 = (int64_t) 14;
        int64_t slice_18410 = (int64_t) 14 * slice_18409;
        int64_t copy_i_18407 = squot64(global_tid_18406, slice_18409);
        int64_t remnant_18411 = global_tid_18406 - copy_i_18407 * slice_18409;
        int64_t copy_i_18408 = remnant_18411;
        int64_t remnant_18412 = remnant_18411 - copy_i_18408;
        
        if (slt64(global_tid_18406, (int64_t) 196)) {
            float tmp_18413 = ((__global float *) mem_18139)[copy_i_18408 * (int64_t) 14 + copy_i_18407];
            
            ((__global float *) mem_18168)[copy_i_18407 * (int64_t) 14 + copy_i_18408] = tmp_18413;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18414(int64_t virt_num_groups_18419, int64_t num_groups_18420, __global unsigned char *mem_18140, __global unsigned char *mem_18171)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18415;
    int64_t group_sizze_18417;
    int32_t copy_gid_18416;
    
    copy_ltid_18415 = get_local_id(0);
    group_sizze_18417 = get_local_size(0);
    copy_gid_18416 = get_group_id(0);
    
    int32_t copy_gtid_18414 = copy_gid_18416 * group_sizze_18417 + copy_ltid_18415;
    int32_t phys_group_id_18421;
    
    phys_group_id_18421 = get_group_id(0);
    
    int32_t iterations_18422 = sdiv_up32(sext_i64_i32(virt_num_groups_18419) - phys_group_id_18421, sext_i64_i32(num_groups_18420));
    
    for (int32_t i_18423 = 0; i_18423 < iterations_18422; i_18423++) {
        int32_t virt_group_id_18424 = phys_group_id_18421 + i_18423 * sext_i64_i32(num_groups_18420);
        int64_t global_tid_18425 = sext_i32_i64(virt_group_id_18424) * sext_i32_i64(group_sizze_18417) + sext_i32_i64(copy_ltid_18415);
        int64_t slice_18428 = (int64_t) 14;
        int64_t slice_18429 = (int64_t) 14 * slice_18428;
        int64_t copy_i_18426 = squot64(global_tid_18425, slice_18428);
        int64_t remnant_18430 = global_tid_18425 - copy_i_18426 * slice_18428;
        int64_t copy_i_18427 = remnant_18430;
        int64_t remnant_18431 = remnant_18430 - copy_i_18427;
        
        if (slt64(global_tid_18425, (int64_t) 196)) {
            float tmp_18432 = ((__global float *) mem_18140)[copy_i_18427 * (int64_t) 14 + copy_i_18426];
            
            ((__global float *) mem_18171)[copy_i_18426 * (int64_t) 14 + copy_i_18427] = tmp_18432;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18433(int64_t virt_num_groups_18438, int64_t num_groups_18439, __global unsigned char *mem_18141, __global unsigned char *mem_18174)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18434;
    int64_t group_sizze_18436;
    int32_t copy_gid_18435;
    
    copy_ltid_18434 = get_local_id(0);
    group_sizze_18436 = get_local_size(0);
    copy_gid_18435 = get_group_id(0);
    
    int32_t copy_gtid_18433 = copy_gid_18435 * group_sizze_18436 + copy_ltid_18434;
    int32_t phys_group_id_18440;
    
    phys_group_id_18440 = get_group_id(0);
    
    int32_t iterations_18441 = sdiv_up32(sext_i64_i32(virt_num_groups_18438) - phys_group_id_18440, sext_i64_i32(num_groups_18439));
    
    for (int32_t i_18442 = 0; i_18442 < iterations_18441; i_18442++) {
        int32_t virt_group_id_18443 = phys_group_id_18440 + i_18442 * sext_i64_i32(num_groups_18439);
        int64_t global_tid_18444 = sext_i32_i64(virt_group_id_18443) * sext_i32_i64(group_sizze_18436) + sext_i32_i64(copy_ltid_18434);
        int64_t slice_18447 = (int64_t) 14;
        int64_t slice_18448 = (int64_t) 14 * slice_18447;
        int64_t copy_i_18445 = squot64(global_tid_18444, slice_18447);
        int64_t remnant_18449 = global_tid_18444 - copy_i_18445 * slice_18447;
        int64_t copy_i_18446 = remnant_18449;
        int64_t remnant_18450 = remnant_18449 - copy_i_18446;
        
        if (slt64(global_tid_18444, (int64_t) 196)) {
            float tmp_18451 = ((__global float *) mem_18141)[copy_i_18446 * (int64_t) 14 + copy_i_18445];
            
            ((__global float *) mem_18174)[copy_i_18445 * (int64_t) 14 + copy_i_18446] = tmp_18451;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18452(int64_t virt_num_groups_18457, int64_t num_groups_18458, __global unsigned char *mem_18142, __global unsigned char *mem_18177)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18453;
    int64_t group_sizze_18455;
    int32_t copy_gid_18454;
    
    copy_ltid_18453 = get_local_id(0);
    group_sizze_18455 = get_local_size(0);
    copy_gid_18454 = get_group_id(0);
    
    int32_t copy_gtid_18452 = copy_gid_18454 * group_sizze_18455 + copy_ltid_18453;
    int32_t phys_group_id_18459;
    
    phys_group_id_18459 = get_group_id(0);
    
    int32_t iterations_18460 = sdiv_up32(sext_i64_i32(virt_num_groups_18457) - phys_group_id_18459, sext_i64_i32(num_groups_18458));
    
    for (int32_t i_18461 = 0; i_18461 < iterations_18460; i_18461++) {
        int32_t virt_group_id_18462 = phys_group_id_18459 + i_18461 * sext_i64_i32(num_groups_18458);
        int64_t global_tid_18463 = sext_i32_i64(virt_group_id_18462) * sext_i32_i64(group_sizze_18455) + sext_i32_i64(copy_ltid_18453);
        int64_t slice_18466 = (int64_t) 14;
        int64_t slice_18467 = (int64_t) 14 * slice_18466;
        int64_t copy_i_18464 = squot64(global_tid_18463, slice_18466);
        int64_t remnant_18468 = global_tid_18463 - copy_i_18464 * slice_18466;
        int64_t copy_i_18465 = remnant_18468;
        int64_t remnant_18469 = remnant_18468 - copy_i_18465;
        
        if (slt64(global_tid_18463, (int64_t) 196)) {
            float tmp_18470 = ((__global float *) mem_18142)[copy_i_18465 * (int64_t) 14 + copy_i_18464];
            
            ((__global float *) mem_18177)[copy_i_18464 * (int64_t) 14 + copy_i_18465] = tmp_18470;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18471(int64_t virt_num_groups_18476, int64_t num_groups_18477, __global unsigned char *mem_18143, __global unsigned char *mem_18180)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18472;
    int64_t group_sizze_18474;
    int32_t copy_gid_18473;
    
    copy_ltid_18472 = get_local_id(0);
    group_sizze_18474 = get_local_size(0);
    copy_gid_18473 = get_group_id(0);
    
    int32_t copy_gtid_18471 = copy_gid_18473 * group_sizze_18474 + copy_ltid_18472;
    int32_t phys_group_id_18478;
    
    phys_group_id_18478 = get_group_id(0);
    
    int32_t iterations_18479 = sdiv_up32(sext_i64_i32(virt_num_groups_18476) - phys_group_id_18478, sext_i64_i32(num_groups_18477));
    
    for (int32_t i_18480 = 0; i_18480 < iterations_18479; i_18480++) {
        int32_t virt_group_id_18481 = phys_group_id_18478 + i_18480 * sext_i64_i32(num_groups_18477);
        int64_t global_tid_18482 = sext_i32_i64(virt_group_id_18481) * sext_i32_i64(group_sizze_18474) + sext_i32_i64(copy_ltid_18472);
        int64_t slice_18485 = (int64_t) 14;
        int64_t slice_18486 = (int64_t) 14 * slice_18485;
        int64_t copy_i_18483 = squot64(global_tid_18482, slice_18485);
        int64_t remnant_18487 = global_tid_18482 - copy_i_18483 * slice_18485;
        int64_t copy_i_18484 = remnant_18487;
        int64_t remnant_18488 = remnant_18487 - copy_i_18484;
        
        if (slt64(global_tid_18482, (int64_t) 196)) {
            float tmp_18489 = ((__global float *) mem_18143)[copy_i_18484 * (int64_t) 14 + copy_i_18483];
            
            ((__global float *) mem_18180)[copy_i_18483 * (int64_t) 14 + copy_i_18484] = tmp_18489;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18490(int64_t virt_num_groups_18495, int64_t num_groups_18496, __global unsigned char *mem_18144, __global unsigned char *mem_18183)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18491;
    int64_t group_sizze_18493;
    int32_t copy_gid_18492;
    
    copy_ltid_18491 = get_local_id(0);
    group_sizze_18493 = get_local_size(0);
    copy_gid_18492 = get_group_id(0);
    
    int32_t copy_gtid_18490 = copy_gid_18492 * group_sizze_18493 + copy_ltid_18491;
    int32_t phys_group_id_18497;
    
    phys_group_id_18497 = get_group_id(0);
    
    int32_t iterations_18498 = sdiv_up32(sext_i64_i32(virt_num_groups_18495) - phys_group_id_18497, sext_i64_i32(num_groups_18496));
    
    for (int32_t i_18499 = 0; i_18499 < iterations_18498; i_18499++) {
        int32_t virt_group_id_18500 = phys_group_id_18497 + i_18499 * sext_i64_i32(num_groups_18496);
        int64_t global_tid_18501 = sext_i32_i64(virt_group_id_18500) * sext_i32_i64(group_sizze_18493) + sext_i32_i64(copy_ltid_18491);
        int64_t slice_18504 = (int64_t) 14;
        int64_t slice_18505 = (int64_t) 14 * slice_18504;
        int64_t copy_i_18502 = squot64(global_tid_18501, slice_18504);
        int64_t remnant_18506 = global_tid_18501 - copy_i_18502 * slice_18504;
        int64_t copy_i_18503 = remnant_18506;
        int64_t remnant_18507 = remnant_18506 - copy_i_18503;
        
        if (slt64(global_tid_18501, (int64_t) 196)) {
            float tmp_18508 = ((__global float *) mem_18144)[copy_i_18503 * (int64_t) 14 + copy_i_18502];
            
            ((__global float *) mem_18183)[copy_i_18502 * (int64_t) 14 + copy_i_18503] = tmp_18508;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18509(int64_t virt_num_groups_18514, int64_t num_groups_18515, __global unsigned char *mem_18145, __global unsigned char *mem_18186)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18510;
    int64_t group_sizze_18512;
    int32_t copy_gid_18511;
    
    copy_ltid_18510 = get_local_id(0);
    group_sizze_18512 = get_local_size(0);
    copy_gid_18511 = get_group_id(0);
    
    int32_t copy_gtid_18509 = copy_gid_18511 * group_sizze_18512 + copy_ltid_18510;
    int32_t phys_group_id_18516;
    
    phys_group_id_18516 = get_group_id(0);
    
    int32_t iterations_18517 = sdiv_up32(sext_i64_i32(virt_num_groups_18514) - phys_group_id_18516, sext_i64_i32(num_groups_18515));
    
    for (int32_t i_18518 = 0; i_18518 < iterations_18517; i_18518++) {
        int32_t virt_group_id_18519 = phys_group_id_18516 + i_18518 * sext_i64_i32(num_groups_18515);
        int64_t global_tid_18520 = sext_i32_i64(virt_group_id_18519) * sext_i32_i64(group_sizze_18512) + sext_i32_i64(copy_ltid_18510);
        int64_t slice_18523 = (int64_t) 14;
        int64_t slice_18524 = (int64_t) 14 * slice_18523;
        int64_t copy_i_18521 = squot64(global_tid_18520, slice_18523);
        int64_t remnant_18525 = global_tid_18520 - copy_i_18521 * slice_18523;
        int64_t copy_i_18522 = remnant_18525;
        int64_t remnant_18526 = remnant_18525 - copy_i_18522;
        
        if (slt64(global_tid_18520, (int64_t) 196)) {
            float tmp_18527 = ((__global float *) mem_18145)[copy_i_18522 * (int64_t) 14 + copy_i_18521];
            
            ((__global float *) mem_18186)[copy_i_18521 * (int64_t) 14 + copy_i_18522] = tmp_18527;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18528(int64_t virt_num_groups_18533, int64_t num_groups_18534, __global unsigned char *mem_18146, __global unsigned char *mem_18189)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18529;
    int64_t group_sizze_18531;
    int32_t copy_gid_18530;
    
    copy_ltid_18529 = get_local_id(0);
    group_sizze_18531 = get_local_size(0);
    copy_gid_18530 = get_group_id(0);
    
    int32_t copy_gtid_18528 = copy_gid_18530 * group_sizze_18531 + copy_ltid_18529;
    int32_t phys_group_id_18535;
    
    phys_group_id_18535 = get_group_id(0);
    
    int32_t iterations_18536 = sdiv_up32(sext_i64_i32(virt_num_groups_18533) - phys_group_id_18535, sext_i64_i32(num_groups_18534));
    
    for (int32_t i_18537 = 0; i_18537 < iterations_18536; i_18537++) {
        int32_t virt_group_id_18538 = phys_group_id_18535 + i_18537 * sext_i64_i32(num_groups_18534);
        int64_t global_tid_18539 = sext_i32_i64(virt_group_id_18538) * sext_i32_i64(group_sizze_18531) + sext_i32_i64(copy_ltid_18529);
        int64_t slice_18542 = (int64_t) 14;
        int64_t slice_18543 = (int64_t) 14 * slice_18542;
        int64_t copy_i_18540 = squot64(global_tid_18539, slice_18542);
        int64_t remnant_18544 = global_tid_18539 - copy_i_18540 * slice_18542;
        int64_t copy_i_18541 = remnant_18544;
        int64_t remnant_18545 = remnant_18544 - copy_i_18541;
        
        if (slt64(global_tid_18539, (int64_t) 196)) {
            float tmp_18546 = ((__global float *) mem_18146)[copy_i_18541 * (int64_t) 14 + copy_i_18540];
            
            ((__global float *) mem_18189)[copy_i_18540 * (int64_t) 14 + copy_i_18541] = tmp_18546;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void copy_18547(int64_t virt_num_groups_18552, int64_t num_groups_18553, __global unsigned char *mem_18147, __global unsigned char *mem_18192)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_ltid_18548;
    int64_t group_sizze_18550;
    int32_t copy_gid_18549;
    
    copy_ltid_18548 = get_local_id(0);
    group_sizze_18550 = get_local_size(0);
    copy_gid_18549 = get_group_id(0);
    
    int32_t copy_gtid_18547 = copy_gid_18549 * group_sizze_18550 + copy_ltid_18548;
    int32_t phys_group_id_18554;
    
    phys_group_id_18554 = get_group_id(0);
    
    int32_t iterations_18555 = sdiv_up32(sext_i64_i32(virt_num_groups_18552) - phys_group_id_18554, sext_i64_i32(num_groups_18553));
    
    for (int32_t i_18556 = 0; i_18556 < iterations_18555; i_18556++) {
        int32_t virt_group_id_18557 = phys_group_id_18554 + i_18556 * sext_i64_i32(num_groups_18553);
        int64_t global_tid_18558 = sext_i32_i64(virt_group_id_18557) * sext_i32_i64(group_sizze_18550) + sext_i32_i64(copy_ltid_18548);
        int64_t slice_18561 = (int64_t) 14;
        int64_t slice_18562 = (int64_t) 14 * slice_18561;
        int64_t copy_i_18559 = squot64(global_tid_18558, slice_18561);
        int64_t remnant_18563 = global_tid_18558 - copy_i_18559 * slice_18561;
        int64_t copy_i_18560 = remnant_18563;
        int64_t remnant_18564 = remnant_18563 - copy_i_18560;
        
        if (slt64(global_tid_18558, (int64_t) 196)) {
            float tmp_18565 = ((__global float *) mem_18147)[copy_i_18560 * (int64_t) 14 + copy_i_18559];
            
            ((__global float *) mem_18192)[copy_i_18559 * (int64_t) 14 + copy_i_18560] = tmp_18565;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
}
__kernel void gpuseq_18332(__global int *global_failure, __global unsigned char *mem_18127, __global unsigned char *mem_18129, __global unsigned char *mem_18131, __global unsigned char *mem_18133, __global unsigned char *mem_18135, __global unsigned char *mem_18149, __global unsigned char *mem_18151, __global unsigned char *mem_18153, __global unsigned char *mem_18155, __global unsigned char *mem_18157)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18334;
    int64_t group_sizze_18337;
    int32_t wave_sizze_18336;
    int32_t group_tid_18335;
    
    local_tid_18334 = get_local_id(0);
    group_sizze_18337 = get_local_size(0);
    wave_sizze_18336 = LOCKSTEP_WIDTH;
    group_tid_18335 = get_group_id(0);
    
    int32_t global_tid_18333 = group_tid_18335 * group_sizze_18337 + local_tid_18334;
    int32_t tid_18332 = global_tid_18333;
    bool defunc_2_reduce_res_18003 = ((__global bool *) mem_18127)[(int64_t) 0];
    bool defunc_2_reduce_res_18005 = ((__global bool *) mem_18129)[(int64_t) 0];
    bool defunc_2_reduce_res_18007 = ((__global bool *) mem_18131)[(int64_t) 0];
    bool defunc_2_reduce_res_18009 = ((__global bool *) mem_18133)[(int64_t) 0];
    bool defunc_2_reduce_res_18011 = ((__global bool *) mem_18135)[(int64_t) 0];
    
    ((__global bool *) mem_18149)[(int64_t) 0] = defunc_2_reduce_res_18003;
    ((__global bool *) mem_18151)[(int64_t) 0] = defunc_2_reduce_res_18005;
    ((__global bool *) mem_18153)[(int64_t) 0] = defunc_2_reduce_res_18007;
    ((__global bool *) mem_18155)[(int64_t) 0] = defunc_2_reduce_res_18009;
    ((__global bool *) mem_18157)[(int64_t) 0] = defunc_2_reduce_res_18011;
    
  error_0:
    return;
}
__kernel void gpuseq_18648(__global int *global_failure, __global unsigned char *mem_18070, __global unsigned char *mem_18072, __global unsigned char *mem_18074, __global unsigned char *mem_18076, __global unsigned char *mem_18078, __global unsigned char *mem_18080, __global unsigned char *mem_18082, __global unsigned char *mem_18084, __global unsigned char *mem_18086, __global unsigned char *mem_18088)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18650;
    int64_t group_sizze_18653;
    int32_t wave_sizze_18652;
    int32_t group_tid_18651;
    
    local_tid_18650 = get_local_id(0);
    group_sizze_18653 = get_local_size(0);
    wave_sizze_18652 = LOCKSTEP_WIDTH;
    group_tid_18651 = get_group_id(0);
    
    int32_t global_tid_18649 = group_tid_18651 * group_sizze_18653 + local_tid_18650;
    int32_t tid_18648 = global_tid_18649;
    bool defunc_2_reduce_res_18013 = ((__global bool *) mem_18070)[(int64_t) 0];
    bool defunc_2_reduce_res_18015 = ((__global bool *) mem_18072)[(int64_t) 0];
    bool defunc_2_reduce_res_18017 = ((__global bool *) mem_18074)[(int64_t) 0];
    bool defunc_2_reduce_res_18019 = ((__global bool *) mem_18076)[(int64_t) 0];
    bool defunc_2_reduce_res_18021 = ((__global bool *) mem_18078)[(int64_t) 0];
    
    ((__global bool *) mem_18080)[(int64_t) 0] = defunc_2_reduce_res_18013;
    ((__global bool *) mem_18082)[(int64_t) 0] = defunc_2_reduce_res_18015;
    ((__global bool *) mem_18084)[(int64_t) 0] = defunc_2_reduce_res_18017;
    ((__global bool *) mem_18086)[(int64_t) 0] = defunc_2_reduce_res_18019;
    ((__global bool *) mem_18088)[(int64_t) 0] = defunc_2_reduce_res_18021;
    
  error_0:
    return;
}
__kernel void segmap_17607(__global int *global_failure, __global unsigned char *mem_18029, __global unsigned char *mem_18031, __global unsigned char *mem_18034, __global unsigned char *mem_18036, __global unsigned char *mem_18038, __global unsigned char *mem_18040, __global unsigned char *mem_18042)
{
    #define segmap_group_sizze_17599 (segmap_group_sizze_17215)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18568;
    int64_t group_sizze_18571;
    int32_t wave_sizze_18570;
    int32_t group_tid_18569;
    
    local_tid_18568 = get_local_id(0);
    group_sizze_18571 = get_local_size(0);
    wave_sizze_18570 = LOCKSTEP_WIDTH;
    group_tid_18569 = get_group_id(0);
    
    int32_t global_tid_18567 = group_tid_18569 * group_sizze_18571 + local_tid_18568;
    int32_t phys_tid_17607 = global_tid_18567;
    int64_t global_tid_18572 = sext_i32_i64(group_tid_18569) * segmap_group_sizze_17599 + sext_i32_i64(local_tid_18568);
    int64_t slice_18573 = (int64_t) 14;
    int64_t gtid_17606 = global_tid_18572;
    int64_t remnant_18574 = global_tid_18572 - gtid_17606;
    
    if (slt64(gtid_17606, (int64_t) 14)) {
        float x_17608 = ((__global float *) mem_18029)[gtid_17606];
        float x_17609 = ((__global float *) mem_18031)[gtid_17606];
        float x_17610 = x_17608 / 6.2831855F;
        float contains_int_arg_17611 = x_17610 - 0.75F;
        float x_17612 = x_17609 / 6.2831855F;
        float contains_int_arg_17613 = x_17612 - 0.75F;
        bool cond_17614 = contains_int_arg_17613 == INFINITY;
        bool cond_17615 = contains_int_arg_17611 == -INFINITY;
        float floor_res_17616 = futrts_floor32(contains_int_arg_17611);
        bool contains_int_res_f_res_f_res_17617 = contains_int_arg_17613 <= floor_res_17616;
        bool x_17618 = !cond_17615;
        bool y_17619 = contains_int_res_f_res_f_res_17617 && x_17618;
        bool x_17620 = !cond_17614;
        bool y_17621 = y_17619 && x_17620;
        float sin_res_17622 = futrts_sin32(x_17609);
        bool isnan_res_17623 = futrts_isnan32(sin_res_17622);
        bool x_17624 = !y_17621;
        bool y_17625 = isnan_res_17623 && x_17624;
        bool cond_17626 = y_17621 || y_17625;
        float sin_res_17627 = futrts_sin32(x_17608);
        bool isnan_res_17628 = futrts_isnan32(sin_res_17627);
        bool x_17629 = !cond_17626;
        bool y_17630 = isnan_res_17628 && x_17629;
        bool cond_17631 = cond_17626 || y_17630;
        float defunc_0_f_res_17632;
        
        if (cond_17631 == 1) {
            defunc_0_f_res_17632 = -1.0F;
        } else {
            float min_res_17633 = fmin32(sin_res_17622, sin_res_17627);
            
            defunc_0_f_res_17632 = min_res_17633;
        }
        
        float contains_int_arg_17634 = x_17610 - 0.25F;
        float contains_int_arg_17635 = x_17612 - 0.25F;
        bool cond_17636 = contains_int_arg_17635 == INFINITY;
        bool cond_17637 = contains_int_arg_17634 == -INFINITY;
        float floor_res_17638 = futrts_floor32(contains_int_arg_17634);
        bool contains_int_res_f_res_f_res_17639 = contains_int_arg_17635 <= floor_res_17638;
        bool x_17640 = !cond_17637;
        bool y_17641 = contains_int_res_f_res_f_res_17639 && x_17640;
        bool x_17642 = !cond_17636;
        bool y_17643 = y_17641 && x_17642;
        bool x_17644 = !y_17643;
        bool y_17645 = isnan_res_17623 && x_17644;
        bool cond_17646 = y_17643 || y_17645;
        bool x_17647 = !cond_17646;
        bool y_17648 = isnan_res_17628 && x_17647;
        bool cond_17649 = cond_17646 || y_17648;
        float defunc_0_f_res_17650;
        
        if (cond_17649 == 1) {
            defunc_0_f_res_17650 = 1.0F;
        } else {
            float max_res_17651 = fmax32(sin_res_17622, sin_res_17627);
            
            defunc_0_f_res_17650 = max_res_17651;
        }
        
        bool cond_17652 = defunc_0_f_res_17632 == NAN;
        bool cond_17653 = !cond_17652;
        bool cond_t_res_17654 = defunc_0_f_res_17650 == NAN;
        bool cond_t_res_17655 = !cond_t_res_17654;
        bool x_17656 = cond_17653 && cond_t_res_17655;
        bool defunc_0_f_res_t_res_17657 = defunc_0_f_res_17632 <= defunc_0_f_res_17650;
        bool x_17658 = x_17656 && defunc_0_f_res_t_res_17657;
        float contains_int_arg_17659 = x_17610 - 0.5F;
        float contains_int_arg_17660 = x_17612 - 0.5F;
        bool cond_17661 = contains_int_arg_17660 == INFINITY;
        bool cond_17662 = contains_int_arg_17659 == -INFINITY;
        float floor_res_17663 = futrts_floor32(contains_int_arg_17659);
        bool contains_int_res_f_res_f_res_17664 = contains_int_arg_17660 <= floor_res_17663;
        bool x_17665 = !cond_17662;
        bool y_17666 = contains_int_res_f_res_f_res_17664 && x_17665;
        bool x_17667 = !cond_17661;
        bool y_17668 = y_17666 && x_17667;
        float cos_res_17669 = futrts_cos32(x_17609);
        bool isnan_res_17670 = futrts_isnan32(cos_res_17669);
        bool x_17671 = !y_17668;
        bool y_17672 = isnan_res_17670 && x_17671;
        bool cond_17673 = y_17668 || y_17672;
        float cos_res_17674 = futrts_cos32(x_17608);
        bool isnan_res_17675 = futrts_isnan32(cos_res_17674);
        bool x_17676 = !cond_17673;
        bool y_17677 = isnan_res_17675 && x_17676;
        bool cond_17678 = cond_17673 || y_17677;
        float defunc_0_f_res_17679;
        
        if (cond_17678 == 1) {
            defunc_0_f_res_17679 = -1.0F;
        } else {
            float min_res_17680 = fmin32(cos_res_17669, cos_res_17674);
            
            defunc_0_f_res_17679 = min_res_17680;
        }
        
        bool cond_17681 = x_17612 == INFINITY;
        bool cond_17682 = x_17610 == -INFINITY;
        float floor_res_17683 = futrts_floor32(x_17610);
        bool contains_int_res_f_res_f_res_17684 = x_17612 <= floor_res_17683;
        bool x_17685 = !cond_17682;
        bool y_17686 = contains_int_res_f_res_f_res_17684 && x_17685;
        bool x_17687 = !cond_17681;
        bool y_17688 = y_17686 && x_17687;
        bool x_17689 = !y_17688;
        bool y_17690 = isnan_res_17670 && x_17689;
        bool cond_17691 = y_17688 || y_17690;
        bool x_17692 = !cond_17691;
        bool y_17693 = isnan_res_17675 && x_17692;
        bool cond_17694 = cond_17691 || y_17693;
        float defunc_0_f_res_17695;
        
        if (cond_17694 == 1) {
            defunc_0_f_res_17695 = 1.0F;
        } else {
            float max_res_17696 = fmax32(cos_res_17669, cos_res_17674);
            
            defunc_0_f_res_17695 = max_res_17696;
        }
        
        bool cond_17697 = defunc_0_f_res_17679 == NAN;
        bool cond_17698 = !cond_17697;
        bool cond_t_res_17699 = defunc_0_f_res_17695 == NAN;
        bool cond_t_res_17700 = !cond_t_res_17699;
        bool x_17701 = cond_17698 && cond_t_res_17700;
        bool defunc_0_f_res_t_res_17702 = defunc_0_f_res_17679 <= defunc_0_f_res_17695;
        bool x_17703 = x_17701 && defunc_0_f_res_t_res_17702;
        float exp_res_17704 = futrts_exp32(x_17609);
        float exp_res_17705 = futrts_exp32(x_17608);
        bool cond_17706 = exp_res_17704 == NAN;
        bool cond_17707 = !cond_17706;
        bool cond_t_res_17708 = exp_res_17705 == NAN;
        bool cond_t_res_17709 = !cond_t_res_17708;
        bool x_17710 = cond_17707 && cond_t_res_17709;
        bool defunc_0_f_res_t_res_17711 = exp_res_17704 <= exp_res_17705;
        bool x_17712 = x_17710 && defunc_0_f_res_t_res_17711;
        float sqrt_res_17713 = futrts_sqrt32(x_17609);
        float sqrt_res_17714 = futrts_sqrt32(x_17608);
        bool isnan_res_17715 = futrts_isnan32(sqrt_res_17713);
        float defunc_0_f_res_17716;
        
        if (isnan_res_17715 == 1) {
            defunc_0_f_res_17716 = -INFINITY;
        } else {
            defunc_0_f_res_17716 = sqrt_res_17713;
        }
        
        bool isnan_res_17717 = futrts_isnan32(sqrt_res_17714);
        float defunc_0_f_res_17718;
        
        if (isnan_res_17717 == 1) {
            defunc_0_f_res_17718 = INFINITY;
        } else {
            defunc_0_f_res_17718 = sqrt_res_17714;
        }
        
        bool eq_x_zz_17719 = NAN == sqrt_res_17713;
        bool not_p_17720 = !isnan_res_17715;
        bool p_and_eq_x_y_17721 = eq_x_zz_17719 && not_p_17720;
        bool cond_17722 = !p_and_eq_x_y_17721;
        bool eq_x_zz_17723 = NAN == sqrt_res_17714;
        bool not_p_17724 = !isnan_res_17717;
        bool p_and_eq_x_y_17725 = eq_x_zz_17723 && not_p_17724;
        bool cond_t_res_17726 = !p_and_eq_x_y_17725;
        bool x_17727 = cond_17722 && cond_t_res_17726;
        bool defunc_0_f_res_t_res_17728 = defunc_0_f_res_17716 <= defunc_0_f_res_17718;
        bool x_17729 = x_17727 && defunc_0_f_res_t_res_17728;
        float defunc_0_f_res_17730 = 0.0F - x_17608;
        float defunc_0_f_res_17731 = 0.0F - x_17609;
        bool cond_17732 = defunc_0_f_res_17730 == NAN;
        bool cond_17733 = !cond_17732;
        bool cond_t_res_17734 = defunc_0_f_res_17731 == NAN;
        bool cond_t_res_17735 = !cond_t_res_17734;
        bool x_17736 = cond_17733 && cond_t_res_17735;
        bool defunc_0_f_res_t_res_17737 = defunc_0_f_res_17730 <= defunc_0_f_res_17731;
        bool x_17738 = x_17736 && defunc_0_f_res_t_res_17737;
        
        ((__global bool *) mem_18034)[gtid_17606] = x_17658;
        ((__global bool *) mem_18036)[gtid_17606] = x_17703;
        ((__global bool *) mem_18038)[gtid_17606] = x_17712;
        ((__global bool *) mem_18040)[gtid_17606] = x_17729;
        ((__global bool *) mem_18042)[gtid_17606] = x_17738;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_17599
}
__kernel void segmap_17761(__global int *global_failure, __global unsigned char *mem_18029, __global unsigned char *mem_18031, __global unsigned char *mem_18045, __global unsigned char *mem_18047, __global unsigned char *mem_18049, __global unsigned char *mem_18051, __global unsigned char *mem_18053, __global unsigned char *mem_18055, __global unsigned char *mem_18057, __global unsigned char *mem_18059, __global unsigned char *mem_18061, __global unsigned char *mem_18063, __global unsigned char *mem_18065, __global unsigned char *mem_18067)
{
    #define segmap_group_sizze_17745 (segmap_group_sizze_17073)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18577;
    int64_t group_sizze_18580;
    int32_t wave_sizze_18579;
    int32_t group_tid_18578;
    
    local_tid_18577 = get_local_id(0);
    group_sizze_18580 = get_local_size(0);
    wave_sizze_18579 = LOCKSTEP_WIDTH;
    group_tid_18578 = get_group_id(0);
    
    int32_t global_tid_18576 = group_tid_18578 * group_sizze_18580 + local_tid_18577;
    int32_t phys_tid_17761 = global_tid_18576;
    int64_t global_tid_18581 = sext_i32_i64(group_tid_18578) * segmap_group_sizze_17745 + sext_i32_i64(local_tid_18577);
    int64_t slice_18582 = (int64_t) 14;
    int64_t slice_18583 = (int64_t) 14 * slice_18582;
    int64_t gtid_17759 = squot64(global_tid_18581, slice_18582);
    int64_t remnant_18584 = global_tid_18581 - gtid_17759 * slice_18582;
    int64_t gtid_17760 = remnant_18584;
    int64_t remnant_18585 = remnant_18584 - gtid_17760;
    
    if (slt64(gtid_17759, (int64_t) 14) && slt64(gtid_17760, (int64_t) 14)) {
        float x_17762 = ((__global float *) mem_18029)[gtid_17759];
        float x_17763 = ((__global float *) mem_18031)[gtid_17759];
        float x_17764 = ((__global float *) mem_18029)[gtid_17760];
        float x_17765 = ((__global float *) mem_18031)[gtid_17760];
        float max_res_17766 = fmax32(x_17763, x_17765);
        float max_res_17767 = fmax32(x_17762, x_17764);
        float min_res_17768 = fmin32(x_17763, x_17765);
        float min_res_17769 = fmin32(x_17762, x_17764);
        bool cond_17770 = x_17765 <= 0.0F;
        bool cond_t_res_17771 = 0.0F <= x_17764;
        bool x_17772 = cond_17770 && cond_t_res_17771;
        float inv_res_17773;
        float inv_res_17774;
        
        if (x_17772 == 1) {
            inv_res_17773 = INFINITY;
            inv_res_17774 = -INFINITY;
        } else {
            float inv_res_f_res_17775 = 1.0F / x_17764;
            float inv_res_f_res_17776 = 1.0F / x_17765;
            
            inv_res_17773 = inv_res_f_res_17776;
            inv_res_17774 = inv_res_f_res_17775;
        }
        
        float f32_min4_arg_17777 = x_17762 * inv_res_17773;
        float f32_min4_arg_17778 = x_17762 * inv_res_17774;
        float f32_min4_arg_17779 = x_17763 * inv_res_17773;
        float f32_min4_arg_17780 = x_17763 * inv_res_17774;
        float min_res_17781 = fmin32(f32_min4_arg_17777, f32_min4_arg_17778);
        float min_res_17782 = fmin32(f32_min4_arg_17779, f32_min4_arg_17780);
        float min_res_17783 = fmin32(min_res_17781, min_res_17782);
        float max_res_17784 = fmax32(f32_min4_arg_17777, f32_min4_arg_17778);
        float max_res_17785 = fmax32(f32_min4_arg_17779, f32_min4_arg_17780);
        float max_res_17786 = fmax32(max_res_17784, max_res_17785);
        bool isnan_res_17787 = futrts_isnan32(min_res_17783);
        float defunc_0_f_res_17788;
        
        if (isnan_res_17787 == 1) {
            defunc_0_f_res_17788 = -INFINITY;
        } else {
            defunc_0_f_res_17788 = min_res_17783;
        }
        
        bool isnan_res_17789 = futrts_isnan32(max_res_17786);
        float defunc_0_f_res_17790;
        
        if (isnan_res_17789 == 1) {
            defunc_0_f_res_17790 = INFINITY;
        } else {
            defunc_0_f_res_17790 = max_res_17786;
        }
        
        float f32_min4_arg_17791 = x_17762 * x_17764;
        float f32_min4_arg_17792 = x_17762 * x_17765;
        float f32_min4_arg_17793 = x_17763 * x_17764;
        float f32_min4_arg_17794 = x_17763 * x_17765;
        float min_res_17795 = fmin32(f32_min4_arg_17791, f32_min4_arg_17792);
        float min_res_17796 = fmin32(f32_min4_arg_17793, f32_min4_arg_17794);
        float min_res_17797 = fmin32(min_res_17795, min_res_17796);
        float max_res_17798 = fmax32(f32_min4_arg_17791, f32_min4_arg_17792);
        float max_res_17799 = fmax32(f32_min4_arg_17793, f32_min4_arg_17794);
        float max_res_17800 = fmax32(max_res_17798, max_res_17799);
        bool isnan_res_17801 = futrts_isnan32(min_res_17797);
        float defunc_0_f_res_17802;
        
        if (isnan_res_17801 == 1) {
            defunc_0_f_res_17802 = -INFINITY;
        } else {
            defunc_0_f_res_17802 = min_res_17797;
        }
        
        bool isnan_res_17803 = futrts_isnan32(max_res_17800);
        float defunc_0_f_res_17804;
        
        if (isnan_res_17803 == 1) {
            defunc_0_f_res_17804 = INFINITY;
        } else {
            defunc_0_f_res_17804 = max_res_17800;
        }
        
        float neg_res_17805 = 0.0F - x_17764;
        float neg_res_17806 = 0.0F - x_17765;
        float binop_p_17807 = x_17763 + neg_res_17805;
        float binop_p_17808 = x_17762 + neg_res_17806;
        bool isnan_res_17809 = futrts_isnan32(binop_p_17807);
        float defunc_0_f_res_17810;
        
        if (isnan_res_17809 == 1) {
            defunc_0_f_res_17810 = -INFINITY;
        } else {
            defunc_0_f_res_17810 = binop_p_17807;
        }
        
        bool isnan_res_17811 = futrts_isnan32(binop_p_17808);
        float defunc_0_f_res_17812;
        
        if (isnan_res_17811 == 1) {
            defunc_0_f_res_17812 = INFINITY;
        } else {
            defunc_0_f_res_17812 = binop_p_17808;
        }
        
        float binop_p_17813 = x_17763 + x_17765;
        float binop_p_17814 = x_17762 + x_17764;
        bool isnan_res_17815 = futrts_isnan32(binop_p_17813);
        float defunc_0_f_res_17816;
        
        if (isnan_res_17815 == 1) {
            defunc_0_f_res_17816 = -INFINITY;
        } else {
            defunc_0_f_res_17816 = binop_p_17813;
        }
        
        bool isnan_res_17817 = futrts_isnan32(binop_p_17814);
        float defunc_0_f_res_17818;
        
        if (isnan_res_17817 == 1) {
            defunc_0_f_res_17818 = INFINITY;
        } else {
            defunc_0_f_res_17818 = binop_p_17814;
        }
        ((__global float *) mem_18045)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17818;
        ((__global float *) mem_18047)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17816;
        ((__global float *) mem_18049)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17812;
        ((__global float *) mem_18051)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17810;
        ((__global float *) mem_18053)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17804;
        ((__global float *) mem_18055)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17802;
        ((__global float *) mem_18057)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17790;
        ((__global float *) mem_18059)[gtid_17759 * (int64_t) 14 + gtid_17760] = defunc_0_f_res_17788;
        ((__global float *) mem_18061)[gtid_17759 * (int64_t) 14 + gtid_17760] = min_res_17769;
        ((__global float *) mem_18063)[gtid_17759 * (int64_t) 14 + gtid_17760] = min_res_17768;
        ((__global float *) mem_18065)[gtid_17759 * (int64_t) 14 + gtid_17760] = max_res_17767;
        ((__global float *) mem_18067)[gtid_17759 * (int64_t) 14 + gtid_17760] = max_res_17766;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_17745
}
__kernel void segred_nonseg_16819(__global int *global_failure, __local volatile int64_t *red_arr_mem_18262_backing_aligned_0, __local volatile int64_t *red_arr_mem_18260_backing_aligned_1, __local volatile int64_t *red_arr_mem_18258_backing_aligned_2, __local volatile int64_t *red_arr_mem_18256_backing_aligned_3, __local volatile int64_t *red_arr_mem_18254_backing_aligned_4, __local volatile int64_t *sync_arr_mem_18252_backing_aligned_5, int64_t num_groups_16798, int64_t num_threads_18246, __global unsigned char *mem_18029, __global unsigned char *mem_18031, __global unsigned char *mem_18127, __global unsigned char *mem_18129, __global unsigned char *mem_18131, __global unsigned char *mem_18133, __global unsigned char *mem_18135, __global unsigned char *mem_18136, __global unsigned char *mem_18137, __global unsigned char *mem_18138, __global unsigned char *mem_18139, __global unsigned char *mem_18140, __global unsigned char *mem_18141, __global unsigned char *mem_18142, __global unsigned char *mem_18143, __global unsigned char *mem_18144, __global unsigned char *mem_18145, __global unsigned char *mem_18146, __global unsigned char *mem_18147, __global unsigned char *counter_mem_18234, __global unsigned char *segred_tmp_mem_18236, __global unsigned char *segred_tmp_mem_18238, __global unsigned char *segred_tmp_mem_18240, __global unsigned char *segred_tmp_mem_18242, __global unsigned char *segred_tmp_mem_18244)
{
    #define segred_group_sizze_16797 (segred_group_sizze_16771)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_18262_backing_5 = (__local volatile unsigned char *) red_arr_mem_18262_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_18260_backing_4 = (__local volatile unsigned char *) red_arr_mem_18260_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_18258_backing_3 = (__local volatile unsigned char *) red_arr_mem_18258_backing_aligned_2;
    __local volatile unsigned char *restrict red_arr_mem_18256_backing_2 = (__local volatile unsigned char *) red_arr_mem_18256_backing_aligned_3;
    __local volatile unsigned char *restrict red_arr_mem_18254_backing_1 = (__local volatile unsigned char *) red_arr_mem_18254_backing_aligned_4;
    __local volatile unsigned char *restrict sync_arr_mem_18252_backing_0 = (__local volatile unsigned char *) sync_arr_mem_18252_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18248;
    int64_t group_sizze_18251;
    int32_t wave_sizze_18250;
    int32_t group_tid_18249;
    
    local_tid_18248 = get_local_id(0);
    group_sizze_18251 = get_local_size(0);
    wave_sizze_18250 = LOCKSTEP_WIDTH;
    group_tid_18249 = get_group_id(0);
    
    int32_t global_tid_18247 = group_tid_18249 * group_sizze_18251 + local_tid_18248;
    int32_t phys_tid_16819 = global_tid_18247;
    __local unsigned char *sync_arr_mem_18252;
    
    sync_arr_mem_18252 = (__local unsigned char *) sync_arr_mem_18252_backing_0;
    
    __local unsigned char *red_arr_mem_18254;
    
    red_arr_mem_18254 = (__local unsigned char *) red_arr_mem_18254_backing_1;
    
    __local unsigned char *red_arr_mem_18256;
    
    red_arr_mem_18256 = (__local unsigned char *) red_arr_mem_18256_backing_2;
    
    __local unsigned char *red_arr_mem_18258;
    
    red_arr_mem_18258 = (__local unsigned char *) red_arr_mem_18258_backing_3;
    
    __local unsigned char *red_arr_mem_18260;
    
    red_arr_mem_18260 = (__local unsigned char *) red_arr_mem_18260_backing_4;
    
    __local unsigned char *red_arr_mem_18262;
    
    red_arr_mem_18262 = (__local unsigned char *) red_arr_mem_18262_backing_5;
    
    int64_t dummy_16817 = (int64_t) 0;
    int64_t gtid_16818 = (int64_t) 0;
    bool x_acc_18264;
    bool x_acc_18265;
    bool x_acc_18266;
    bool x_acc_18267;
    bool x_acc_18268;
    int64_t chunk_sizze_18269 = smin64(sdiv_up64((int64_t) 14, sext_i32_i64(sext_i64_i32(segred_group_sizze_16797 * num_groups_16798))), sdiv_up64((int64_t) 14 - phys_tid_16819, num_threads_18246));
    bool x_16820;
    bool x_16821;
    bool x_16823;
    bool x_16824;
    bool x_16826;
    bool x_16827;
    bool x_16829;
    bool x_16830;
    bool x_16832;
    bool x_16833;
    
    // neutral-initialise the accumulators
    {
        x_acc_18264 = 1;
        x_acc_18265 = 1;
        x_acc_18266 = 1;
        x_acc_18267 = 1;
        x_acc_18268 = 1;
    }
    for (int64_t i_18285 = 0; i_18285 < chunk_sizze_18269; i_18285++) {
        gtid_16818 = phys_tid_16819 + num_threads_18246 * i_18285;
        // apply map function
        {
            float x_16835 = ((__global float *) mem_18029)[gtid_16818];
            float x_16836 = ((__global float *) mem_18031)[gtid_16818];
            float x_16837 = x_16835 / 6.2831855F;
            float contains_int_arg_16838 = x_16837 - 0.75F;
            float x_16839 = x_16836 / 6.2831855F;
            float contains_int_arg_16840 = x_16839 - 0.75F;
            bool cond_16841 = contains_int_arg_16840 == INFINITY;
            bool cond_16842 = contains_int_arg_16838 == -INFINITY;
            float floor_res_16843 = futrts_floor32(contains_int_arg_16838);
            bool contains_int_res_f_res_f_res_16844 = contains_int_arg_16840 <= floor_res_16843;
            bool x_16845 = !cond_16842;
            bool y_16846 = contains_int_res_f_res_f_res_16844 && x_16845;
            bool x_16847 = !cond_16841;
            bool y_16848 = y_16846 && x_16847;
            float sin_res_16849 = futrts_sin32(x_16836);
            bool isnan_res_16850 = futrts_isnan32(sin_res_16849);
            bool x_16851 = !y_16848;
            bool y_16852 = isnan_res_16850 && x_16851;
            bool cond_16853 = y_16848 || y_16852;
            float sin_res_16854 = futrts_sin32(x_16835);
            bool isnan_res_16855 = futrts_isnan32(sin_res_16854);
            bool x_16856 = !cond_16853;
            bool y_16857 = isnan_res_16855 && x_16856;
            bool cond_16858 = cond_16853 || y_16857;
            float defunc_0_f_res_16859;
            
            if (cond_16858 == 1) {
                defunc_0_f_res_16859 = -1.0F;
            } else {
                float min_res_16860 = fmin32(sin_res_16849, sin_res_16854);
                
                defunc_0_f_res_16859 = min_res_16860;
            }
            
            float contains_int_arg_16861 = x_16837 - 0.25F;
            float contains_int_arg_16862 = x_16839 - 0.25F;
            bool cond_16863 = contains_int_arg_16862 == INFINITY;
            bool cond_16864 = contains_int_arg_16861 == -INFINITY;
            float floor_res_16865 = futrts_floor32(contains_int_arg_16861);
            bool contains_int_res_f_res_f_res_16866 = contains_int_arg_16862 <= floor_res_16865;
            bool x_16867 = !cond_16864;
            bool y_16868 = contains_int_res_f_res_f_res_16866 && x_16867;
            bool x_16869 = !cond_16863;
            bool y_16870 = y_16868 && x_16869;
            bool x_16871 = !y_16870;
            bool y_16872 = isnan_res_16850 && x_16871;
            bool cond_16873 = y_16870 || y_16872;
            bool x_16874 = !cond_16873;
            bool y_16875 = isnan_res_16855 && x_16874;
            bool cond_16876 = cond_16873 || y_16875;
            float defunc_0_f_res_16877;
            
            if (cond_16876 == 1) {
                defunc_0_f_res_16877 = 1.0F;
            } else {
                float max_res_16878 = fmax32(sin_res_16849, sin_res_16854);
                
                defunc_0_f_res_16877 = max_res_16878;
            }
            
            bool cond_16879 = defunc_0_f_res_16859 == NAN;
            bool cond_16880 = !cond_16879;
            bool cond_t_res_16881 = defunc_0_f_res_16877 == NAN;
            bool cond_t_res_16882 = !cond_t_res_16881;
            bool x_16883 = cond_16880 && cond_t_res_16882;
            bool defunc_0_f_res_t_res_16884 = defunc_0_f_res_16859 <= defunc_0_f_res_16877;
            bool x_16885 = x_16883 && defunc_0_f_res_t_res_16884;
            float contains_int_arg_16886 = x_16837 - 0.5F;
            float contains_int_arg_16887 = x_16839 - 0.5F;
            bool cond_16888 = contains_int_arg_16887 == INFINITY;
            bool cond_16889 = contains_int_arg_16886 == -INFINITY;
            float floor_res_16890 = futrts_floor32(contains_int_arg_16886);
            bool contains_int_res_f_res_f_res_16891 = contains_int_arg_16887 <= floor_res_16890;
            bool x_16892 = !cond_16889;
            bool y_16893 = contains_int_res_f_res_f_res_16891 && x_16892;
            bool x_16894 = !cond_16888;
            bool y_16895 = y_16893 && x_16894;
            float cos_res_16896 = futrts_cos32(x_16836);
            bool isnan_res_16897 = futrts_isnan32(cos_res_16896);
            bool x_16898 = !y_16895;
            bool y_16899 = isnan_res_16897 && x_16898;
            bool cond_16900 = y_16895 || y_16899;
            float cos_res_16901 = futrts_cos32(x_16835);
            bool isnan_res_16902 = futrts_isnan32(cos_res_16901);
            bool x_16903 = !cond_16900;
            bool y_16904 = isnan_res_16902 && x_16903;
            bool cond_16905 = cond_16900 || y_16904;
            float defunc_0_f_res_16906;
            
            if (cond_16905 == 1) {
                defunc_0_f_res_16906 = -1.0F;
            } else {
                float min_res_16907 = fmin32(cos_res_16896, cos_res_16901);
                
                defunc_0_f_res_16906 = min_res_16907;
            }
            
            bool cond_16908 = x_16839 == INFINITY;
            bool cond_16909 = x_16837 == -INFINITY;
            float floor_res_16910 = futrts_floor32(x_16837);
            bool contains_int_res_f_res_f_res_16911 = x_16839 <= floor_res_16910;
            bool x_16912 = !cond_16909;
            bool y_16913 = contains_int_res_f_res_f_res_16911 && x_16912;
            bool x_16914 = !cond_16908;
            bool y_16915 = y_16913 && x_16914;
            bool x_16916 = !y_16915;
            bool y_16917 = isnan_res_16897 && x_16916;
            bool cond_16918 = y_16915 || y_16917;
            bool x_16919 = !cond_16918;
            bool y_16920 = isnan_res_16902 && x_16919;
            bool cond_16921 = cond_16918 || y_16920;
            float defunc_0_f_res_16922;
            
            if (cond_16921 == 1) {
                defunc_0_f_res_16922 = 1.0F;
            } else {
                float max_res_16923 = fmax32(cos_res_16896, cos_res_16901);
                
                defunc_0_f_res_16922 = max_res_16923;
            }
            
            bool cond_16924 = defunc_0_f_res_16906 == NAN;
            bool cond_16925 = !cond_16924;
            bool cond_t_res_16926 = defunc_0_f_res_16922 == NAN;
            bool cond_t_res_16927 = !cond_t_res_16926;
            bool x_16928 = cond_16925 && cond_t_res_16927;
            bool defunc_0_f_res_t_res_16929 = defunc_0_f_res_16906 <= defunc_0_f_res_16922;
            bool x_16930 = x_16928 && defunc_0_f_res_t_res_16929;
            float exp_res_16931 = futrts_exp32(x_16836);
            float exp_res_16932 = futrts_exp32(x_16835);
            bool cond_16933 = exp_res_16931 == NAN;
            bool cond_16934 = !cond_16933;
            bool cond_t_res_16935 = exp_res_16932 == NAN;
            bool cond_t_res_16936 = !cond_t_res_16935;
            bool x_16937 = cond_16934 && cond_t_res_16936;
            bool defunc_0_f_res_t_res_16938 = exp_res_16931 <= exp_res_16932;
            bool x_16939 = x_16937 && defunc_0_f_res_t_res_16938;
            float sqrt_res_16940 = futrts_sqrt32(x_16836);
            float sqrt_res_16941 = futrts_sqrt32(x_16835);
            bool isnan_res_16942 = futrts_isnan32(sqrt_res_16940);
            float defunc_0_f_res_16943;
            
            if (isnan_res_16942 == 1) {
                defunc_0_f_res_16943 = -INFINITY;
            } else {
                defunc_0_f_res_16943 = sqrt_res_16940;
            }
            
            bool isnan_res_16944 = futrts_isnan32(sqrt_res_16941);
            float defunc_0_f_res_16945;
            
            if (isnan_res_16944 == 1) {
                defunc_0_f_res_16945 = INFINITY;
            } else {
                defunc_0_f_res_16945 = sqrt_res_16941;
            }
            
            bool eq_x_zz_16946 = NAN == sqrt_res_16940;
            bool not_p_16947 = !isnan_res_16942;
            bool p_and_eq_x_y_16948 = eq_x_zz_16946 && not_p_16947;
            bool cond_16949 = !p_and_eq_x_y_16948;
            bool eq_x_zz_16950 = NAN == sqrt_res_16941;
            bool not_p_16951 = !isnan_res_16944;
            bool p_and_eq_x_y_16952 = eq_x_zz_16950 && not_p_16951;
            bool cond_t_res_16953 = !p_and_eq_x_y_16952;
            bool x_16954 = cond_16949 && cond_t_res_16953;
            bool defunc_0_f_res_t_res_16955 = defunc_0_f_res_16943 <= defunc_0_f_res_16945;
            bool x_16956 = x_16954 && defunc_0_f_res_t_res_16955;
            float defunc_0_f_res_16957 = 0.0F - x_16835;
            float defunc_0_f_res_16958 = 0.0F - x_16836;
            bool cond_16959 = defunc_0_f_res_16957 == NAN;
            bool cond_16960 = !cond_16959;
            bool cond_t_res_16961 = defunc_0_f_res_16958 == NAN;
            bool cond_t_res_16962 = !cond_t_res_16961;
            bool x_16963 = cond_16960 && cond_t_res_16962;
            bool defunc_0_f_res_t_res_16964 = defunc_0_f_res_16957 <= defunc_0_f_res_16958;
            bool x_16965 = x_16963 && defunc_0_f_res_t_res_16964;
            float mem_18090[(int64_t) 14];
            float mem_18091[(int64_t) 14];
            float mem_18092[(int64_t) 14];
            float mem_18093[(int64_t) 14];
            float mem_18094[(int64_t) 14];
            float mem_18095[(int64_t) 14];
            float mem_18096[(int64_t) 14];
            float mem_18097[(int64_t) 14];
            float mem_18098[(int64_t) 14];
            float mem_18099[(int64_t) 14];
            float mem_18100[(int64_t) 14];
            float mem_18101[(int64_t) 14];
            
            for (int32_t i_18002 = 0; i_18002 < 14; i_18002++) {
                int64_t i_17989 = sext_i32_i64(i_18002);
                float x_16978 = ((__global float *) mem_18029)[i_17989];
                float x_16979 = ((__global float *) mem_18031)[i_17989];
                float max_res_16980 = fmax32(x_16836, x_16979);
                float max_res_16981 = fmax32(x_16835, x_16978);
                float min_res_16982 = fmin32(x_16836, x_16979);
                float min_res_16983 = fmin32(x_16835, x_16978);
                bool cond_16984 = x_16979 <= 0.0F;
                bool cond_t_res_16985 = 0.0F <= x_16978;
                bool x_16986 = cond_16984 && cond_t_res_16985;
                float inv_res_16987;
                float inv_res_16988;
                
                if (x_16986 == 1) {
                    inv_res_16987 = INFINITY;
                    inv_res_16988 = -INFINITY;
                } else {
                    float inv_res_f_res_16989 = 1.0F / x_16978;
                    float inv_res_f_res_16990 = 1.0F / x_16979;
                    
                    inv_res_16987 = inv_res_f_res_16990;
                    inv_res_16988 = inv_res_f_res_16989;
                }
                
                float f32_min4_arg_16991 = x_16835 * inv_res_16987;
                float f32_min4_arg_16992 = x_16835 * inv_res_16988;
                float f32_min4_arg_16993 = x_16836 * inv_res_16987;
                float f32_min4_arg_16994 = x_16836 * inv_res_16988;
                float min_res_16995 = fmin32(f32_min4_arg_16991, f32_min4_arg_16992);
                float min_res_16996 = fmin32(f32_min4_arg_16993, f32_min4_arg_16994);
                float min_res_16997 = fmin32(min_res_16995, min_res_16996);
                float max_res_16998 = fmax32(f32_min4_arg_16991, f32_min4_arg_16992);
                float max_res_16999 = fmax32(f32_min4_arg_16993, f32_min4_arg_16994);
                float max_res_17000 = fmax32(max_res_16998, max_res_16999);
                bool isnan_res_17001 = futrts_isnan32(min_res_16997);
                float defunc_0_f_res_17002;
                
                if (isnan_res_17001 == 1) {
                    defunc_0_f_res_17002 = -INFINITY;
                } else {
                    defunc_0_f_res_17002 = min_res_16997;
                }
                
                bool isnan_res_17003 = futrts_isnan32(max_res_17000);
                float defunc_0_f_res_17004;
                
                if (isnan_res_17003 == 1) {
                    defunc_0_f_res_17004 = INFINITY;
                } else {
                    defunc_0_f_res_17004 = max_res_17000;
                }
                
                float f32_min4_arg_17005 = x_16835 * x_16978;
                float f32_min4_arg_17006 = x_16835 * x_16979;
                float f32_min4_arg_17007 = x_16836 * x_16978;
                float f32_min4_arg_17008 = x_16836 * x_16979;
                float min_res_17009 = fmin32(f32_min4_arg_17005, f32_min4_arg_17006);
                float min_res_17010 = fmin32(f32_min4_arg_17007, f32_min4_arg_17008);
                float min_res_17011 = fmin32(min_res_17009, min_res_17010);
                float max_res_17012 = fmax32(f32_min4_arg_17005, f32_min4_arg_17006);
                float max_res_17013 = fmax32(f32_min4_arg_17007, f32_min4_arg_17008);
                float max_res_17014 = fmax32(max_res_17012, max_res_17013);
                bool isnan_res_17015 = futrts_isnan32(min_res_17011);
                float defunc_0_f_res_17016;
                
                if (isnan_res_17015 == 1) {
                    defunc_0_f_res_17016 = -INFINITY;
                } else {
                    defunc_0_f_res_17016 = min_res_17011;
                }
                
                bool isnan_res_17017 = futrts_isnan32(max_res_17014);
                float defunc_0_f_res_17018;
                
                if (isnan_res_17017 == 1) {
                    defunc_0_f_res_17018 = INFINITY;
                } else {
                    defunc_0_f_res_17018 = max_res_17014;
                }
                
                float neg_res_17019 = 0.0F - x_16978;
                float neg_res_17020 = 0.0F - x_16979;
                float binop_p_17021 = x_16836 + neg_res_17019;
                float binop_p_17022 = x_16835 + neg_res_17020;
                bool isnan_res_17023 = futrts_isnan32(binop_p_17021);
                float defunc_0_f_res_17024;
                
                if (isnan_res_17023 == 1) {
                    defunc_0_f_res_17024 = -INFINITY;
                } else {
                    defunc_0_f_res_17024 = binop_p_17021;
                }
                
                bool isnan_res_17025 = futrts_isnan32(binop_p_17022);
                float defunc_0_f_res_17026;
                
                if (isnan_res_17025 == 1) {
                    defunc_0_f_res_17026 = INFINITY;
                } else {
                    defunc_0_f_res_17026 = binop_p_17022;
                }
                
                float binop_p_17027 = x_16836 + x_16979;
                float binop_p_17028 = x_16835 + x_16978;
                bool isnan_res_17029 = futrts_isnan32(binop_p_17027);
                float defunc_0_f_res_17030;
                
                if (isnan_res_17029 == 1) {
                    defunc_0_f_res_17030 = -INFINITY;
                } else {
                    defunc_0_f_res_17030 = binop_p_17027;
                }
                
                bool isnan_res_17031 = futrts_isnan32(binop_p_17028);
                float defunc_0_f_res_17032;
                
                if (isnan_res_17031 == 1) {
                    defunc_0_f_res_17032 = INFINITY;
                } else {
                    defunc_0_f_res_17032 = binop_p_17028;
                }
                mem_18090[i_17989] = defunc_0_f_res_17032;
                mem_18091[i_17989] = defunc_0_f_res_17030;
                mem_18092[i_17989] = defunc_0_f_res_17026;
                mem_18093[i_17989] = defunc_0_f_res_17024;
                mem_18094[i_17989] = defunc_0_f_res_17018;
                mem_18095[i_17989] = defunc_0_f_res_17016;
                mem_18096[i_17989] = defunc_0_f_res_17004;
                mem_18097[i_17989] = defunc_0_f_res_17002;
                mem_18098[i_17989] = min_res_16983;
                mem_18099[i_17989] = min_res_16982;
                mem_18100[i_17989] = max_res_16981;
                mem_18101[i_17989] = max_res_16980;
            }
            // save map-out results
            {
                for (int64_t i_18298 = 0; i_18298 < (int64_t) 14; i_18298++) {
                    float tmp_18299 = mem_18090[i_18298];
                    
                    ((__global float *) mem_18136)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18298 * (int64_t) 14] = tmp_18299;
                }
                for (int64_t i_18300 = 0; i_18300 < (int64_t) 14; i_18300++) {
                    float tmp_18301 = mem_18091[i_18300];
                    
                    ((__global float *) mem_18137)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18300 * (int64_t) 14] = tmp_18301;
                }
                for (int64_t i_18302 = 0; i_18302 < (int64_t) 14; i_18302++) {
                    float tmp_18303 = mem_18092[i_18302];
                    
                    ((__global float *) mem_18138)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18302 * (int64_t) 14] = tmp_18303;
                }
                for (int64_t i_18304 = 0; i_18304 < (int64_t) 14; i_18304++) {
                    float tmp_18305 = mem_18093[i_18304];
                    
                    ((__global float *) mem_18139)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18304 * (int64_t) 14] = tmp_18305;
                }
                for (int64_t i_18306 = 0; i_18306 < (int64_t) 14; i_18306++) {
                    float tmp_18307 = mem_18094[i_18306];
                    
                    ((__global float *) mem_18140)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18306 * (int64_t) 14] = tmp_18307;
                }
                for (int64_t i_18308 = 0; i_18308 < (int64_t) 14; i_18308++) {
                    float tmp_18309 = mem_18095[i_18308];
                    
                    ((__global float *) mem_18141)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18308 * (int64_t) 14] = tmp_18309;
                }
                for (int64_t i_18310 = 0; i_18310 < (int64_t) 14; i_18310++) {
                    float tmp_18311 = mem_18096[i_18310];
                    
                    ((__global float *) mem_18142)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18310 * (int64_t) 14] = tmp_18311;
                }
                for (int64_t i_18312 = 0; i_18312 < (int64_t) 14; i_18312++) {
                    float tmp_18313 = mem_18097[i_18312];
                    
                    ((__global float *) mem_18143)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18312 * (int64_t) 14] = tmp_18313;
                }
                for (int64_t i_18314 = 0; i_18314 < (int64_t) 14; i_18314++) {
                    float tmp_18315 = mem_18098[i_18314];
                    
                    ((__global float *) mem_18144)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18314 * (int64_t) 14] = tmp_18315;
                }
                for (int64_t i_18316 = 0; i_18316 < (int64_t) 14; i_18316++) {
                    float tmp_18317 = mem_18099[i_18316];
                    
                    ((__global float *) mem_18145)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18316 * (int64_t) 14] = tmp_18317;
                }
                for (int64_t i_18318 = 0; i_18318 < (int64_t) 14; i_18318++) {
                    float tmp_18319 = mem_18100[i_18318];
                    
                    ((__global float *) mem_18146)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18318 * (int64_t) 14] = tmp_18319;
                }
                for (int64_t i_18320 = 0; i_18320 < (int64_t) 14; i_18320++) {
                    float tmp_18321 = mem_18101[i_18320];
                    
                    ((__global float *) mem_18147)[dummy_16817 * (int64_t) 14 + gtid_16818 + i_18320 * (int64_t) 14] = tmp_18321;
                }
            }
            // load accumulator
            {
                x_16820 = x_acc_18264;
                x_16823 = x_acc_18265;
                x_16826 = x_acc_18266;
                x_16829 = x_acc_18267;
                x_16832 = x_acc_18268;
            }
            // load new values
            {
                x_16821 = x_16885;
                x_16824 = x_16930;
                x_16827 = x_16939;
                x_16830 = x_16956;
                x_16833 = x_16965;
            }
            // apply reduction operator
            {
                bool x_16822 = x_16820 && x_16821;
                bool x_16825 = x_16823 && x_16824;
                bool x_16828 = x_16826 && x_16827;
                bool x_16831 = x_16829 && x_16830;
                bool x_16834 = x_16832 && x_16833;
                
                // store in accumulator
                {
                    x_acc_18264 = x_16822;
                    x_acc_18265 = x_16825;
                    x_acc_18266 = x_16828;
                    x_acc_18267 = x_16831;
                    x_acc_18268 = x_16834;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_16820 = x_acc_18264;
        x_16823 = x_acc_18265;
        x_16826 = x_acc_18266;
        x_16829 = x_acc_18267;
        x_16832 = x_acc_18268;
        ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_16820;
        ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_16823;
        ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_16826;
        ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_16829;
        ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_16832;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_18322;
    int32_t skip_waves_18323 = 1;
    bool x_18270;
    bool x_18271;
    bool x_18272;
    bool x_18273;
    bool x_18274;
    bool x_18275;
    bool x_18276;
    bool x_18277;
    bool x_18278;
    bool x_18279;
    
    offset_18322 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_18248, sext_i64_i32(segred_group_sizze_16797))) {
            x_18270 = ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18322)];
            x_18271 = ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18322)];
            x_18272 = ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18322)];
            x_18273 = ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18322)];
            x_18274 = ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18322)];
        }
    }
    offset_18322 = 1;
    while (slt32(offset_18322, wave_sizze_18250)) {
        if (slt32(local_tid_18248 + offset_18322, sext_i64_i32(segred_group_sizze_16797)) && ((local_tid_18248 - squot32(local_tid_18248, wave_sizze_18250) * wave_sizze_18250) & (2 * offset_18322 - 1)) == 0) {
            // read array element
            {
                x_18275 = ((volatile __local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18276 = ((volatile __local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18277 = ((volatile __local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18278 = ((volatile __local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18279 = ((volatile __local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18322)];
            }
            // apply reduction operation
            {
                bool x_18280 = x_18270 && x_18275;
                bool x_18281 = x_18271 && x_18276;
                bool x_18282 = x_18272 && x_18277;
                bool x_18283 = x_18273 && x_18278;
                bool x_18284 = x_18274 && x_18279;
                
                x_18270 = x_18280;
                x_18271 = x_18281;
                x_18272 = x_18282;
                x_18273 = x_18283;
                x_18274 = x_18284;
            }
            // write result of operation
            {
                ((volatile __local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_18270;
                ((volatile __local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_18271;
                ((volatile __local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_18272;
                ((volatile __local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_18273;
                ((volatile __local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_18274;
            }
        }
        offset_18322 *= 2;
    }
    while (slt32(skip_waves_18323, squot32(sext_i64_i32(segred_group_sizze_16797) + wave_sizze_18250 - 1, wave_sizze_18250))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_18322 = skip_waves_18323 * wave_sizze_18250;
        if (slt32(local_tid_18248 + offset_18322, sext_i64_i32(segred_group_sizze_16797)) && ((local_tid_18248 - squot32(local_tid_18248, wave_sizze_18250) * wave_sizze_18250) == 0 && (squot32(local_tid_18248, wave_sizze_18250) & (2 * skip_waves_18323 - 1)) == 0)) {
            // read array element
            {
                x_18275 = ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18276 = ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18277 = ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18278 = ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18322)];
                x_18279 = ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18322)];
            }
            // apply reduction operation
            {
                bool x_18280 = x_18270 && x_18275;
                bool x_18281 = x_18271 && x_18276;
                bool x_18282 = x_18272 && x_18277;
                bool x_18283 = x_18273 && x_18278;
                bool x_18284 = x_18274 && x_18279;
                
                x_18270 = x_18280;
                x_18271 = x_18281;
                x_18272 = x_18282;
                x_18273 = x_18283;
                x_18274 = x_18284;
            }
            // write result of operation
            {
                ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_18270;
                ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_18271;
                ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_18272;
                ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_18273;
                ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_18274;
            }
        }
        skip_waves_18323 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_18248) == (int64_t) 0) {
            x_acc_18264 = x_18270;
            x_acc_18265 = x_18271;
            x_acc_18266 = x_18272;
            x_acc_18267 = x_18273;
            x_acc_18268 = x_18274;
        }
    }
    
    int32_t old_counter_18324;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_18248 == 0) {
            ((__global bool *) segred_tmp_mem_18236)[sext_i32_i64(group_tid_18249)] = x_acc_18264;
            ((__global bool *) segred_tmp_mem_18238)[sext_i32_i64(group_tid_18249)] = x_acc_18265;
            ((__global bool *) segred_tmp_mem_18240)[sext_i32_i64(group_tid_18249)] = x_acc_18266;
            ((__global bool *) segred_tmp_mem_18242)[sext_i32_i64(group_tid_18249)] = x_acc_18267;
            ((__global bool *) segred_tmp_mem_18244)[sext_i32_i64(group_tid_18249)] = x_acc_18268;
            mem_fence_global();
            old_counter_18324 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18234)[(int64_t) 0], (int) 1);
            ((__local bool *) sync_arr_mem_18252)[(int64_t) 0] = old_counter_18324 == num_groups_16798 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_18325 = ((__local bool *) sync_arr_mem_18252)[(int64_t) 0];
    
    if (is_last_group_18325) {
        if (local_tid_18248 == 0) {
            old_counter_18324 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18234)[(int64_t) 0], (int) ((int64_t) 0 - num_groups_16798));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_18326 = sdiv_up64(num_groups_16798, segred_group_sizze_16797);
            
            x_16820 = 1;
            x_16823 = 1;
            x_16826 = 1;
            x_16829 = 1;
            x_16832 = 1;
            for (int64_t i_18327 = 0; i_18327 < read_per_thread_18326; i_18327++) {
                int64_t group_res_id_18328 = sext_i32_i64(local_tid_18248) * read_per_thread_18326 + i_18327;
                int64_t index_of_group_res_18329 = group_res_id_18328;
                
                if (slt64(group_res_id_18328, num_groups_16798)) {
                    x_16821 = ((__global bool *) segred_tmp_mem_18236)[index_of_group_res_18329];
                    x_16824 = ((__global bool *) segred_tmp_mem_18238)[index_of_group_res_18329];
                    x_16827 = ((__global bool *) segred_tmp_mem_18240)[index_of_group_res_18329];
                    x_16830 = ((__global bool *) segred_tmp_mem_18242)[index_of_group_res_18329];
                    x_16833 = ((__global bool *) segred_tmp_mem_18244)[index_of_group_res_18329];
                    
                    bool x_16822 = x_16820 && x_16821;
                    bool x_16825 = x_16823 && x_16824;
                    bool x_16828 = x_16826 && x_16827;
                    bool x_16831 = x_16829 && x_16830;
                    bool x_16834 = x_16832 && x_16833;
                    
                    x_16820 = x_16822;
                    x_16823 = x_16825;
                    x_16826 = x_16828;
                    x_16829 = x_16831;
                    x_16832 = x_16834;
                }
            }
        }
        ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_16820;
        ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_16823;
        ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_16826;
        ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_16829;
        ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_16832;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_18330;
            int32_t skip_waves_18331 = 1;
            bool x_18270;
            bool x_18271;
            bool x_18272;
            bool x_18273;
            bool x_18274;
            bool x_18275;
            bool x_18276;
            bool x_18277;
            bool x_18278;
            bool x_18279;
            
            offset_18330 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_18248, sext_i64_i32(segred_group_sizze_16797))) {
                    x_18270 = ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    x_18271 = ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    x_18272 = ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    x_18273 = ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    x_18274 = ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18330)];
                }
            }
            offset_18330 = 1;
            while (slt32(offset_18330, wave_sizze_18250)) {
                if (slt32(local_tid_18248 + offset_18330, sext_i64_i32(segred_group_sizze_16797)) && ((local_tid_18248 - squot32(local_tid_18248, wave_sizze_18250) * wave_sizze_18250) & (2 * offset_18330 - 1)) == 0) {
                    // read array element
                    {
                        x_18275 = ((volatile __local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18276 = ((volatile __local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18277 = ((volatile __local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18278 = ((volatile __local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18279 = ((volatile __local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    }
                    // apply reduction operation
                    {
                        bool x_18280 = x_18270 && x_18275;
                        bool x_18281 = x_18271 && x_18276;
                        bool x_18282 = x_18272 && x_18277;
                        bool x_18283 = x_18273 && x_18278;
                        bool x_18284 = x_18274 && x_18279;
                        
                        x_18270 = x_18280;
                        x_18271 = x_18281;
                        x_18272 = x_18282;
                        x_18273 = x_18283;
                        x_18274 = x_18284;
                    }
                    // write result of operation
                    {
                        ((volatile __local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_18270;
                        ((volatile __local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_18271;
                        ((volatile __local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_18272;
                        ((volatile __local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_18273;
                        ((volatile __local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_18274;
                    }
                }
                offset_18330 *= 2;
            }
            while (slt32(skip_waves_18331, squot32(sext_i64_i32(segred_group_sizze_16797) + wave_sizze_18250 - 1, wave_sizze_18250))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_18330 = skip_waves_18331 * wave_sizze_18250;
                if (slt32(local_tid_18248 + offset_18330, sext_i64_i32(segred_group_sizze_16797)) && ((local_tid_18248 - squot32(local_tid_18248, wave_sizze_18250) * wave_sizze_18250) == 0 && (squot32(local_tid_18248, wave_sizze_18250) & (2 * skip_waves_18331 - 1)) == 0)) {
                    // read array element
                    {
                        x_18275 = ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18276 = ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18277 = ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18278 = ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248 + offset_18330)];
                        x_18279 = ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248 + offset_18330)];
                    }
                    // apply reduction operation
                    {
                        bool x_18280 = x_18270 && x_18275;
                        bool x_18281 = x_18271 && x_18276;
                        bool x_18282 = x_18272 && x_18277;
                        bool x_18283 = x_18273 && x_18278;
                        bool x_18284 = x_18274 && x_18279;
                        
                        x_18270 = x_18280;
                        x_18271 = x_18281;
                        x_18272 = x_18282;
                        x_18273 = x_18283;
                        x_18274 = x_18284;
                    }
                    // write result of operation
                    {
                        ((__local bool *) red_arr_mem_18254)[sext_i32_i64(local_tid_18248)] = x_18270;
                        ((__local bool *) red_arr_mem_18256)[sext_i32_i64(local_tid_18248)] = x_18271;
                        ((__local bool *) red_arr_mem_18258)[sext_i32_i64(local_tid_18248)] = x_18272;
                        ((__local bool *) red_arr_mem_18260)[sext_i32_i64(local_tid_18248)] = x_18273;
                        ((__local bool *) red_arr_mem_18262)[sext_i32_i64(local_tid_18248)] = x_18274;
                    }
                }
                skip_waves_18331 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_18248 == 0) {
                    ((__global bool *) mem_18127)[(int64_t) 0] = x_18270;
                    ((__global bool *) mem_18129)[(int64_t) 0] = x_18271;
                    ((__global bool *) mem_18131)[(int64_t) 0] = x_18272;
                    ((__global bool *) mem_18133)[(int64_t) 0] = x_18273;
                    ((__global bool *) mem_18135)[(int64_t) 0] = x_18274;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_16797
}
__kernel void segred_nonseg_17859(__global int *global_failure, __local volatile int64_t *red_arr_mem_18614_backing_aligned_0, __local volatile int64_t *red_arr_mem_18612_backing_aligned_1, __local volatile int64_t *red_arr_mem_18610_backing_aligned_2, __local volatile int64_t *red_arr_mem_18608_backing_aligned_3, __local volatile int64_t *red_arr_mem_18606_backing_aligned_4, __local volatile int64_t *sync_arr_mem_18604_backing_aligned_5, int64_t num_groups_17850, int64_t num_threads_18598, __global unsigned char *mem_18034, __global unsigned char *mem_18036, __global unsigned char *mem_18038, __global unsigned char *mem_18040, __global unsigned char *mem_18042, __global unsigned char *mem_18070, __global unsigned char *mem_18072, __global unsigned char *mem_18074, __global unsigned char *mem_18076, __global unsigned char *mem_18078, __global unsigned char *counter_mem_18586, __global unsigned char *segred_tmp_mem_18588, __global unsigned char *segred_tmp_mem_18590, __global unsigned char *segred_tmp_mem_18592, __global unsigned char *segred_tmp_mem_18594, __global unsigned char *segred_tmp_mem_18596)
{
    #define segred_group_sizze_17849 (segred_group_sizze_17585)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_18614_backing_5 = (__local volatile unsigned char *) red_arr_mem_18614_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_18612_backing_4 = (__local volatile unsigned char *) red_arr_mem_18612_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_18610_backing_3 = (__local volatile unsigned char *) red_arr_mem_18610_backing_aligned_2;
    __local volatile unsigned char *restrict red_arr_mem_18608_backing_2 = (__local volatile unsigned char *) red_arr_mem_18608_backing_aligned_3;
    __local volatile unsigned char *restrict red_arr_mem_18606_backing_1 = (__local volatile unsigned char *) red_arr_mem_18606_backing_aligned_4;
    __local volatile unsigned char *restrict sync_arr_mem_18604_backing_0 = (__local volatile unsigned char *) sync_arr_mem_18604_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18600;
    int64_t group_sizze_18603;
    int32_t wave_sizze_18602;
    int32_t group_tid_18601;
    
    local_tid_18600 = get_local_id(0);
    group_sizze_18603 = get_local_size(0);
    wave_sizze_18602 = LOCKSTEP_WIDTH;
    group_tid_18601 = get_group_id(0);
    
    int32_t global_tid_18599 = group_tid_18601 * group_sizze_18603 + local_tid_18600;
    int32_t phys_tid_17859 = global_tid_18599;
    __local unsigned char *sync_arr_mem_18604;
    
    sync_arr_mem_18604 = (__local unsigned char *) sync_arr_mem_18604_backing_0;
    
    __local unsigned char *red_arr_mem_18606;
    
    red_arr_mem_18606 = (__local unsigned char *) red_arr_mem_18606_backing_1;
    
    __local unsigned char *red_arr_mem_18608;
    
    red_arr_mem_18608 = (__local unsigned char *) red_arr_mem_18608_backing_2;
    
    __local unsigned char *red_arr_mem_18610;
    
    red_arr_mem_18610 = (__local unsigned char *) red_arr_mem_18610_backing_3;
    
    __local unsigned char *red_arr_mem_18612;
    
    red_arr_mem_18612 = (__local unsigned char *) red_arr_mem_18612_backing_4;
    
    __local unsigned char *red_arr_mem_18614;
    
    red_arr_mem_18614 = (__local unsigned char *) red_arr_mem_18614_backing_5;
    
    int64_t dummy_17857 = (int64_t) 0;
    int64_t gtid_17858 = (int64_t) 0;
    bool x_acc_18616;
    bool x_acc_18617;
    bool x_acc_18618;
    bool x_acc_18619;
    bool x_acc_18620;
    int64_t chunk_sizze_18621 = smin64(sdiv_up64((int64_t) 14, sext_i32_i64(sext_i64_i32(segred_group_sizze_17849 * num_groups_17850))), sdiv_up64((int64_t) 14 - phys_tid_17859, num_threads_18598));
    bool x_17860;
    bool x_17861;
    bool x_17863;
    bool x_17864;
    bool x_17866;
    bool x_17867;
    bool x_17869;
    bool x_17870;
    bool x_17872;
    bool x_17873;
    
    // neutral-initialise the accumulators
    {
        x_acc_18616 = 1;
        x_acc_18617 = 1;
        x_acc_18618 = 1;
        x_acc_18619 = 1;
        x_acc_18620 = 1;
    }
    for (int64_t i_18637 = 0; i_18637 < chunk_sizze_18621; i_18637++) {
        gtid_17858 = phys_tid_17859 + num_threads_18598 * i_18637;
        // apply map function
        {
            bool x_17875 = ((__global bool *) mem_18034)[gtid_17858];
            bool x_17876 = ((__global bool *) mem_18036)[gtid_17858];
            bool x_17877 = ((__global bool *) mem_18038)[gtid_17858];
            bool x_17878 = ((__global bool *) mem_18040)[gtid_17858];
            bool x_17879 = ((__global bool *) mem_18042)[gtid_17858];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_17860 = x_acc_18616;
                x_17863 = x_acc_18617;
                x_17866 = x_acc_18618;
                x_17869 = x_acc_18619;
                x_17872 = x_acc_18620;
            }
            // load new values
            {
                x_17861 = x_17875;
                x_17864 = x_17876;
                x_17867 = x_17877;
                x_17870 = x_17878;
                x_17873 = x_17879;
            }
            // apply reduction operator
            {
                bool x_17862 = x_17860 && x_17861;
                bool x_17865 = x_17863 && x_17864;
                bool x_17868 = x_17866 && x_17867;
                bool x_17871 = x_17869 && x_17870;
                bool x_17874 = x_17872 && x_17873;
                
                // store in accumulator
                {
                    x_acc_18616 = x_17862;
                    x_acc_18617 = x_17865;
                    x_acc_18618 = x_17868;
                    x_acc_18619 = x_17871;
                    x_acc_18620 = x_17874;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_17860 = x_acc_18616;
        x_17863 = x_acc_18617;
        x_17866 = x_acc_18618;
        x_17869 = x_acc_18619;
        x_17872 = x_acc_18620;
        ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_17860;
        ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_17863;
        ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_17866;
        ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_17869;
        ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_17872;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_18638;
    int32_t skip_waves_18639 = 1;
    bool x_18622;
    bool x_18623;
    bool x_18624;
    bool x_18625;
    bool x_18626;
    bool x_18627;
    bool x_18628;
    bool x_18629;
    bool x_18630;
    bool x_18631;
    
    offset_18638 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_18600, sext_i64_i32(segred_group_sizze_17849))) {
            x_18622 = ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18638)];
            x_18623 = ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18638)];
            x_18624 = ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18638)];
            x_18625 = ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18638)];
            x_18626 = ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18638)];
        }
    }
    offset_18638 = 1;
    while (slt32(offset_18638, wave_sizze_18602)) {
        if (slt32(local_tid_18600 + offset_18638, sext_i64_i32(segred_group_sizze_17849)) && ((local_tid_18600 - squot32(local_tid_18600, wave_sizze_18602) * wave_sizze_18602) & (2 * offset_18638 - 1)) == 0) {
            // read array element
            {
                x_18627 = ((volatile __local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18628 = ((volatile __local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18629 = ((volatile __local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18630 = ((volatile __local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18631 = ((volatile __local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18638)];
            }
            // apply reduction operation
            {
                bool x_18632 = x_18622 && x_18627;
                bool x_18633 = x_18623 && x_18628;
                bool x_18634 = x_18624 && x_18629;
                bool x_18635 = x_18625 && x_18630;
                bool x_18636 = x_18626 && x_18631;
                
                x_18622 = x_18632;
                x_18623 = x_18633;
                x_18624 = x_18634;
                x_18625 = x_18635;
                x_18626 = x_18636;
            }
            // write result of operation
            {
                ((volatile __local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_18622;
                ((volatile __local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_18623;
                ((volatile __local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_18624;
                ((volatile __local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_18625;
                ((volatile __local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_18626;
            }
        }
        offset_18638 *= 2;
    }
    while (slt32(skip_waves_18639, squot32(sext_i64_i32(segred_group_sizze_17849) + wave_sizze_18602 - 1, wave_sizze_18602))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_18638 = skip_waves_18639 * wave_sizze_18602;
        if (slt32(local_tid_18600 + offset_18638, sext_i64_i32(segred_group_sizze_17849)) && ((local_tid_18600 - squot32(local_tid_18600, wave_sizze_18602) * wave_sizze_18602) == 0 && (squot32(local_tid_18600, wave_sizze_18602) & (2 * skip_waves_18639 - 1)) == 0)) {
            // read array element
            {
                x_18627 = ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18628 = ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18629 = ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18630 = ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18638)];
                x_18631 = ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18638)];
            }
            // apply reduction operation
            {
                bool x_18632 = x_18622 && x_18627;
                bool x_18633 = x_18623 && x_18628;
                bool x_18634 = x_18624 && x_18629;
                bool x_18635 = x_18625 && x_18630;
                bool x_18636 = x_18626 && x_18631;
                
                x_18622 = x_18632;
                x_18623 = x_18633;
                x_18624 = x_18634;
                x_18625 = x_18635;
                x_18626 = x_18636;
            }
            // write result of operation
            {
                ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_18622;
                ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_18623;
                ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_18624;
                ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_18625;
                ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_18626;
            }
        }
        skip_waves_18639 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_18600) == (int64_t) 0) {
            x_acc_18616 = x_18622;
            x_acc_18617 = x_18623;
            x_acc_18618 = x_18624;
            x_acc_18619 = x_18625;
            x_acc_18620 = x_18626;
        }
    }
    
    int32_t old_counter_18640;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_18600 == 0) {
            ((__global bool *) segred_tmp_mem_18588)[sext_i32_i64(group_tid_18601)] = x_acc_18616;
            ((__global bool *) segred_tmp_mem_18590)[sext_i32_i64(group_tid_18601)] = x_acc_18617;
            ((__global bool *) segred_tmp_mem_18592)[sext_i32_i64(group_tid_18601)] = x_acc_18618;
            ((__global bool *) segred_tmp_mem_18594)[sext_i32_i64(group_tid_18601)] = x_acc_18619;
            ((__global bool *) segred_tmp_mem_18596)[sext_i32_i64(group_tid_18601)] = x_acc_18620;
            mem_fence_global();
            old_counter_18640 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18586)[(int64_t) 0], (int) 1);
            ((__local bool *) sync_arr_mem_18604)[(int64_t) 0] = old_counter_18640 == num_groups_17850 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_18641 = ((__local bool *) sync_arr_mem_18604)[(int64_t) 0];
    
    if (is_last_group_18641) {
        if (local_tid_18600 == 0) {
            old_counter_18640 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18586)[(int64_t) 0], (int) ((int64_t) 0 - num_groups_17850));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_18642 = sdiv_up64(num_groups_17850, segred_group_sizze_17849);
            
            x_17860 = 1;
            x_17863 = 1;
            x_17866 = 1;
            x_17869 = 1;
            x_17872 = 1;
            for (int64_t i_18643 = 0; i_18643 < read_per_thread_18642; i_18643++) {
                int64_t group_res_id_18644 = sext_i32_i64(local_tid_18600) * read_per_thread_18642 + i_18643;
                int64_t index_of_group_res_18645 = group_res_id_18644;
                
                if (slt64(group_res_id_18644, num_groups_17850)) {
                    x_17861 = ((__global bool *) segred_tmp_mem_18588)[index_of_group_res_18645];
                    x_17864 = ((__global bool *) segred_tmp_mem_18590)[index_of_group_res_18645];
                    x_17867 = ((__global bool *) segred_tmp_mem_18592)[index_of_group_res_18645];
                    x_17870 = ((__global bool *) segred_tmp_mem_18594)[index_of_group_res_18645];
                    x_17873 = ((__global bool *) segred_tmp_mem_18596)[index_of_group_res_18645];
                    
                    bool x_17862 = x_17860 && x_17861;
                    bool x_17865 = x_17863 && x_17864;
                    bool x_17868 = x_17866 && x_17867;
                    bool x_17871 = x_17869 && x_17870;
                    bool x_17874 = x_17872 && x_17873;
                    
                    x_17860 = x_17862;
                    x_17863 = x_17865;
                    x_17866 = x_17868;
                    x_17869 = x_17871;
                    x_17872 = x_17874;
                }
            }
        }
        ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_17860;
        ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_17863;
        ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_17866;
        ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_17869;
        ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_17872;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_18646;
            int32_t skip_waves_18647 = 1;
            bool x_18622;
            bool x_18623;
            bool x_18624;
            bool x_18625;
            bool x_18626;
            bool x_18627;
            bool x_18628;
            bool x_18629;
            bool x_18630;
            bool x_18631;
            
            offset_18646 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_18600, sext_i64_i32(segred_group_sizze_17849))) {
                    x_18622 = ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    x_18623 = ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    x_18624 = ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    x_18625 = ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    x_18626 = ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18646)];
                }
            }
            offset_18646 = 1;
            while (slt32(offset_18646, wave_sizze_18602)) {
                if (slt32(local_tid_18600 + offset_18646, sext_i64_i32(segred_group_sizze_17849)) && ((local_tid_18600 - squot32(local_tid_18600, wave_sizze_18602) * wave_sizze_18602) & (2 * offset_18646 - 1)) == 0) {
                    // read array element
                    {
                        x_18627 = ((volatile __local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18628 = ((volatile __local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18629 = ((volatile __local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18630 = ((volatile __local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18631 = ((volatile __local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    }
                    // apply reduction operation
                    {
                        bool x_18632 = x_18622 && x_18627;
                        bool x_18633 = x_18623 && x_18628;
                        bool x_18634 = x_18624 && x_18629;
                        bool x_18635 = x_18625 && x_18630;
                        bool x_18636 = x_18626 && x_18631;
                        
                        x_18622 = x_18632;
                        x_18623 = x_18633;
                        x_18624 = x_18634;
                        x_18625 = x_18635;
                        x_18626 = x_18636;
                    }
                    // write result of operation
                    {
                        ((volatile __local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_18622;
                        ((volatile __local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_18623;
                        ((volatile __local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_18624;
                        ((volatile __local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_18625;
                        ((volatile __local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_18626;
                    }
                }
                offset_18646 *= 2;
            }
            while (slt32(skip_waves_18647, squot32(sext_i64_i32(segred_group_sizze_17849) + wave_sizze_18602 - 1, wave_sizze_18602))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_18646 = skip_waves_18647 * wave_sizze_18602;
                if (slt32(local_tid_18600 + offset_18646, sext_i64_i32(segred_group_sizze_17849)) && ((local_tid_18600 - squot32(local_tid_18600, wave_sizze_18602) * wave_sizze_18602) == 0 && (squot32(local_tid_18600, wave_sizze_18602) & (2 * skip_waves_18647 - 1)) == 0)) {
                    // read array element
                    {
                        x_18627 = ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18628 = ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18629 = ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18630 = ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600 + offset_18646)];
                        x_18631 = ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600 + offset_18646)];
                    }
                    // apply reduction operation
                    {
                        bool x_18632 = x_18622 && x_18627;
                        bool x_18633 = x_18623 && x_18628;
                        bool x_18634 = x_18624 && x_18629;
                        bool x_18635 = x_18625 && x_18630;
                        bool x_18636 = x_18626 && x_18631;
                        
                        x_18622 = x_18632;
                        x_18623 = x_18633;
                        x_18624 = x_18634;
                        x_18625 = x_18635;
                        x_18626 = x_18636;
                    }
                    // write result of operation
                    {
                        ((__local bool *) red_arr_mem_18606)[sext_i32_i64(local_tid_18600)] = x_18622;
                        ((__local bool *) red_arr_mem_18608)[sext_i32_i64(local_tid_18600)] = x_18623;
                        ((__local bool *) red_arr_mem_18610)[sext_i32_i64(local_tid_18600)] = x_18624;
                        ((__local bool *) red_arr_mem_18612)[sext_i32_i64(local_tid_18600)] = x_18625;
                        ((__local bool *) red_arr_mem_18614)[sext_i32_i64(local_tid_18600)] = x_18626;
                    }
                }
                skip_waves_18647 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_18600 == 0) {
                    ((__global bool *) mem_18070)[(int64_t) 0] = x_18622;
                    ((__global bool *) mem_18072)[(int64_t) 0] = x_18623;
                    ((__global bool *) mem_18074)[(int64_t) 0] = x_18624;
                    ((__global bool *) mem_18076)[(int64_t) 0] = x_18625;
                    ((__global bool *) mem_18078)[(int64_t) 0] = x_18626;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_17849
}
__kernel void segred_nonseg_17916(__global int *global_failure, __local volatile int64_t *red_arr_mem_18688_backing_aligned_0, __local volatile int64_t *red_arr_mem_18686_backing_aligned_1, __local volatile int64_t *red_arr_mem_18684_backing_aligned_2, __local volatile int64_t *red_arr_mem_18682_backing_aligned_3, __local volatile int64_t *red_arr_mem_18680_backing_aligned_4, __local volatile int64_t *red_arr_mem_18678_backing_aligned_5, __local volatile int64_t *sync_arr_mem_18676_backing_aligned_6, int64_t num_groups_17906, int64_t num_threads_18670, __global unsigned char *ext_mem_18194, __global unsigned char *ext_mem_18195, __global unsigned char *ext_mem_18196, __global unsigned char *ext_mem_18197, __global unsigned char *ext_mem_18198, __global unsigned char *ext_mem_18199, __global unsigned char *ext_mem_18200, __global unsigned char *ext_mem_18201, __global unsigned char *ext_mem_18202, __global unsigned char *ext_mem_18203, __global unsigned char *ext_mem_18204, __global unsigned char *ext_mem_18205, __global unsigned char *mem_18213, __global unsigned char *mem_18215, __global unsigned char *mem_18217, __global unsigned char *mem_18219, __global unsigned char *mem_18221, __global unsigned char *mem_18223, __global unsigned char *counter_mem_18656, __global unsigned char *segred_tmp_mem_18658, __global unsigned char *segred_tmp_mem_18660, __global unsigned char *segred_tmp_mem_18662, __global unsigned char *segred_tmp_mem_18664, __global unsigned char *segred_tmp_mem_18666, __global unsigned char *segred_tmp_mem_18668)
{
    #define segred_group_sizze_17904 (segred_group_sizze_17903)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_18688_backing_6 = (__local volatile unsigned char *) red_arr_mem_18688_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_18686_backing_5 = (__local volatile unsigned char *) red_arr_mem_18686_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_18684_backing_4 = (__local volatile unsigned char *) red_arr_mem_18684_backing_aligned_2;
    __local volatile unsigned char *restrict red_arr_mem_18682_backing_3 = (__local volatile unsigned char *) red_arr_mem_18682_backing_aligned_3;
    __local volatile unsigned char *restrict red_arr_mem_18680_backing_2 = (__local volatile unsigned char *) red_arr_mem_18680_backing_aligned_4;
    __local volatile unsigned char *restrict red_arr_mem_18678_backing_1 = (__local volatile unsigned char *) red_arr_mem_18678_backing_aligned_5;
    __local volatile unsigned char *restrict sync_arr_mem_18676_backing_0 = (__local volatile unsigned char *) sync_arr_mem_18676_backing_aligned_6;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18672;
    int64_t group_sizze_18675;
    int32_t wave_sizze_18674;
    int32_t group_tid_18673;
    
    local_tid_18672 = get_local_id(0);
    group_sizze_18675 = get_local_size(0);
    wave_sizze_18674 = LOCKSTEP_WIDTH;
    group_tid_18673 = get_group_id(0);
    
    int32_t global_tid_18671 = group_tid_18673 * group_sizze_18675 + local_tid_18672;
    int32_t phys_tid_17916 = global_tid_18671;
    __local unsigned char *sync_arr_mem_18676;
    
    sync_arr_mem_18676 = (__local unsigned char *) sync_arr_mem_18676_backing_0;
    
    __local unsigned char *red_arr_mem_18678;
    
    red_arr_mem_18678 = (__local unsigned char *) red_arr_mem_18678_backing_1;
    
    __local unsigned char *red_arr_mem_18680;
    
    red_arr_mem_18680 = (__local unsigned char *) red_arr_mem_18680_backing_2;
    
    __local unsigned char *red_arr_mem_18682;
    
    red_arr_mem_18682 = (__local unsigned char *) red_arr_mem_18682_backing_3;
    
    __local unsigned char *red_arr_mem_18684;
    
    red_arr_mem_18684 = (__local unsigned char *) red_arr_mem_18684_backing_4;
    
    __local unsigned char *red_arr_mem_18686;
    
    red_arr_mem_18686 = (__local unsigned char *) red_arr_mem_18686_backing_5;
    
    __local unsigned char *red_arr_mem_18688;
    
    red_arr_mem_18688 = (__local unsigned char *) red_arr_mem_18688_backing_6;
    
    int64_t dummy_17914 = (int64_t) 0;
    int64_t gtid_17915 = (int64_t) 0;
    bool x_acc_18690;
    bool x_acc_18691;
    bool x_acc_18692;
    bool x_acc_18693;
    bool x_acc_18694;
    bool x_acc_18695;
    int64_t chunk_sizze_18696 = smin64(sdiv_up64((int64_t) 196, sext_i32_i64(sext_i64_i32(segred_group_sizze_17904 * num_groups_17906))), sdiv_up64((int64_t) 196 - phys_tid_17916, num_threads_18670));
    bool x_13681;
    bool x_13682;
    bool x_13700;
    bool x_13701;
    bool x_13739;
    bool x_13740;
    bool x_13758;
    bool x_13759;
    bool x_13777;
    bool x_13778;
    bool x_13796;
    bool x_13797;
    
    // neutral-initialise the accumulators
    {
        x_acc_18690 = 1;
        x_acc_18691 = 1;
        x_acc_18692 = 1;
        x_acc_18693 = 1;
        x_acc_18694 = 1;
        x_acc_18695 = 1;
    }
    for (int64_t i_18715 = 0; i_18715 < chunk_sizze_18696; i_18715++) {
        gtid_17915 = phys_tid_17916 + num_threads_18670 * i_18715;
        // apply map function
        {
            int64_t new_index_17917 = squot64(gtid_17915, (int64_t) 14);
            int64_t binop_y_17919 = (int64_t) 14 * new_index_17917;
            int64_t new_index_17920 = gtid_17915 - binop_y_17919;
            float x_16364 = ((__global float *) ext_mem_18195)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16365 = ((__global float *) ext_mem_18194)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16366 = ((__global float *) ext_mem_18197)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16367 = ((__global float *) ext_mem_18196)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16368 = ((__global float *) ext_mem_18199)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16369 = ((__global float *) ext_mem_18198)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16370 = ((__global float *) ext_mem_18203)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16371 = ((__global float *) ext_mem_18202)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16372 = ((__global float *) ext_mem_18201)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16373 = ((__global float *) ext_mem_18200)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16374 = ((__global float *) ext_mem_18205)[new_index_17917 * (int64_t) 14 + new_index_17920];
            float x_16375 = ((__global float *) ext_mem_18204)[new_index_17917 * (int64_t) 14 + new_index_17920];
            bool cond_16376 = x_16375 == NAN;
            bool cond_16377 = !cond_16376;
            bool cond_t_res_16378 = x_16374 == NAN;
            bool cond_t_res_16379 = !cond_t_res_16378;
            bool x_16380 = cond_16377 && cond_t_res_16379;
            bool defunc_0_f_res_t_res_16381 = x_16375 <= x_16374;
            bool x_16382 = x_16380 && defunc_0_f_res_t_res_16381;
            bool cond_16384 = x_16373 == NAN;
            bool cond_16385 = !cond_16384;
            bool cond_t_res_16386 = x_16372 == NAN;
            bool cond_t_res_16387 = !cond_t_res_16386;
            bool x_16388 = cond_16385 && cond_t_res_16387;
            bool defunc_0_f_res_t_res_16389 = x_16373 <= x_16372;
            bool x_16390 = x_16388 && defunc_0_f_res_t_res_16389;
            bool cond_16392 = x_16371 == NAN;
            bool cond_16393 = !cond_16392;
            bool cond_t_res_16394 = x_16370 == NAN;
            bool cond_t_res_16395 = !cond_t_res_16394;
            bool x_16396 = cond_16393 && cond_t_res_16395;
            bool defunc_0_f_res_t_res_16397 = x_16371 <= x_16370;
            bool x_16398 = x_16396 && defunc_0_f_res_t_res_16397;
            bool cond_16400 = x_16369 == NAN;
            bool cond_16401 = !cond_16400;
            bool cond_t_res_16402 = x_16368 == NAN;
            bool cond_t_res_16403 = !cond_t_res_16402;
            bool x_16404 = cond_16401 && cond_t_res_16403;
            bool defunc_0_f_res_t_res_16405 = x_16369 <= x_16368;
            bool x_16406 = x_16404 && defunc_0_f_res_t_res_16405;
            bool cond_16408 = x_16367 == NAN;
            bool cond_16409 = !cond_16408;
            bool cond_t_res_16410 = x_16366 == NAN;
            bool cond_t_res_16411 = !cond_t_res_16410;
            bool x_16412 = cond_16409 && cond_t_res_16411;
            bool defunc_0_f_res_t_res_16413 = x_16367 <= x_16366;
            bool x_16414 = x_16412 && defunc_0_f_res_t_res_16413;
            bool cond_16416 = x_16365 == NAN;
            bool cond_16417 = !cond_16416;
            bool cond_t_res_16418 = x_16364 == NAN;
            bool cond_t_res_16419 = !cond_t_res_16418;
            bool x_16420 = cond_16417 && cond_t_res_16419;
            bool defunc_0_f_res_t_res_16421 = x_16365 <= x_16364;
            bool x_16422 = x_16420 && defunc_0_f_res_t_res_16421;
            
            // save map-out results
            { }
            // load accumulator
            {
                x_13681 = x_acc_18690;
                x_13739 = x_acc_18691;
                x_13700 = x_acc_18692;
                x_13758 = x_acc_18693;
                x_13777 = x_acc_18694;
                x_13796 = x_acc_18695;
            }
            // load new values
            {
                x_13682 = x_16382;
                x_13740 = x_16390;
                x_13701 = x_16398;
                x_13759 = x_16406;
                x_13778 = x_16414;
                x_13797 = x_16422;
            }
            // apply reduction operator
            {
                bool x_13683 = x_13681 && x_13682;
                bool x_13741 = x_13739 && x_13740;
                bool x_13702 = x_13700 && x_13701;
                bool x_13760 = x_13758 && x_13759;
                bool x_13779 = x_13777 && x_13778;
                bool x_13798 = x_13796 && x_13797;
                
                // store in accumulator
                {
                    x_acc_18690 = x_13683;
                    x_acc_18691 = x_13741;
                    x_acc_18692 = x_13702;
                    x_acc_18693 = x_13760;
                    x_acc_18694 = x_13779;
                    x_acc_18695 = x_13798;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_13681 = x_acc_18690;
        x_13739 = x_acc_18691;
        x_13700 = x_acc_18692;
        x_13758 = x_acc_18693;
        x_13777 = x_acc_18694;
        x_13796 = x_acc_18695;
        ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_13681;
        ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_13739;
        ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_13700;
        ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_13758;
        ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_13777;
        ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_13796;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_18716;
    int32_t skip_waves_18717 = 1;
    bool x_18697;
    bool x_18698;
    bool x_18699;
    bool x_18700;
    bool x_18701;
    bool x_18702;
    bool x_18703;
    bool x_18704;
    bool x_18705;
    bool x_18706;
    bool x_18707;
    bool x_18708;
    
    offset_18716 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_18672, sext_i64_i32(segred_group_sizze_17904))) {
            x_18697 = ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18716)];
            x_18698 = ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18716)];
            x_18699 = ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18716)];
            x_18700 = ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18716)];
            x_18701 = ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18716)];
            x_18702 = ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18716)];
        }
    }
    offset_18716 = 1;
    while (slt32(offset_18716, wave_sizze_18674)) {
        if (slt32(local_tid_18672 + offset_18716, sext_i64_i32(segred_group_sizze_17904)) && ((local_tid_18672 - squot32(local_tid_18672, wave_sizze_18674) * wave_sizze_18674) & (2 * offset_18716 - 1)) == 0) {
            // read array element
            {
                x_18703 = ((volatile __local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18704 = ((volatile __local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18705 = ((volatile __local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18706 = ((volatile __local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18707 = ((volatile __local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18708 = ((volatile __local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18716)];
            }
            // apply reduction operation
            {
                bool x_18709 = x_18697 && x_18703;
                bool x_18710 = x_18698 && x_18704;
                bool x_18711 = x_18699 && x_18705;
                bool x_18712 = x_18700 && x_18706;
                bool x_18713 = x_18701 && x_18707;
                bool x_18714 = x_18702 && x_18708;
                
                x_18697 = x_18709;
                x_18698 = x_18710;
                x_18699 = x_18711;
                x_18700 = x_18712;
                x_18701 = x_18713;
                x_18702 = x_18714;
            }
            // write result of operation
            {
                ((volatile __local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_18697;
                ((volatile __local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_18698;
                ((volatile __local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_18699;
                ((volatile __local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_18700;
                ((volatile __local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_18701;
                ((volatile __local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_18702;
            }
        }
        offset_18716 *= 2;
    }
    while (slt32(skip_waves_18717, squot32(sext_i64_i32(segred_group_sizze_17904) + wave_sizze_18674 - 1, wave_sizze_18674))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_18716 = skip_waves_18717 * wave_sizze_18674;
        if (slt32(local_tid_18672 + offset_18716, sext_i64_i32(segred_group_sizze_17904)) && ((local_tid_18672 - squot32(local_tid_18672, wave_sizze_18674) * wave_sizze_18674) == 0 && (squot32(local_tid_18672, wave_sizze_18674) & (2 * skip_waves_18717 - 1)) == 0)) {
            // read array element
            {
                x_18703 = ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18704 = ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18705 = ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18706 = ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18707 = ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18716)];
                x_18708 = ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18716)];
            }
            // apply reduction operation
            {
                bool x_18709 = x_18697 && x_18703;
                bool x_18710 = x_18698 && x_18704;
                bool x_18711 = x_18699 && x_18705;
                bool x_18712 = x_18700 && x_18706;
                bool x_18713 = x_18701 && x_18707;
                bool x_18714 = x_18702 && x_18708;
                
                x_18697 = x_18709;
                x_18698 = x_18710;
                x_18699 = x_18711;
                x_18700 = x_18712;
                x_18701 = x_18713;
                x_18702 = x_18714;
            }
            // write result of operation
            {
                ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_18697;
                ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_18698;
                ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_18699;
                ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_18700;
                ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_18701;
                ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_18702;
            }
        }
        skip_waves_18717 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_18672) == (int64_t) 0) {
            x_acc_18690 = x_18697;
            x_acc_18691 = x_18698;
            x_acc_18692 = x_18699;
            x_acc_18693 = x_18700;
            x_acc_18694 = x_18701;
            x_acc_18695 = x_18702;
        }
    }
    
    int32_t old_counter_18718;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_18672 == 0) {
            ((__global bool *) segred_tmp_mem_18658)[sext_i32_i64(group_tid_18673)] = x_acc_18690;
            ((__global bool *) segred_tmp_mem_18660)[sext_i32_i64(group_tid_18673)] = x_acc_18691;
            ((__global bool *) segred_tmp_mem_18662)[sext_i32_i64(group_tid_18673)] = x_acc_18692;
            ((__global bool *) segred_tmp_mem_18664)[sext_i32_i64(group_tid_18673)] = x_acc_18693;
            ((__global bool *) segred_tmp_mem_18666)[sext_i32_i64(group_tid_18673)] = x_acc_18694;
            ((__global bool *) segred_tmp_mem_18668)[sext_i32_i64(group_tid_18673)] = x_acc_18695;
            mem_fence_global();
            old_counter_18718 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18656)[(int64_t) 0], (int) 1);
            ((__local bool *) sync_arr_mem_18676)[(int64_t) 0] = old_counter_18718 == num_groups_17906 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_18719 = ((__local bool *) sync_arr_mem_18676)[(int64_t) 0];
    
    if (is_last_group_18719) {
        if (local_tid_18672 == 0) {
            old_counter_18718 = atomic_add_i32_global(&((volatile __global int *) counter_mem_18656)[(int64_t) 0], (int) ((int64_t) 0 - num_groups_17906));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_18720 = sdiv_up64(num_groups_17906, segred_group_sizze_17904);
            
            x_13681 = 1;
            x_13739 = 1;
            x_13700 = 1;
            x_13758 = 1;
            x_13777 = 1;
            x_13796 = 1;
            for (int64_t i_18721 = 0; i_18721 < read_per_thread_18720; i_18721++) {
                int64_t group_res_id_18722 = sext_i32_i64(local_tid_18672) * read_per_thread_18720 + i_18721;
                int64_t index_of_group_res_18723 = group_res_id_18722;
                
                if (slt64(group_res_id_18722, num_groups_17906)) {
                    x_13682 = ((__global bool *) segred_tmp_mem_18658)[index_of_group_res_18723];
                    x_13740 = ((__global bool *) segred_tmp_mem_18660)[index_of_group_res_18723];
                    x_13701 = ((__global bool *) segred_tmp_mem_18662)[index_of_group_res_18723];
                    x_13759 = ((__global bool *) segred_tmp_mem_18664)[index_of_group_res_18723];
                    x_13778 = ((__global bool *) segred_tmp_mem_18666)[index_of_group_res_18723];
                    x_13797 = ((__global bool *) segred_tmp_mem_18668)[index_of_group_res_18723];
                    
                    bool x_13683 = x_13681 && x_13682;
                    bool x_13741 = x_13739 && x_13740;
                    bool x_13702 = x_13700 && x_13701;
                    bool x_13760 = x_13758 && x_13759;
                    bool x_13779 = x_13777 && x_13778;
                    bool x_13798 = x_13796 && x_13797;
                    
                    x_13681 = x_13683;
                    x_13739 = x_13741;
                    x_13700 = x_13702;
                    x_13758 = x_13760;
                    x_13777 = x_13779;
                    x_13796 = x_13798;
                }
            }
        }
        ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_13681;
        ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_13739;
        ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_13700;
        ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_13758;
        ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_13777;
        ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_13796;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_18724;
            int32_t skip_waves_18725 = 1;
            bool x_18697;
            bool x_18698;
            bool x_18699;
            bool x_18700;
            bool x_18701;
            bool x_18702;
            bool x_18703;
            bool x_18704;
            bool x_18705;
            bool x_18706;
            bool x_18707;
            bool x_18708;
            
            offset_18724 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_18672, sext_i64_i32(segred_group_sizze_17904))) {
                    x_18697 = ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    x_18698 = ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    x_18699 = ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    x_18700 = ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    x_18701 = ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    x_18702 = ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18724)];
                }
            }
            offset_18724 = 1;
            while (slt32(offset_18724, wave_sizze_18674)) {
                if (slt32(local_tid_18672 + offset_18724, sext_i64_i32(segred_group_sizze_17904)) && ((local_tid_18672 - squot32(local_tid_18672, wave_sizze_18674) * wave_sizze_18674) & (2 * offset_18724 - 1)) == 0) {
                    // read array element
                    {
                        x_18703 = ((volatile __local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18704 = ((volatile __local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18705 = ((volatile __local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18706 = ((volatile __local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18707 = ((volatile __local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18708 = ((volatile __local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    }
                    // apply reduction operation
                    {
                        bool x_18709 = x_18697 && x_18703;
                        bool x_18710 = x_18698 && x_18704;
                        bool x_18711 = x_18699 && x_18705;
                        bool x_18712 = x_18700 && x_18706;
                        bool x_18713 = x_18701 && x_18707;
                        bool x_18714 = x_18702 && x_18708;
                        
                        x_18697 = x_18709;
                        x_18698 = x_18710;
                        x_18699 = x_18711;
                        x_18700 = x_18712;
                        x_18701 = x_18713;
                        x_18702 = x_18714;
                    }
                    // write result of operation
                    {
                        ((volatile __local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_18697;
                        ((volatile __local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_18698;
                        ((volatile __local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_18699;
                        ((volatile __local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_18700;
                        ((volatile __local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_18701;
                        ((volatile __local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_18702;
                    }
                }
                offset_18724 *= 2;
            }
            while (slt32(skip_waves_18725, squot32(sext_i64_i32(segred_group_sizze_17904) + wave_sizze_18674 - 1, wave_sizze_18674))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_18724 = skip_waves_18725 * wave_sizze_18674;
                if (slt32(local_tid_18672 + offset_18724, sext_i64_i32(segred_group_sizze_17904)) && ((local_tid_18672 - squot32(local_tid_18672, wave_sizze_18674) * wave_sizze_18674) == 0 && (squot32(local_tid_18672, wave_sizze_18674) & (2 * skip_waves_18725 - 1)) == 0)) {
                    // read array element
                    {
                        x_18703 = ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18704 = ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18705 = ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18706 = ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18707 = ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672 + offset_18724)];
                        x_18708 = ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672 + offset_18724)];
                    }
                    // apply reduction operation
                    {
                        bool x_18709 = x_18697 && x_18703;
                        bool x_18710 = x_18698 && x_18704;
                        bool x_18711 = x_18699 && x_18705;
                        bool x_18712 = x_18700 && x_18706;
                        bool x_18713 = x_18701 && x_18707;
                        bool x_18714 = x_18702 && x_18708;
                        
                        x_18697 = x_18709;
                        x_18698 = x_18710;
                        x_18699 = x_18711;
                        x_18700 = x_18712;
                        x_18701 = x_18713;
                        x_18702 = x_18714;
                    }
                    // write result of operation
                    {
                        ((__local bool *) red_arr_mem_18678)[sext_i32_i64(local_tid_18672)] = x_18697;
                        ((__local bool *) red_arr_mem_18680)[sext_i32_i64(local_tid_18672)] = x_18698;
                        ((__local bool *) red_arr_mem_18682)[sext_i32_i64(local_tid_18672)] = x_18699;
                        ((__local bool *) red_arr_mem_18684)[sext_i32_i64(local_tid_18672)] = x_18700;
                        ((__local bool *) red_arr_mem_18686)[sext_i32_i64(local_tid_18672)] = x_18701;
                        ((__local bool *) red_arr_mem_18688)[sext_i32_i64(local_tid_18672)] = x_18702;
                    }
                }
                skip_waves_18725 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_18672 == 0) {
                    ((__global bool *) mem_18213)[(int64_t) 0] = x_18697;
                    ((__global bool *) mem_18215)[(int64_t) 0] = x_18698;
                    ((__global bool *) mem_18217)[(int64_t) 0] = x_18699;
                    ((__global bool *) mem_18219)[(int64_t) 0] = x_18700;
                    ((__global bool *) mem_18221)[(int64_t) 0] = x_18701;
                    ((__global bool *) mem_18223)[(int64_t) 0] = x_18702;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_17904
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f16(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f16.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f16.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f16.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f16')
               return x

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        tf = FUTHARK_PRIMTYPES[t]['numpy_type']
        return tf(struct.unpack('<' + fmt, f.get_chars(size))[0])
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f16 = mk_bin_scalar_reader('f16')
read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f16': {'binname' : b" f16",
            'size' : 2,
            'bin_reader': read_bin_f16,
            'str_reader': read_str_f16,
            'bin_format': 'e',
            'numpy_type': np.float16 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_i64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.frombuffer.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.frombuffer(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
    assert m and basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
    if dims > 0:
        return read_array(reader, basetype, dims)
    else:
        return read_scalar(reader, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float16:
        if np.isnan(v):
            out.write('f16.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f16.inf')
            else:
                out.write('-f16.inf')
        else:
            out.write("%.6ff16" % v)
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float16'): b' f16',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tobytes()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tobytes()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape, t):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=t)
  else:
      return np.ctypeslib.as_array(x, shape=shape).view(t)

def indexArray(x, offset, bt):
  return addressOffset(x, offset*ct.sizeof(bt), bt)[0]

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return np.fmin(x,y)

def fmaxN(x,y):
  return np.fmax(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int16(x)

def btoi_bool_i32(x):
  return np.int32(x)

def btoi_bool_i64(x):
  return np.int64(x)

def ftob_T_bool(x):
  return bool(x)

def btof_bool_f16(x):
  return np.float16(x)

def btof_bool_f32(x):
  return np.float32(x)

def btof_bool_f64(x):
  return np.float64(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow16 = fpow32 = fpow64 = fpowN
fmax16 = fmax32 = fmax64 = fmaxN
fmin16 = fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool
ftob_f16_bool = ftob_f32_bool = ftob_f64_bool = ftob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptosi_f16_i8 = fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptosi_f16_i16 = fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptosi_f16_i32 = fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptosi_f16_i64 = fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptoui_f16_i8 = fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptoui_f16_i16 = fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptoui_f16_i32 = fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptoui_f16_i64 = fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f16_f32(x):
  return np.float32(x)

def fpconv_f16_f64(x):
  return np.float64(x)

def fpconv_f32_f16(x):
  return np.float16(x)

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f16(x):
  return np.float16(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_cbrt64(x):
  return np.cbrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_hypot64(x, y):
  return np.hypot(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_erf64(x):
  return np.float64(math.erf(x))

def futhark_erfc64(x):
  return np.float64(math.erfc(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_nextafter64(x, y):
  return np.nextafter(x, y)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_cbrt32(x):
  return np.float32(np.cbrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_hypot32(x, y):
  return np.hypot(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_erf32(x):
  return np.float32(math.erf(x))

def futhark_erfc32(x):
  return np.float32(math.erfc(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_nextafter32(x, y):
  return np.nextafter(x, y)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_log16(x):
  return np.float16(np.log(x))

def futhark_log2_16(x):
  return np.float16(np.log2(x))

def futhark_log10_16(x):
  return np.float16(np.log10(x))

def futhark_sqrt16(x):
  return np.float16(np.sqrt(x))

def futhark_cbrt16(x):
  return np.float16(np.cbrt(x))

def futhark_exp16(x):
  return np.exp(x)

def futhark_cos16(x):
  return np.cos(x)

def futhark_sin16(x):
  return np.sin(x)

def futhark_tan16(x):
  return np.tan(x)

def futhark_acos16(x):
  return np.arccos(x)

def futhark_asin16(x):
  return np.arcsin(x)

def futhark_atan16(x):
  return np.arctan(x)

def futhark_cosh16(x):
  return np.cosh(x)

def futhark_sinh16(x):
  return np.sinh(x)

def futhark_tanh16(x):
  return np.tanh(x)

def futhark_acosh16(x):
  return np.arccosh(x)

def futhark_asinh16(x):
  return np.arcsinh(x)

def futhark_atanh16(x):
  return np.arctanh(x)

def futhark_atan2_16(x, y):
  return np.arctan2(x, y)

def futhark_hypot16(x, y):
  return np.hypot(x, y)

def futhark_gamma16(x):
  return np.float16(math.gamma(x))

def futhark_lgamma16(x):
  return np.float16(math.lgamma(x))

def futhark_erf16(x):
  return np.float16(math.erf(x))

def futhark_erfc16(x):
  return np.float16(math.erfc(x))

def futhark_round16(x):
  return np.round(x)

def futhark_ceil16(x):
  return np.ceil(x)

def futhark_floor16(x):
  return np.floor(x)

def futhark_nextafter16(x, y):
  return np.nextafter(x, y)

def futhark_isnan16(x):
  return np.isnan(x)

def futhark_isinf16(x):
  return np.isinf(x)

def futhark_to_bits16(x):
  s = struct.pack('>e', x)
  return np.int16(struct.unpack('>H', s)[0])

def futhark_from_bits16(x):
  s = struct.pack('>H', np.uint16(x))
  return np.float16(struct.unpack('>e', s)[0])

def futhark_lerp16(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad16(a, b, c):
  return a * b + c

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma16(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
# Start of server.py

import sys
import time
import shlex # For string splitting

class Server:
    def __init__(self, ctx):
        self._ctx = ctx
        self._vars = {}

    class Failure(BaseException):
        def __init__(self, msg):
            self.msg = msg

    def _get_arg(self, args, i):
        if i < len(args):
            return args[i]
        else:
            raise self.Failure('Insufficient command args')

    def _get_entry_point(self, entry):
        if entry in self._ctx.entry_points:
            return self._ctx.entry_points[entry]
        else:
            raise self.Failure('Unknown entry point: %s' % entry)

    def _check_var(self, vname):
        if not vname in self._vars:
            raise self.Failure('Unknown variable: %s' % vname)

    def _check_new_var(self, vname):
        if vname in self._vars:
            raise self.Failure('Variable already exists: %s' % vname)

    def _get_var(self, vname):
        self._check_var(vname)
        return self._vars[vname]

    def _cmd_inputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[0]:
            print(t)

    def _cmd_outputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[1]:
            print(t)

    def _cmd_dummy(self, args):
        pass

    def _cmd_free(self, args):
        for vname in args:
            self._check_var(vname)
            del self._vars[vname]

    def _cmd_rename(self, args):
        oldname = self._get_arg(args, 0)
        newname = self._get_arg(args, 1)
        self._check_var(oldname)
        self._check_new_var(newname)
        self._vars[newname] = self._vars[oldname]
        del self._vars[oldname]

    def _cmd_call(self, args):
        entry = self._get_entry_point(self._get_arg(args, 0))
        num_ins = len(entry[0])
        num_outs = len(entry[1])
        exp_len = 1 + num_outs + num_ins

        if len(args) != exp_len:
            raise self.Failure('Invalid argument count, expected %d' % exp_len)

        out_vnames = args[1:num_outs+1]

        for out_vname in out_vnames:
            self._check_new_var(out_vname)

        in_vnames = args[1+num_outs:]
        ins = [ self._get_var(in_vname) for in_vname in in_vnames ]

        try:
            (runtime, vals) = getattr(self._ctx, args[0])(*ins)
        except Exception as e:
            raise self.Failure(str(e))

        print('runtime: %d' % runtime)

        if num_outs == 1:
            self._vars[out_vnames[0]] = vals
        else:
            for (out_vname, val) in zip(out_vnames, vals):
                self._vars[out_vname] = val

    def _store_val(self, f, value):
        # In case we are using the PyOpenCL backend, we first
        # need to convert OpenCL arrays to ordinary NumPy
        # arrays.  We do this in a nasty way.
        if isinstance(value, opaque):
            for component in value.data:
                self._store_val(f, component)
        elif isinstance(value, np.number) or isinstance(value, bool) or isinstance(value, np.bool_) or isinstance(value, np.ndarray):
            # Ordinary NumPy value.
            f.write(construct_binary_value(value))
        else:
            # Assuming PyOpenCL array.
            f.write(construct_binary_value(value.get()))

    def _cmd_store(self, args):
        fname = self._get_arg(args, 0)

        with open(fname, 'wb') as f:
            for i in range(1, len(args)):
                self._store_val(f, self._get_var(args[i]))

    def _restore_val(self, reader, typename):
        if typename in self._ctx.opaques:
            vs = []
            for t in self._ctx.opaques[typename]:
                vs += [read_value(t, reader)]
            return opaque(typename, *vs)
        else:
            return read_value(typename, reader)

    def _cmd_restore(self, args):
        if len(args) % 2 == 0:
            raise self.Failure('Invalid argument count')

        fname = args[0]
        args = args[1:]

        with open(fname, 'rb') as f:
            reader = ReaderInput(f)
            while args != []:
                vname = args[0]
                typename = args[1]
                args = args[2:]

                if vname in self._vars:
                    raise self.Failure('Variable already exists: %s' % vname)

                try:
                    self._vars[vname] = self._restore_val(reader, typename)
                except ValueError:
                    raise self.Failure('Failed to restore variable %s.\n'
                                       'Possibly malformed data in %s.\n'
                                       % (vname, fname))

            skip_spaces(reader)
            if reader.get_char() != b'':
                raise self.Failure('Expected EOF after reading values')

    def _cmd_types(self, args):
        for k in self._ctx.opaques.keys():
            print(k)

    def _cmd_entry_points(self, args):
        for k in self._ctx.entry_points.keys():
            print(k)

    _commands = { 'inputs': _cmd_inputs,
                  'outputs': _cmd_outputs,
                  'call': _cmd_call,
                  'restore': _cmd_restore,
                  'store': _cmd_store,
                  'free': _cmd_free,
                  'rename': _cmd_rename,
                  'clear': _cmd_dummy,
                  'pause_profiling': _cmd_dummy,
                  'unpause_profiling': _cmd_dummy,
                  'report': _cmd_dummy,
                  'types': _cmd_types,
                  'entry_points': _cmd_entry_points,
                 }

    def _process_line(self, line):
        words = shlex.split(line)
        if words == []:
            raise self.Failure('Empty line')
        else:
            cmd = words[0]
            args = words[1:]
            if cmd in self._commands:
                self._commands[cmd](self, args)
            else:
                raise self.Failure('Unknown command: %s' % cmd)

    def run(self):
        while True:
            print('%%% OK', flush=True)
            line = sys.stdin.readline()
            if line == '':
                return
            try:
                self._process_line(line)
            except self.Failure as e:
                print('%%% FAILURE')
                print(e.msg)

# End of server.py
parser = argparse.ArgumentParser(description="A compiled Futhark program.")
parser.add_argument("--tuning", action="append", default=[], type=open)
parser.add_argument("--cache-file", action="append", default=[], type=str)
parser.add_argument("-L", "--log", action="append_const", default=[], const=None)
parser.add_argument("-p", "--platform", action="append", default=[], type=str)
parser.add_argument("-d", "--device", action="append", default=[], type=str)
parser.add_argument("--build-option", action="append", default=[], type=str)
parser.add_argument("--default-threshold", action="append", default=[], type=int)
parser.add_argument("--default-group-size", action="append", default=[], type=int)
parser.add_argument("--default-num-groups", action="append", default=[], type=int)
parser.add_argument("--default-tile-size", action="append", default=[], type=int)
parser.add_argument("--default-reg-tile-size", action="append", default=[], type=int)
parser.add_argument("--param", action="append", default=[], type=param_assignment)
parser_result = vars(parser.parse_args(sys.argv[1:]))
for optarg in parser_result["tuning"]:
  read_tuning_file(sizes, optarg)
for optarg in parser_result["cache_file"]:
  pass
for optarg in parser_result["log"]:
  pass
for optarg in parser_result["platform"]:
  preferred_platform = optarg
for optarg in parser_result["device"]:
  preferred_device = optarg
for optarg in parser_result["build_option"]:
  build_options = (build_options + [optarg])
for optarg in parser_result["default_threshold"]:
  default_threshold = optarg
for optarg in parser_result["default_group_size"]:
  default_group_size = optarg
for optarg in parser_result["default_num_groups"]:
  default_num_groups = optarg
for optarg in parser_result["default_tile_size"]:
  default_tile_size = optarg
for optarg in parser_result["default_reg_tile_size"]:
  default_reg_tile_size = optarg
for optarg in parser_result["param"]:
  params[optarg[0]] = optarg[1]
class internal:
  entry_points = {"add_valid": ([], ["bool"]), "cos_valid": ([], ["bool"]), "div_valid": ([], ["bool"]), "exp_valid": ([], ["bool"]), "max_valid": ([], ["bool"]), "min_valid": ([], ["bool"]), "mul_valid": ([], ["bool"]), "neg_valid": ([], ["bool"]), "sin_valid": ([], ["bool"]), "sqrt_valid": ([], ["bool"]), "sub_valid": ([], ["bool"])}
  opaques = {}
  def __init__(self, build_options=build_options, command_queue=None, interactive=False, platform_pref=preferred_platform, device_pref=preferred_device, default_group_size=default_group_size, default_num_groups=default_num_groups, default_tile_size=default_tile_size, default_reg_tile_size=default_reg_tile_size, default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.GPU, "num_groups", lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))), ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("", cl.device_type.GPU, "tile_size", lambda device: np.int32(16)), ("", cl.device_type.GPU, "reg_tile_size", lambda device: np.int32(4)), ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("", cl.device_type.CPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.CPU, "num_groups", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))), ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("", cl.device_type.CPU, "tile_size", lambda device: np.int32(4)), ("", cl.device_type.CPU, "reg_tile_size", lambda device: np.int32(1)), ("", cl.device_type.CPU, "threshold", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 0
    self.failure_msgs=[]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       build_options=build_options,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_reg_tile_size=default_reg_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i32", "i64", "f32", "bool"],
                                       user_sizes=sizes,
                                       all_sizes={"group_size_18342": {"class": "group_size", "value": None}, "group_size_18361": {"class": "group_size", "value": None}, "group_size_18380": {"class": "group_size", "value": None}, "group_size_18399": {"class": "group_size", "value": None}, "group_size_18418": {"class": "group_size", "value": None}, "group_size_18437": {"class": "group_size", "value": None}, "group_size_18456": {"class": "group_size", "value": None}, "group_size_18475": {"class": "group_size", "value": None}, "group_size_18494": {"class": "group_size", "value": None}, "group_size_18513": {"class": "group_size", "value": None}, "group_size_18532": {"class": "group_size", "value": None}, "group_size_18551": {"class": "group_size", "value": None}, "segmap_group_size_17073": {"class": "group_size", "value": None}, "segmap_group_size_17215": {"class": "group_size", "value": None}, "segred_group_size_16771": {"class": "group_size", "value": None}, "segred_group_size_17585": {"class": "group_size", "value": None}, "segred_group_size_17903": {"class": "group_size", "value": None}, "segred_num_groups_16773": {"class": "num_groups", "value": None}, "segred_num_groups_17587": {"class": "num_groups", "value": None}, "segred_num_groups_17905": {"class": "num_groups", "value": None}, "suff_outer_redomap_0": {"class": "threshold(def, )", "value": None}})
    self.copy_18338_var = program.copy_18338
    self.copy_18357_var = program.copy_18357
    self.copy_18376_var = program.copy_18376
    self.copy_18395_var = program.copy_18395
    self.copy_18414_var = program.copy_18414
    self.copy_18433_var = program.copy_18433
    self.copy_18452_var = program.copy_18452
    self.copy_18471_var = program.copy_18471
    self.copy_18490_var = program.copy_18490
    self.copy_18509_var = program.copy_18509
    self.copy_18528_var = program.copy_18528
    self.copy_18547_var = program.copy_18547
    self.gpuseq_18332_var = program.gpuseq_18332
    self.gpuseq_18648_var = program.gpuseq_18648
    self.segmap_17607_var = program.segmap_17607
    self.segmap_17761_var = program.segmap_17761
    self.segred_nonseg_16819_var = program.segred_nonseg_16819
    self.segred_nonseg_17859_var = program.segred_nonseg_17859
    self.segred_nonseg_17916_var = program.segred_nonseg_17916
    self.constants = {}
    static_array_18230 = np.array([np.float32(0.0), np.float32(42.41999816894531), np.float32(2.0), np.float32(1.0), np.float32(2.0), np.float32(1.0), np.float32(0.0), np.float32(1.0), np.inf, np.float32(0.0), np.inf, np.inf, -np.inf, np.inf], dtype=np.float32)
    static_mem_18726 = opencl_alloc(self, 56, "static_mem_18726")
    if (56 != 0):
      cl.enqueue_copy(self.queue, static_mem_18726, normaliseArray(static_array_18230), is_blocking=synchronous)
    self.static_array_18230 = static_mem_18726
    static_array_18231 = np.array([np.float32(0.0), np.float32(42.41999816894531), np.float32(1.0), np.float32(-2.0), np.float32(-2.0), np.float32(0.0), np.float32(-1.0), -np.inf, np.float32(1.0), -np.inf, np.float32(0.0), -np.inf, -np.inf, np.inf], dtype=np.float32)
    static_mem_18727 = opencl_alloc(self, 56, "static_mem_18727")
    if (56 != 0):
      cl.enqueue_copy(self.queue, static_mem_18727, normaliseArray(static_array_18231), is_blocking=synchronous)
    self.static_array_18231 = static_mem_18727
    counter_mem_18234 = np.zeros(10, dtype=np.int32)
    static_mem_18728 = opencl_alloc(self, 40, "static_mem_18728")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_18728, normaliseArray(counter_mem_18234), is_blocking=synchronous)
    self.counter_mem_18234 = static_mem_18728
    counter_mem_18586 = np.zeros(10, dtype=np.int32)
    static_mem_18729 = opencl_alloc(self, 40, "static_mem_18729")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_18729, normaliseArray(counter_mem_18586), is_blocking=synchronous)
    self.counter_mem_18586 = static_mem_18729
    counter_mem_18656 = np.zeros(10, dtype=np.int32)
    static_mem_18735 = opencl_alloc(self, 40, "static_mem_18735")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_18735, normaliseArray(counter_mem_18656), is_blocking=synchronous)
    self.counter_mem_18656 = static_mem_18735
    mem_18029 = opencl_alloc(self, np.int64(56), "mem_18029")
    static_array_18230 = self.static_array_18230
    if (np.int64(56) != 0):
      cl.enqueue_copy(self.queue, mem_18029, static_array_18230, dest_offset=np.int64(np.int64(0)), src_offset=np.int64(np.int64(0)), byte_count=np.int64(np.int64(56)))
    if synchronous:
      sync(self)
    mem_18031 = opencl_alloc(self, np.int64(56), "mem_18031")
    static_array_18231 = self.static_array_18231
    if (np.int64(56) != 0):
      cl.enqueue_copy(self.queue, mem_18031, static_array_18231, dest_offset=np.int64(np.int64(0)), src_offset=np.int64(np.int64(0)), byte_count=np.int64(np.int64(56)))
    if synchronous:
      sync(self)
    suff_outer_redomap_16769 = (self.sizes["suff_outer_redomap_0"] <= np.int64(14))
    segmap_group_sizze_17599 = self.sizes["segmap_group_size_17215"]
    segmap_group_sizze_17745 = self.sizes["segmap_group_size_17073"]
    segred_group_sizze_17849 = self.sizes["segred_group_size_17585"]
    max_num_groups_18232 = self.sizes["segred_num_groups_17587"]
    num_groups_17850 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(np.int64(14), segred_group_sizze_17849), sext_i32_i64(max_num_groups_18232))))
    segred_group_sizze_16797 = self.sizes["segred_group_size_16771"]
    max_num_groups_18233 = self.sizes["segred_num_groups_16773"]
    num_groups_16798 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(np.int64(14), segred_group_sizze_16797), sext_i32_i64(max_num_groups_18233))))
    local_memory_capacity_18654 = self.max_local_memory
    if ((suff_outer_redomap_16769 == True) and (((((((((((((sle32((((((np.int32(8) + (segred_group_sizze_16797 + srem64((np.int64(8) - srem64(segred_group_sizze_16797, np.int64(8))), np.int64(8)))) + (segred_group_sizze_16797 + srem64((np.int64(8) - srem64(segred_group_sizze_16797, np.int64(8))), np.int64(8)))) + (segred_group_sizze_16797 + srem64((np.int64(8) - srem64(segred_group_sizze_16797, np.int64(8))), np.int64(8)))) + (segred_group_sizze_16797 + srem64((np.int64(8) - srem64(segred_group_sizze_16797, np.int64(8))), np.int64(8)))) + (segred_group_sizze_16797 + srem64((np.int64(8) - srem64(segred_group_sizze_16797, np.int64(8))), np.int64(8)))), sext_i32_i64(local_memory_capacity_18654)) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654))) and sle64(np.int64(0), sext_i32_i64(local_memory_capacity_18654)))):
      mem_18127 = opencl_alloc(self, np.int64(1), "mem_18127")
      mem_18129 = opencl_alloc(self, np.int64(1), "mem_18129")
      mem_18131 = opencl_alloc(self, np.int64(1), "mem_18131")
      mem_18133 = opencl_alloc(self, np.int64(1), "mem_18133")
      mem_18135 = opencl_alloc(self, np.int64(1), "mem_18135")
      mem_18136 = opencl_alloc(self, np.int64(784), "mem_18136")
      mem_18137 = opencl_alloc(self, np.int64(784), "mem_18137")
      mem_18138 = opencl_alloc(self, np.int64(784), "mem_18138")
      mem_18139 = opencl_alloc(self, np.int64(784), "mem_18139")
      mem_18140 = opencl_alloc(self, np.int64(784), "mem_18140")
      mem_18141 = opencl_alloc(self, np.int64(784), "mem_18141")
      mem_18142 = opencl_alloc(self, np.int64(784), "mem_18142")
      mem_18143 = opencl_alloc(self, np.int64(784), "mem_18143")
      mem_18144 = opencl_alloc(self, np.int64(784), "mem_18144")
      mem_18145 = opencl_alloc(self, np.int64(784), "mem_18145")
      mem_18146 = opencl_alloc(self, np.int64(784), "mem_18146")
      mem_18147 = opencl_alloc(self, np.int64(784), "mem_18147")
      counter_mem_18234 = self.counter_mem_18234
      segred_tmp_mem_18236 = opencl_alloc(self, num_groups_16798, "segred_tmp_mem_18236")
      segred_tmp_mem_18238 = opencl_alloc(self, num_groups_16798, "segred_tmp_mem_18238")
      segred_tmp_mem_18240 = opencl_alloc(self, num_groups_16798, "segred_tmp_mem_18240")
      segred_tmp_mem_18242 = opencl_alloc(self, num_groups_16798, "segred_tmp_mem_18242")
      segred_tmp_mem_18244 = opencl_alloc(self, num_groups_16798, "segred_tmp_mem_18244")
      num_threads_18246 = (num_groups_16798 * segred_group_sizze_16797)
      if ((1 * (np.int64(num_groups_16798) * np.int64(segred_group_sizze_16797))) != 0):
        self.segred_nonseg_16819_var.set_args(self.global_failure, cl.LocalMemory(np.int64(segred_group_sizze_16797)), cl.LocalMemory(np.int64(segred_group_sizze_16797)), cl.LocalMemory(np.int64(segred_group_sizze_16797)), cl.LocalMemory(np.int64(segred_group_sizze_16797)), cl.LocalMemory(np.int64(segred_group_sizze_16797)), cl.LocalMemory(np.int64(np.int32(1))), ct.c_int64(num_groups_16798), ct.c_int64(num_threads_18246), mem_18029, mem_18031, mem_18127, mem_18129, mem_18131, mem_18133, mem_18135, mem_18136, mem_18137, mem_18138, mem_18139, mem_18140, mem_18141, mem_18142, mem_18143, mem_18144, mem_18145, mem_18146, mem_18147, counter_mem_18234, segred_tmp_mem_18236, segred_tmp_mem_18238, segred_tmp_mem_18240, segred_tmp_mem_18242, segred_tmp_mem_18244)
        cl.enqueue_nd_range_kernel(self.queue, self.segred_nonseg_16819_var, ((np.int64(num_groups_16798) * np.int64(segred_group_sizze_16797)),), (np.int64(segred_group_sizze_16797),))
        if synchronous:
          sync(self)
      mem_18149 = opencl_alloc(self, np.int64(1), "mem_18149")
      mem_18151 = opencl_alloc(self, np.int64(1), "mem_18151")
      mem_18153 = opencl_alloc(self, np.int64(1), "mem_18153")
      mem_18155 = opencl_alloc(self, np.int64(1), "mem_18155")
      mem_18157 = opencl_alloc(self, np.int64(1), "mem_18157")
      if ((1 * (np.int64(np.int64(1)) * np.int64(np.int64(1)))) != 0):
        self.gpuseq_18332_var.set_args(self.global_failure, mem_18127, mem_18129, mem_18131, mem_18133, mem_18135, mem_18149, mem_18151, mem_18153, mem_18155, mem_18157)
        cl.enqueue_nd_range_kernel(self.queue, self.gpuseq_18332_var, ((np.int64(np.int64(1)) * np.int64(np.int64(1))),), (np.int64(np.int64(1)),))
        if synchronous:
          sync(self)
      mem_18127 = None
      mem_18129 = None
      mem_18131 = None
      mem_18133 = None
      mem_18135 = None
      mem_18159 = opencl_alloc(self, np.int64(784), "mem_18159")
      group_sizze_18342 = self.sizes["group_size_18342"]
      virt_num_groups_18343 = sdiv_up64(np.int64(196), group_sizze_18342)
      num_groups_18344 = smin64(virt_num_groups_18343, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18344) * np.int64(group_sizze_18342))) != 0):
        self.copy_18338_var.set_args(ct.c_int64(virt_num_groups_18343), ct.c_int64(num_groups_18344), mem_18136, mem_18159)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18338_var, ((np.int64(num_groups_18344) * np.int64(group_sizze_18342)),), (np.int64(group_sizze_18342),))
        if synchronous:
          sync(self)
      mem_18136 = None
      mem_18162 = opencl_alloc(self, np.int64(784), "mem_18162")
      group_sizze_18361 = self.sizes["group_size_18361"]
      virt_num_groups_18362 = sdiv_up64(np.int64(196), group_sizze_18361)
      num_groups_18363 = smin64(virt_num_groups_18362, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18363) * np.int64(group_sizze_18361))) != 0):
        self.copy_18357_var.set_args(ct.c_int64(virt_num_groups_18362), ct.c_int64(num_groups_18363), mem_18137, mem_18162)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18357_var, ((np.int64(num_groups_18363) * np.int64(group_sizze_18361)),), (np.int64(group_sizze_18361),))
        if synchronous:
          sync(self)
      mem_18137 = None
      mem_18165 = opencl_alloc(self, np.int64(784), "mem_18165")
      group_sizze_18380 = self.sizes["group_size_18380"]
      virt_num_groups_18381 = sdiv_up64(np.int64(196), group_sizze_18380)
      num_groups_18382 = smin64(virt_num_groups_18381, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18382) * np.int64(group_sizze_18380))) != 0):
        self.copy_18376_var.set_args(ct.c_int64(virt_num_groups_18381), ct.c_int64(num_groups_18382), mem_18138, mem_18165)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18376_var, ((np.int64(num_groups_18382) * np.int64(group_sizze_18380)),), (np.int64(group_sizze_18380),))
        if synchronous:
          sync(self)
      mem_18138 = None
      mem_18168 = opencl_alloc(self, np.int64(784), "mem_18168")
      group_sizze_18399 = self.sizes["group_size_18399"]
      virt_num_groups_18400 = sdiv_up64(np.int64(196), group_sizze_18399)
      num_groups_18401 = smin64(virt_num_groups_18400, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18401) * np.int64(group_sizze_18399))) != 0):
        self.copy_18395_var.set_args(ct.c_int64(virt_num_groups_18400), ct.c_int64(num_groups_18401), mem_18139, mem_18168)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18395_var, ((np.int64(num_groups_18401) * np.int64(group_sizze_18399)),), (np.int64(group_sizze_18399),))
        if synchronous:
          sync(self)
      mem_18139 = None
      mem_18171 = opencl_alloc(self, np.int64(784), "mem_18171")
      group_sizze_18418 = self.sizes["group_size_18418"]
      virt_num_groups_18419 = sdiv_up64(np.int64(196), group_sizze_18418)
      num_groups_18420 = smin64(virt_num_groups_18419, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18420) * np.int64(group_sizze_18418))) != 0):
        self.copy_18414_var.set_args(ct.c_int64(virt_num_groups_18419), ct.c_int64(num_groups_18420), mem_18140, mem_18171)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18414_var, ((np.int64(num_groups_18420) * np.int64(group_sizze_18418)),), (np.int64(group_sizze_18418),))
        if synchronous:
          sync(self)
      mem_18140 = None
      mem_18174 = opencl_alloc(self, np.int64(784), "mem_18174")
      group_sizze_18437 = self.sizes["group_size_18437"]
      virt_num_groups_18438 = sdiv_up64(np.int64(196), group_sizze_18437)
      num_groups_18439 = smin64(virt_num_groups_18438, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18439) * np.int64(group_sizze_18437))) != 0):
        self.copy_18433_var.set_args(ct.c_int64(virt_num_groups_18438), ct.c_int64(num_groups_18439), mem_18141, mem_18174)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18433_var, ((np.int64(num_groups_18439) * np.int64(group_sizze_18437)),), (np.int64(group_sizze_18437),))
        if synchronous:
          sync(self)
      mem_18141 = None
      mem_18177 = opencl_alloc(self, np.int64(784), "mem_18177")
      group_sizze_18456 = self.sizes["group_size_18456"]
      virt_num_groups_18457 = sdiv_up64(np.int64(196), group_sizze_18456)
      num_groups_18458 = smin64(virt_num_groups_18457, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18458) * np.int64(group_sizze_18456))) != 0):
        self.copy_18452_var.set_args(ct.c_int64(virt_num_groups_18457), ct.c_int64(num_groups_18458), mem_18142, mem_18177)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18452_var, ((np.int64(num_groups_18458) * np.int64(group_sizze_18456)),), (np.int64(group_sizze_18456),))
        if synchronous:
          sync(self)
      mem_18142 = None
      mem_18180 = opencl_alloc(self, np.int64(784), "mem_18180")
      group_sizze_18475 = self.sizes["group_size_18475"]
      virt_num_groups_18476 = sdiv_up64(np.int64(196), group_sizze_18475)
      num_groups_18477 = smin64(virt_num_groups_18476, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18477) * np.int64(group_sizze_18475))) != 0):
        self.copy_18471_var.set_args(ct.c_int64(virt_num_groups_18476), ct.c_int64(num_groups_18477), mem_18143, mem_18180)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18471_var, ((np.int64(num_groups_18477) * np.int64(group_sizze_18475)),), (np.int64(group_sizze_18475),))
        if synchronous:
          sync(self)
      mem_18143 = None
      mem_18183 = opencl_alloc(self, np.int64(784), "mem_18183")
      group_sizze_18494 = self.sizes["group_size_18494"]
      virt_num_groups_18495 = sdiv_up64(np.int64(196), group_sizze_18494)
      num_groups_18496 = smin64(virt_num_groups_18495, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18496) * np.int64(group_sizze_18494))) != 0):
        self.copy_18490_var.set_args(ct.c_int64(virt_num_groups_18495), ct.c_int64(num_groups_18496), mem_18144, mem_18183)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18490_var, ((np.int64(num_groups_18496) * np.int64(group_sizze_18494)),), (np.int64(group_sizze_18494),))
        if synchronous:
          sync(self)
      mem_18144 = None
      mem_18186 = opencl_alloc(self, np.int64(784), "mem_18186")
      group_sizze_18513 = self.sizes["group_size_18513"]
      virt_num_groups_18514 = sdiv_up64(np.int64(196), group_sizze_18513)
      num_groups_18515 = smin64(virt_num_groups_18514, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18515) * np.int64(group_sizze_18513))) != 0):
        self.copy_18509_var.set_args(ct.c_int64(virt_num_groups_18514), ct.c_int64(num_groups_18515), mem_18145, mem_18186)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18509_var, ((np.int64(num_groups_18515) * np.int64(group_sizze_18513)),), (np.int64(group_sizze_18513),))
        if synchronous:
          sync(self)
      mem_18145 = None
      mem_18189 = opencl_alloc(self, np.int64(784), "mem_18189")
      group_sizze_18532 = self.sizes["group_size_18532"]
      virt_num_groups_18533 = sdiv_up64(np.int64(196), group_sizze_18532)
      num_groups_18534 = smin64(virt_num_groups_18533, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18534) * np.int64(group_sizze_18532))) != 0):
        self.copy_18528_var.set_args(ct.c_int64(virt_num_groups_18533), ct.c_int64(num_groups_18534), mem_18146, mem_18189)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18528_var, ((np.int64(num_groups_18534) * np.int64(group_sizze_18532)),), (np.int64(group_sizze_18532),))
        if synchronous:
          sync(self)
      mem_18146 = None
      mem_18192 = opencl_alloc(self, np.int64(784), "mem_18192")
      group_sizze_18551 = self.sizes["group_size_18551"]
      virt_num_groups_18552 = sdiv_up64(np.int64(196), group_sizze_18551)
      num_groups_18553 = smin64(virt_num_groups_18552, np.int64(1048576))
      if ((1 * (np.int64(num_groups_18553) * np.int64(group_sizze_18551))) != 0):
        self.copy_18547_var.set_args(ct.c_int64(virt_num_groups_18552), ct.c_int64(num_groups_18553), mem_18147, mem_18192)
        cl.enqueue_nd_range_kernel(self.queue, self.copy_18547_var, ((np.int64(num_groups_18553) * np.int64(group_sizze_18551)),), (np.int64(group_sizze_18551),))
        if synchronous:
          sync(self)
      mem_18147 = None
      ext_mem_18210 = mem_18149
      ext_mem_18209 = mem_18151
      ext_mem_18208 = mem_18153
      ext_mem_18207 = mem_18155
      ext_mem_18206 = mem_18157
      ext_mem_18205 = mem_18159
      ext_mem_18204 = mem_18162
      ext_mem_18203 = mem_18165
      ext_mem_18202 = mem_18168
      ext_mem_18201 = mem_18171
      ext_mem_18200 = mem_18174
      ext_mem_18199 = mem_18177
      ext_mem_18198 = mem_18180
      ext_mem_18197 = mem_18183
      ext_mem_18196 = mem_18186
      ext_mem_18195 = mem_18189
      ext_mem_18194 = mem_18192
    else:
      segmap_usable_groups_17600 = sdiv_up64(np.int64(14), segmap_group_sizze_17599)
      mem_18034 = opencl_alloc(self, np.int64(14), "mem_18034")
      mem_18036 = opencl_alloc(self, np.int64(14), "mem_18036")
      mem_18038 = opencl_alloc(self, np.int64(14), "mem_18038")
      mem_18040 = opencl_alloc(self, np.int64(14), "mem_18040")
      mem_18042 = opencl_alloc(self, np.int64(14), "mem_18042")
      virt_num_groups_18566 = sext_i64_i32(sdiv_up64(np.int64(14), segmap_group_sizze_17599))
      if ((1 * (np.int64(segmap_usable_groups_17600) * np.int64(segmap_group_sizze_17599))) != 0):
        self.segmap_17607_var.set_args(self.global_failure, mem_18029, mem_18031, mem_18034, mem_18036, mem_18038, mem_18040, mem_18042)
        cl.enqueue_nd_range_kernel(self.queue, self.segmap_17607_var, ((np.int64(segmap_usable_groups_17600) * np.int64(segmap_group_sizze_17599)),), (np.int64(segmap_group_sizze_17599),))
        if synchronous:
          sync(self)
      segmap_usable_groups_17746 = sdiv_up64(np.int64(196), segmap_group_sizze_17745)
      mem_18045 = opencl_alloc(self, np.int64(784), "mem_18045")
      mem_18047 = opencl_alloc(self, np.int64(784), "mem_18047")
      mem_18049 = opencl_alloc(self, np.int64(784), "mem_18049")
      mem_18051 = opencl_alloc(self, np.int64(784), "mem_18051")
      mem_18053 = opencl_alloc(self, np.int64(784), "mem_18053")
      mem_18055 = opencl_alloc(self, np.int64(784), "mem_18055")
      mem_18057 = opencl_alloc(self, np.int64(784), "mem_18057")
      mem_18059 = opencl_alloc(self, np.int64(784), "mem_18059")
      mem_18061 = opencl_alloc(self, np.int64(784), "mem_18061")
      mem_18063 = opencl_alloc(self, np.int64(784), "mem_18063")
      mem_18065 = opencl_alloc(self, np.int64(784), "mem_18065")
      mem_18067 = opencl_alloc(self, np.int64(784), "mem_18067")
      virt_num_groups_18575 = sext_i64_i32(sdiv_up64(np.int64(196), segmap_group_sizze_17745))
      if ((1 * (np.int64(segmap_usable_groups_17746) * np.int64(segmap_group_sizze_17745))) != 0):
        self.segmap_17761_var.set_args(self.global_failure, mem_18029, mem_18031, mem_18045, mem_18047, mem_18049, mem_18051, mem_18053, mem_18055, mem_18057, mem_18059, mem_18061, mem_18063, mem_18065, mem_18067)
        cl.enqueue_nd_range_kernel(self.queue, self.segmap_17761_var, ((np.int64(segmap_usable_groups_17746) * np.int64(segmap_group_sizze_17745)),), (np.int64(segmap_group_sizze_17745),))
        if synchronous:
          sync(self)
      mem_18070 = opencl_alloc(self, np.int64(1), "mem_18070")
      mem_18072 = opencl_alloc(self, np.int64(1), "mem_18072")
      mem_18074 = opencl_alloc(self, np.int64(1), "mem_18074")
      mem_18076 = opencl_alloc(self, np.int64(1), "mem_18076")
      mem_18078 = opencl_alloc(self, np.int64(1), "mem_18078")
      counter_mem_18586 = self.counter_mem_18586
      segred_tmp_mem_18588 = opencl_alloc(self, num_groups_17850, "segred_tmp_mem_18588")
      segred_tmp_mem_18590 = opencl_alloc(self, num_groups_17850, "segred_tmp_mem_18590")
      segred_tmp_mem_18592 = opencl_alloc(self, num_groups_17850, "segred_tmp_mem_18592")
      segred_tmp_mem_18594 = opencl_alloc(self, num_groups_17850, "segred_tmp_mem_18594")
      segred_tmp_mem_18596 = opencl_alloc(self, num_groups_17850, "segred_tmp_mem_18596")
      num_threads_18598 = (num_groups_17850 * segred_group_sizze_17849)
      if ((1 * (np.int64(num_groups_17850) * np.int64(segred_group_sizze_17849))) != 0):
        self.segred_nonseg_17859_var.set_args(self.global_failure, cl.LocalMemory(np.int64(segred_group_sizze_17849)), cl.LocalMemory(np.int64(segred_group_sizze_17849)), cl.LocalMemory(np.int64(segred_group_sizze_17849)), cl.LocalMemory(np.int64(segred_group_sizze_17849)), cl.LocalMemory(np.int64(segred_group_sizze_17849)), cl.LocalMemory(np.int64(np.int32(1))), ct.c_int64(num_groups_17850), ct.c_int64(num_threads_18598), mem_18034, mem_18036, mem_18038, mem_18040, mem_18042, mem_18070, mem_18072, mem_18074, mem_18076, mem_18078, counter_mem_18586, segred_tmp_mem_18588, segred_tmp_mem_18590, segred_tmp_mem_18592, segred_tmp_mem_18594, segred_tmp_mem_18596)
        cl.enqueue_nd_range_kernel(self.queue, self.segred_nonseg_17859_var, ((np.int64(num_groups_17850) * np.int64(segred_group_sizze_17849)),), (np.int64(segred_group_sizze_17849),))
        if synchronous:
          sync(self)
      mem_18034 = None
      mem_18036 = None
      mem_18038 = None
      mem_18040 = None
      mem_18042 = None
      mem_18080 = opencl_alloc(self, np.int64(1), "mem_18080")
      mem_18082 = opencl_alloc(self, np.int64(1), "mem_18082")
      mem_18084 = opencl_alloc(self, np.int64(1), "mem_18084")
      mem_18086 = opencl_alloc(self, np.int64(1), "mem_18086")
      mem_18088 = opencl_alloc(self, np.int64(1), "mem_18088")
      if ((1 * (np.int64(np.int64(1)) * np.int64(np.int64(1)))) != 0):
        self.gpuseq_18648_var.set_args(self.global_failure, mem_18070, mem_18072, mem_18074, mem_18076, mem_18078, mem_18080, mem_18082, mem_18084, mem_18086, mem_18088)
        cl.enqueue_nd_range_kernel(self.queue, self.gpuseq_18648_var, ((np.int64(np.int64(1)) * np.int64(np.int64(1))),), (np.int64(np.int64(1)),))
        if synchronous:
          sync(self)
      mem_18070 = None
      mem_18072 = None
      mem_18074 = None
      mem_18076 = None
      mem_18078 = None
      ext_mem_18210 = mem_18080
      ext_mem_18209 = mem_18082
      ext_mem_18208 = mem_18084
      ext_mem_18207 = mem_18086
      ext_mem_18206 = mem_18088
      ext_mem_18205 = mem_18045
      ext_mem_18204 = mem_18047
      ext_mem_18203 = mem_18049
      ext_mem_18202 = mem_18051
      ext_mem_18201 = mem_18053
      ext_mem_18200 = mem_18055
      ext_mem_18199 = mem_18057
      ext_mem_18198 = mem_18059
      ext_mem_18197 = mem_18061
      ext_mem_18196 = mem_18063
      ext_mem_18195 = mem_18065
      ext_mem_18194 = mem_18067
    mem_18029 = None
    mem_18031 = None
    read_res_18730 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18730, ext_mem_18210, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16733"] = read_res_18730[0]
    ext_mem_18210 = None
    read_res_18731 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18731, ext_mem_18209, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16734"] = read_res_18731[0]
    ext_mem_18209 = None
    read_res_18732 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18732, ext_mem_18208, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16735"] = read_res_18732[0]
    ext_mem_18208 = None
    read_res_18733 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18733, ext_mem_18207, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16736"] = read_res_18733[0]
    ext_mem_18207 = None
    read_res_18734 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18734, ext_mem_18206, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16737"] = read_res_18734[0]
    ext_mem_18206 = None
    segred_group_sizze_17904 = self.sizes["segred_group_size_17903"]
    max_num_groups_18655 = self.sizes["segred_num_groups_17905"]
    num_groups_17906 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(np.int64(196), segred_group_sizze_17904), sext_i32_i64(max_num_groups_18655))))
    mem_18213 = opencl_alloc(self, np.int64(1), "mem_18213")
    mem_18215 = opencl_alloc(self, np.int64(1), "mem_18215")
    mem_18217 = opencl_alloc(self, np.int64(1), "mem_18217")
    mem_18219 = opencl_alloc(self, np.int64(1), "mem_18219")
    mem_18221 = opencl_alloc(self, np.int64(1), "mem_18221")
    mem_18223 = opencl_alloc(self, np.int64(1), "mem_18223")
    counter_mem_18656 = self.counter_mem_18656
    segred_tmp_mem_18658 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18658")
    segred_tmp_mem_18660 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18660")
    segred_tmp_mem_18662 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18662")
    segred_tmp_mem_18664 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18664")
    segred_tmp_mem_18666 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18666")
    segred_tmp_mem_18668 = opencl_alloc(self, num_groups_17906, "segred_tmp_mem_18668")
    num_threads_18670 = (num_groups_17906 * segred_group_sizze_17904)
    if ((1 * (np.int64(num_groups_17906) * np.int64(segred_group_sizze_17904))) != 0):
      self.segred_nonseg_17916_var.set_args(self.global_failure, cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(segred_group_sizze_17904)), cl.LocalMemory(np.int64(np.int32(1))), ct.c_int64(num_groups_17906), ct.c_int64(num_threads_18670), ext_mem_18194, ext_mem_18195, ext_mem_18196, ext_mem_18197, ext_mem_18198, ext_mem_18199, ext_mem_18200, ext_mem_18201, ext_mem_18202, ext_mem_18203, ext_mem_18204, ext_mem_18205, mem_18213, mem_18215, mem_18217, mem_18219, mem_18221, mem_18223, counter_mem_18656, segred_tmp_mem_18658, segred_tmp_mem_18660, segred_tmp_mem_18662, segred_tmp_mem_18664, segred_tmp_mem_18666, segred_tmp_mem_18668)
      cl.enqueue_nd_range_kernel(self.queue, self.segred_nonseg_17916_var, ((np.int64(num_groups_17906) * np.int64(segred_group_sizze_17904)),), (np.int64(segred_group_sizze_17904),))
      if synchronous:
        sync(self)
    ext_mem_18194 = None
    ext_mem_18195 = None
    ext_mem_18196 = None
    ext_mem_18197 = None
    ext_mem_18198 = None
    ext_mem_18199 = None
    ext_mem_18200 = None
    ext_mem_18201 = None
    ext_mem_18202 = None
    ext_mem_18203 = None
    ext_mem_18204 = None
    ext_mem_18205 = None
    read_res_18736 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18736, mem_18213, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16750"] = read_res_18736[0]
    mem_18213 = None
    read_res_18737 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18737, mem_18215, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16751"] = read_res_18737[0]
    mem_18215 = None
    read_res_18738 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18738, mem_18217, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16752"] = read_res_18738[0]
    mem_18217 = None
    read_res_18739 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18739, mem_18219, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16753"] = read_res_18739[0]
    mem_18219 = None
    read_res_18740 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18740, mem_18221, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16754"] = read_res_18740[0]
    mem_18221 = None
    read_res_18741 = np.empty(1, dtype=ct.c_bool)
    cl.enqueue_copy(self.queue, read_res_18741, mem_18223, device_offset=(np.int64(np.int64(0)) * 1), is_blocking=synchronous)
    sync(self)
    self.constants["defunc_2_reduce_res_16755"] = read_res_18741[0]
    mem_18223 = None
  def futhark_entry_add_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16750"]
    return prim_out_18229
  def futhark_entry_cos_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16734"]
    return prim_out_18229
  def futhark_entry_div_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16753"]
    return prim_out_18229
  def futhark_entry_exp_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16735"]
    return prim_out_18229
  def futhark_entry_max_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16755"]
    return prim_out_18229
  def futhark_entry_min_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16754"]
    return prim_out_18229
  def futhark_entry_mul_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16751"]
    return prim_out_18229
  def futhark_entry_neg_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16737"]
    return prim_out_18229
  def futhark_entry_sin_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16733"]
    return prim_out_18229
  def futhark_entry_sqrt_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16736"]
    return prim_out_18229
  def futhark_entry_sub_valid(self):
    prim_out_18229 = self.constants["defunc_2_reduce_res_16752"]
    return prim_out_18229
  def add_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_add_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def cos_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_cos_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def div_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_div_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def exp_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_exp_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def max_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_max_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def min_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_min_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def mul_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_mul_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def neg_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_neg_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def sin_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_sin_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def sqrt_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_sqrt_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
  def sub_valid(self):
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      prim_out_18229 = self.futhark_entry_sub_valid()
    sync(self)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (runtime, np.bool_(prim_out_18229))
server = Server(internal())
server.run()