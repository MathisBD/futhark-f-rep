# Generated by Futhark 0.22.4
import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def param_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             build_options=[],
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_reg_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_reg_tile_size' in sizes:
        default_reg_tile_size = sizes['default_reg_tile_size']
        del sizes['default_reg_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'reg_tile_size': default_reg_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    default_reg_tile_size = default_sizes['reg_tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'] == 'reg_tile_size':
            max_value = None
            default_value = default_reg_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        build_options += ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]

        build_options += ["-D{}={}".format(s.
                                           replace('z', 'zz').
                                           replace('.', 'zi').
                                           replace('#', 'zh').
                                           replace('\'', 'zq'),
                                           v) for (s,v) in self.sizes.items()]

        if (self.platform.name == 'Oclgrind'):
            build_options += ['-DEMULATE_F16']

        return cl.Program(self.ctx, program_src).build(build_options)

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
build_options = []
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
default_reg_tile_size = None
fut_opencl_src = """
// Clang-based OpenCL implementations need this for 'static' to work.
#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable

// Some OpenCL programs dislike empty progams, or programs with no kernels.
// Declare a dummy kernel to ensure they remain our friends.
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    if (thread_gid >= n) return;
}

#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics : enable

typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;

typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;

// NVIDIAs OpenCL does not create device-wide memory fences (see #734), so we
// use inline assembly if we detect we are on an NVIDIA GPU.
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global() {
  asm("membar.gl;");
}
#else
static inline void mem_fence_global() {
  mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local() {
  mem_fence(CLK_LOCAL_MEM_FENCE);
}
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

static uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

static float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

static uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

static inline uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

static inline uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

static inline uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

static inline uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

static inline uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

static inline uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

static inline uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

static inline uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

static inline uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

static inline uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

static inline uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

static inline uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return (x + y - 1) / ys;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x % ys;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

#else

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

static inline int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

static inline int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

static inline int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

static inline int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

static inline uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

static inline uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

static inline uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

static inline uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

static inline int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

static inline int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

static inline int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

static inline int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

static inline uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

static inline uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

static inline uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

static inline uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

static inline uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

static inline uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

static inline uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

static inline uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

static inline uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

static inline uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

static inline uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

static inline uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

static inline int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

static inline int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

static inline int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

static inline int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

static inline uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

static inline uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

static inline uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

static inline uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

static inline uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

static inline uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

static inline uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

static inline uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

static inline uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

static inline uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

static inline uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

static inline uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

static inline bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

static inline bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

static inline bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

static inline bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

static inline bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

static inline bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

static inline bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

static inline bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

static inline bool slt8(int8_t x, int8_t y) {
  return x < y;
}

static inline bool slt16(int16_t x, int16_t y) {
  return x < y;
}

static inline bool slt32(int32_t x, int32_t y) {
  return x < y;
}

static inline bool slt64(int64_t x, int64_t y) {
  return x < y;
}

static inline bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

static inline bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

static inline bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

static inline bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

static inline uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline bool itob_i8_bool(int8_t x) {
  return x != 0;
}

static inline bool itob_i16_bool(int16_t x) {
  return x != 0;
}

static inline bool itob_i32_bool(int32_t x) {
  return x != 0;
}

static inline bool itob_i64_bool(int64_t x) {
  return x != 0;
}

static inline int8_t btoi_bool_i8(bool x) {
  return x;
}

static inline int16_t btoi_bool_i16(bool x) {
  return x;
}

static inline int32_t btoi_bool_i32(bool x) {
  return x;
}

static inline int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

static int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

static int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

static int32_t abs32(int32_t x) {
  return abs(x);
}

static int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

static int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

static int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

static int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

static int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

static int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

static int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

static int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  return mul_hi(a, b);
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  return mul_hi(a, b);
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mul_hi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul_hi(a, b);
}

#elif defined(__CUDA_ARCH__)

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mulhi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul64hi(a, b);
}

#elif ISPC

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l  + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  __uint128_t aa = a;
  __uint128_t bb = b;

  return aa * bb >> 64;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return mad_hi(a, b, c);
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return mad_hi(a, b, c);
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return mad_hi(a, b, c);
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return mad_hi(a, b, c);
}

#else // Not OpenCL

static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return futrts_mul_hi8(a, b) + c;
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return futrts_mul_hi16(a, b) + c;
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return futrts_mul_hi32(a, b) + c;
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return futrts_mul_hi64(a, b) + c;
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

static int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

static int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

static int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

static int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

static int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

static int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

static int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

static int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

static int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

static int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

static inline float fdiv32(float x, float y) {
  return x / y;
}

static inline float fadd32(float x, float y) {
  return x + y;
}

static inline float fsub32(float x, float y) {
  return x - y;
}

static inline float fmul32(float x, float y) {
  return x * y;
}

static inline bool cmplt32(float x, float y) {
  return x < y;
}

static inline bool cmple32(float x, float y) {
  return x <= y;
}

static inline float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

static inline float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

static inline float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

static inline float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

static inline float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

static inline float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

static inline float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

static inline float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
static inline float fabs32(float x) {
  return fabs(x);
}

static inline float fmax32(float x, float y) {
  return fmax(x, y);
}

static inline float fmin32(float x, float y) {
  return fmin(x, y);
}

static inline float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

static inline float fabs32(float x) {
  return abs(x);
}

static inline float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

static inline float fabs32(float x) {
  return fabsf(x);
}

static inline float fmax32(float x, float y) {
  return fmaxf(x, y);
}

static inline float fmin32(float x, float y) {
  return fminf(x, y);
}

static inline float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

static inline bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

static inline bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

static inline bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

static inline int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

static inline uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f32_bool(float x) {
  return x != 0;
}

static inline float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
static inline float futrts_log32(float x) {
  return log(x);
}

static inline float futrts_log2_32(float x) {
  return log2(x);
}

static inline float futrts_log10_32(float x) {
  return log10(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrt(x);
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return cosh(x);
}

static inline float futrts_sinh32(float x) {
  return sinh(x);
}

static inline float futrts_tanh32(float x) {
  return tanh(x);
}

static inline float futrts_acosh32(float x) {
  return acosh(x);
}

static inline float futrts_asinh32(float x) {
  return asinh(x);
}

static inline float futrts_atanh32(float x) {
  return atanh(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgamma(x);
}

static inline float futrts_lgamma32(float x) {
  return lgamma(x);
}

static inline float futrts_erf32(float x) {
  return erf(x);
}

static inline float futrts_erfc32(float x) {
  return erfc(x);
}

static inline float fmod32(float x, float y) {
  return fmod(x, y);
}

static inline float futrts_round32(float x) {
  return rint(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

static inline float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

static inline float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

static inline float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

static inline float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

static inline float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
static inline float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

static inline float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

static inline float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

static inline float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

static inline float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

static inline float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

static inline float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
static inline float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
static inline float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

static inline float futrts_round32(float x) {
  return round(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
static inline float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

static inline float futrts_log32(float x) {
  return logf(x);
}

static inline float futrts_log2_32(float x) {
  return log2f(x);
}

static inline float futrts_log10_32(float x) {
  return log10f(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrtf(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrtf(x);
}

static inline float futrts_exp32(float x) {
  return expf(x);
}

static inline float futrts_cos32(float x) {
  return cosf(x);
}

static inline float futrts_sin32(float x) {
  return sinf(x);
}

static inline float futrts_tan32(float x) {
  return tanf(x);
}

static inline float futrts_acos32(float x) {
  return acosf(x);
}

static inline float futrts_asin32(float x) {
  return asinf(x);
}

static inline float futrts_atan32(float x) {
  return atanf(x);
}

static inline float futrts_cosh32(float x) {
  return coshf(x);
}

static inline float futrts_sinh32(float x) {
  return sinhf(x);
}

static inline float futrts_tanh32(float x) {
  return tanhf(x);
}

static inline float futrts_acosh32(float x) {
  return acoshf(x);
}

static inline float futrts_asinh32(float x) {
  return asinhf(x);
}

static inline float futrts_atanh32(float x) {
  return atanhf(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgammaf(x);
}

static inline float futrts_lgamma32(float x) {
  return lgammaf(x);
}

static inline float futrts_erf32(float x) {
  return erff(x);
}

static inline float futrts_erfc32(float x) {
  return erfcf(x);
}

static inline float fmod32(float x, float y) {
  return fmodf(x, y);
}

static inline float futrts_round32(float x) {
  return rintf(x);
}

static inline float futrts_floor32(float x) {
  return floorf(x);
}

static inline float futrts_ceil32(float x) {
  return ceilf(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
static inline int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

static inline float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
static inline int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

static inline float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

#if ISPC
static inline bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return abs(x);
}

static inline double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

static inline double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

static inline double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

static inline double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
static inline double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

static inline double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

static inline double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

static inline double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
static inline double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
static inline double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
static inline double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
static inline double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
static inline double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

static inline double futrts_round64(double x) {
  return round(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
static inline float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0.0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

static inline int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

static inline double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return fabs(x);
}

static inline double fmax64(double x, double y) {
  return fmax(x, y);
}

static inline double fmin64(double x, double y) {
  return fmin(x, y);
}

static inline double fpow64(double x, double y) {
  return pow(x, y);
}

static inline double futrts_log64(double x) {
  return log(x);
}

static inline double futrts_log2_64(double x) {
  return log2(x);
}

static inline double futrts_log10_64(double x) {
  return log10(x);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

static inline double futrts_cbrt64(double x) {
  return cbrt(x);
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return cosh(x);
}

static inline double futrts_sinh64(double x) {
  return sinh(x);
}

static inline double futrts_tanh64(double x) {
  return tanh(x);
}

static inline double futrts_acosh64(double x) {
  return acosh(x);
}

static inline double futrts_asinh64(double x) {
  return asinh(x);
}

static inline double futrts_atanh64(double x) {
  return atanh(x);
}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

static inline double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

static inline double futrts_gamma64(double x) {
  return tgamma(x);
}

static inline double futrts_lgamma64(double x) {
  return lgamma(x);
}

static inline double futrts_erf64(double x) {
  return erf(x);
}

static inline double futrts_erfc64(double x) {
  return erfc(x);
}

static inline double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

static inline double futrts_round64(double x) {
  return rint(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

static inline float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline bool futrts_isinf64(double x) {
  return isinf(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

static inline int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

static inline double fmod64(double x, double y) {
  return fmod(x, y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

static inline double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

static inline f16 fadd16(f16 x, f16 y) {
  return x + y;
}

static inline f16 fsub16(f16 x, f16 y) {
  return x - y;
}

static inline f16 fmul16(f16 x, f16 y) {
  return x * y;
}

static inline bool cmplt16(f16 x, f16 y) {
  return x < y;
}

static inline bool cmple16(f16 x, f16 y) {
  return x <= y;
}

static inline f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

static inline f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

static inline f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

static inline f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

static inline f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

static inline f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

static inline f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

static inline f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

static inline int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

static inline int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

static inline int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

static inline int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

static inline uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

static inline uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

static inline uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

static inline uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

static inline bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

static inline f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
static inline bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

static inline f16 fabs16(f16 x) {
  return fabs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
static inline f16 fabs16(f16 x) {
  return abs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}
#else // Assuming CUDA.

static inline f16 fabs16(f16 x) {
  return fabsf(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
static inline bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
static inline bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

static inline bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
static inline f16 futrts_log16(f16 x) {
  return log(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return log2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return log10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return cos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return sin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tan(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acos(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asin(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atan(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erf(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rint(x);
}

static inline f16 futrts_floor16(f16 x) {
  return floor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

static inline f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

static inline f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

static inline f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

static inline f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

static inline f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

static inline f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

static inline f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

static inline f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

static inline f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

static inline f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

static inline f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

static inline f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

static inline f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

static inline f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

static inline f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

static inline f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

static inline f16 futrts_log16(f16 x) {
  return hlog(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

static inline f16 futrts_exp16(f16 x) {
  return hexp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return hcos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return hsin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tanf(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acosf(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asinf(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atanf(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erff(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rintf(x);
}

static inline f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
static inline int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
static inline f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

static inline int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
static inline int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

static inline f16 fabs16(f16 x) {
  return fabs32(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

static inline bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

static inline bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

static inline f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

static inline f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

static inline f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

static inline f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

static inline f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

static inline f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

static inline f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

static inline f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

static inline f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

static inline f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

static inline int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

static inline int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

static inline f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

static inline f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

static inline float fpconv_f16_f16(f16 x) {
  return x;
}

static inline float fpconv_f16_f32(f16 x) {
  return x;
}

static inline f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

static inline double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
static inline f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
static inline f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                        int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_local((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

inline int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xchg_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                         int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_cmpxchg_i64_local(volatile __local int64_t *p,
                                        int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

inline int64_t atomic_add_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

inline double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline double atomic_fadd_f64_local(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_local((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

inline int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smax_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_smin_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umax_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umin_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_and_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_or_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xor_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

// End of atomics.h



__kernel void mainzisegmap_24124(__global int *global_failure, int64_t dz2080U_16203, __global unsigned char *tape_instrs_mem_26933, __global unsigned char *mem_26937, __global unsigned char *mem_26939, __global unsigned char *mem_26941, __global unsigned char *mem_26943)
{
    #define segmap_group_sizze_24117 (mainzisegmap_group_sizze_24098)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_27054;
    int64_t group_sizze_27057;
    int32_t wave_sizze_27056;
    int32_t group_tid_27055;
    
    local_tid_27054 = get_local_id(0);
    group_sizze_27057 = get_local_size(0);
    wave_sizze_27056 = LOCKSTEP_WIDTH;
    group_tid_27055 = get_group_id(0);
    
    int32_t global_tid_27053 = group_tid_27055 * group_sizze_27057 + local_tid_27054;
    int32_t phys_tid_24124 = global_tid_27053;
    int64_t global_tid_27058 = sext_i32_i64(group_tid_27055) * segmap_group_sizze_24117 + sext_i32_i64(local_tid_27054);
    int64_t slice_27059 = dz2080U_16203;
    int64_t gtid_24123 = global_tid_27058;
    int64_t remnant_27060 = global_tid_27058 - gtid_24123;
    
    if (slt64(gtid_24123, dz2080U_16203)) {
        int32_t x_24125 = ((__global int32_t *) tape_instrs_mem_26933)[gtid_24123];
        int32_t arg_24126 = lshr32(x_24125, 24);
        int32_t u32_arg_24127 = 255 & arg_24126;
        int8_t u32_res_24128 = zext_i32_i8(u32_arg_24127);
        int32_t arg_24129 = lshr32(x_24125, 16);
        int32_t u32_arg_24130 = 255 & arg_24129;
        int8_t u32_res_24131 = zext_i32_i8(u32_arg_24130);
        int32_t arg_24132 = lshr32(x_24125, 8);
        int32_t u32_arg_24133 = 255 & arg_24132;
        int8_t u32_res_24134 = zext_i32_i8(u32_arg_24133);
        int32_t arg_24135 = lshr32(x_24125, 0);
        int32_t u32_arg_24136 = 255 & arg_24135;
        int8_t u32_res_24137 = zext_i32_i8(u32_arg_24136);
        
        ((__global int8_t *) mem_26937)[gtid_24123] = u32_res_24134;
        ((__global int8_t *) mem_26939)[gtid_24123] = u32_res_24137;
        ((__global int8_t *) mem_26941)[gtid_24123] = u32_res_24128;
        ((__global int8_t *) mem_26943)[gtid_24123] = u32_res_24131;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_24117
}
__kernel void mainzisegmap_25000(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t dz2080U_16203, int64_t dz2081U_16204, int64_t tape_slot_count_16222, __global unsigned char *tape_constants_mem_26934, __global unsigned char *mem_26937, __global unsigned char *mem_26939, __global unsigned char *mem_26941, __global unsigned char *mem_26943, __global unsigned char *mem_26959, __global unsigned char *color_27039)
{
    #define segmap_group_sizze_24994 (mainzisegmap_group_sizze_24175)
    #define num_threads_27044 (mainzisegmap_group_sizze_24175 * sdiv_up64((int64_t) 16777216, mainzisegmap_group_sizze_24175))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_27063;
    int64_t group_sizze_27066;
    int32_t wave_sizze_27065;
    int32_t group_tid_27064;
    
    local_tid_27063 = get_local_id(0);
    group_sizze_27066 = get_local_size(0);
    wave_sizze_27065 = LOCKSTEP_WIDTH;
    group_tid_27064 = get_group_id(0);
    
    int32_t global_tid_27062 = group_tid_27064 * group_sizze_27066 + local_tid_27063;
    int32_t phys_tid_25000 = global_tid_27062;
    int64_t global_tid_27067 = sext_i32_i64(group_tid_27064) * segmap_group_sizze_24994 + sext_i32_i64(local_tid_27063);
    int64_t slice_27068 = (int64_t) 256;
    int64_t slice_27069 = (int64_t) 256 * slice_27068;
    int64_t slice_27070 = (int64_t) 256 * slice_27069;
    int64_t gtid_24997 = squot64(global_tid_27067, slice_27069);
    int64_t remnant_27071 = global_tid_27067 - gtid_24997 * slice_27069;
    int64_t gtid_24998 = squot64(remnant_27071, slice_27068);
    int64_t remnant_27072 = remnant_27071 - gtid_24998 * slice_27068;
    int64_t gtid_24999 = remnant_27072;
    int64_t remnant_27073 = remnant_27072 - gtid_24999;
    
    if ((slt64(gtid_24997, (int64_t) 256) && slt64(gtid_24998, (int64_t) 256)) && slt64(gtid_24999, (int64_t) 256)) {
        for (int64_t i_27074 = 0; i_27074 < tape_slot_count_16222; i_27074++) {
            ((__global float *) color_27039)[phys_tid_25000 + i_27074 * num_threads_27044] = 0.0F;
        }
        
        float binop_x_26916 = sitofp_i64_f32(gtid_24997);
        float binop_y_26917 = binop_x_26916 / 256.0F;
        float binop_y_26918 = 20.0F * binop_y_26917;
        float update_elem_26919 = -10.0F + binop_y_26918;
        
        ((__global float *) color_27039)[phys_tid_25000] = update_elem_26919;
        
        float binop_x_26922 = sitofp_i64_f32(gtid_24998);
        float binop_y_26923 = binop_x_26922 / 256.0F;
        float binop_y_26924 = 20.0F * binop_y_26923;
        float update_elem_26925 = -10.0F + binop_y_26924;
        
        ((__global float *) color_27039)[phys_tid_25000 + num_threads_27044] = update_elem_26925;
        
        float binop_x_26928 = sitofp_i64_f32(gtid_24999);
        float binop_y_26929 = binop_x_26928 / 256.0F;
        float binop_y_26930 = 20.0F * binop_y_26929;
        float update_elem_26931 = -10.0F + binop_y_26930;
        
        ((__global float *) color_27039)[phys_tid_25000 + (int64_t) 2 * num_threads_27044] = update_elem_26931;
        ((__global float *) color_27039)[phys_tid_25000 + (int64_t) 3 * num_threads_27044] = 0.0F;
        
        int8_t instr_25012;
        int8_t instr_25014;
        int8_t instr_25015;
        
        for (int64_t i_25010 = 0; i_25010 < dz2080U_16203; i_25010++) {
            instr_25012 = ((__global int8_t *) mem_26937)[i_25010];
            instr_25014 = ((__global int8_t *) mem_26941)[i_25010];
            instr_25015 = ((__global int8_t *) mem_26943)[i_25010];
            
            bool cond_25016 = instr_25014 == (int8_t) 0;
            float lw_val_25017;
            
            if (cond_25016 == 1) {
                int64_t iA_25018 = sext_i8_i64(instr_25012);
                bool x_25019 = sle64((int64_t) 0, iA_25018);
                bool y_25020 = slt64(iA_25018, dz2081U_16204);
                bool bounds_check_25021 = x_25019 && y_25020;
                bool index_certs_25022;
                
                if (!bounds_check_25021) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                            global_failure_args[0] = (int64_t) iA_25018;
                            global_failure_args[1] = (int64_t) dz2081U_16204;
                            ;
                        }
                        return;
                    }
                }
                
                float constant_arg_25023 = ((__global float *) tape_constants_mem_26934)[iA_25018];
                
                lw_val_25017 = constant_arg_25023;
            } else {
                bool cond_25024 = instr_25014 == (int8_t) 1;
                float lw_val_f_res_25025;
                
                if (cond_25024 == 1) {
                    int64_t iA_25026 = sext_i8_i64(instr_25012);
                    bool x_25027 = sle64((int64_t) 0, iA_25026);
                    bool y_25028 = slt64(iA_25026, tape_slot_count_16222);
                    bool bounds_check_25029 = x_25027 && y_25028;
                    bool index_certs_25030;
                    
                    if (!bounds_check_25029) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                                global_failure_args[0] = (int64_t) iA_25026;
                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float sin_arg_25031 = ((__global float *) color_27039)[phys_tid_25000 + iA_25026 * num_threads_27044];
                    float sin_res_25032 = futrts_sin32(sin_arg_25031);
                    
                    lw_val_f_res_25025 = sin_res_25032;
                } else {
                    bool cond_25033 = instr_25014 == (int8_t) 2;
                    float lw_val_f_res_f_res_25034;
                    
                    if (cond_25033 == 1) {
                        int64_t iA_25035 = sext_i8_i64(instr_25012);
                        bool x_25036 = sle64((int64_t) 0, iA_25035);
                        bool y_25037 = slt64(iA_25035, tape_slot_count_16222);
                        bool bounds_check_25038 = x_25036 && y_25037;
                        bool index_certs_25039;
                        
                        if (!bounds_check_25038) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure, -1, 2) == -1) {
                                    global_failure_args[0] = (int64_t) iA_25035;
                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                    ;
                                }
                                return;
                            }
                        }
                        
                        float cos_arg_25040 = ((__global float *) color_27039)[phys_tid_25000 + iA_25035 * num_threads_27044];
                        float cos_res_25041 = futrts_cos32(cos_arg_25040);
                        
                        lw_val_f_res_f_res_25034 = cos_res_25041;
                    } else {
                        bool cond_25042 = instr_25014 == (int8_t) 3;
                        float lw_val_f_res_f_res_f_res_25043;
                        
                        if (cond_25042 == 1) {
                            int64_t iA_25044 = sext_i8_i64(instr_25012);
                            bool x_25045 = sle64((int64_t) 0, iA_25044);
                            bool y_25046 = slt64(iA_25044, tape_slot_count_16222);
                            bool bounds_check_25047 = x_25045 && y_25046;
                            bool index_certs_25048;
                            
                            if (!bounds_check_25047) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 3) == -1) {
                                        global_failure_args[0] = (int64_t) iA_25044;
                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                        ;
                                    }
                                    return;
                                }
                            }
                            
                            float exp_arg_25049 = ((__global float *) color_27039)[phys_tid_25000 + iA_25044 * num_threads_27044];
                            float exp_res_25050 = futrts_exp32(exp_arg_25049);
                            
                            lw_val_f_res_f_res_f_res_25043 = exp_res_25050;
                        } else {
                            bool cond_25051 = instr_25014 == (int8_t) 4;
                            float lw_val_f_res_f_res_f_res_f_res_25052;
                            
                            if (cond_25051 == 1) {
                                int64_t iA_25053 = sext_i8_i64(instr_25012);
                                bool x_25054 = sle64((int64_t) 0, iA_25053);
                                bool y_25055 = slt64(iA_25053, tape_slot_count_16222);
                                bool bounds_check_25056 = x_25054 && y_25055;
                                bool index_certs_25057;
                                
                                if (!bounds_check_25056) {
                                    {
                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 4) == -1) {
                                            global_failure_args[0] = (int64_t) iA_25053;
                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                            ;
                                        }
                                        return;
                                    }
                                }
                                
                                float sqrt_arg_25058 = ((__global float *) color_27039)[phys_tid_25000 + iA_25053 * num_threads_27044];
                                float sqrt_res_25059 = futrts_sqrt32(sqrt_arg_25058);
                                
                                lw_val_f_res_f_res_f_res_f_res_25052 = sqrt_res_25059;
                            } else {
                                bool cond_25060 = instr_25014 == (int8_t) 5;
                                float lw_val_f_res_f_res_f_res_f_res_f_res_25061;
                                
                                if (cond_25060 == 1) {
                                    int64_t iA_25062 = sext_i8_i64(instr_25012);
                                    bool x_25063 = sle64((int64_t) 0, iA_25062);
                                    bool y_25064 = slt64(iA_25062, tape_slot_count_16222);
                                    bool bounds_check_25065 = x_25063 && y_25064;
                                    bool index_certs_25066;
                                    
                                    if (!bounds_check_25065) {
                                        {
                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 5) == -1) {
                                                global_failure_args[0] = (int64_t) iA_25062;
                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                ;
                                            }
                                            return;
                                        }
                                    }
                                    
                                    float neg_arg_25067 = ((__global float *) color_27039)[phys_tid_25000 + iA_25062 * num_threads_27044];
                                    float neg_res_25068 = 0.0F - neg_arg_25067;
                                    
                                    lw_val_f_res_f_res_f_res_f_res_f_res_25061 = neg_res_25068;
                                } else {
                                    int8_t instr_25013 = ((__global int8_t *) mem_26939)[i_25010];
                                    bool cond_25069 = instr_25014 == (int8_t) 6;
                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_25070;
                                    
                                    if (cond_25069 == 1) {
                                        int64_t iB_25071 = sext_i8_i64(instr_25013);
                                        bool x_25072 = sle64((int64_t) 0, iB_25071);
                                        bool y_25073 = slt64(iB_25071, tape_slot_count_16222);
                                        bool bounds_check_25074 = x_25072 && y_25073;
                                        bool index_certs_25075;
                                        
                                        if (!bounds_check_25074) {
                                            {
                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 6) == -1) {
                                                    global_failure_args[0] = (int64_t) iB_25071;
                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                    ;
                                                }
                                                return;
                                            }
                                        }
                                        
                                        float add_arg_25076 = ((__global float *) color_27039)[phys_tid_25000 + iB_25071 * num_threads_27044];
                                        int64_t iA_25077 = sext_i8_i64(instr_25012);
                                        bool x_25078 = sle64((int64_t) 0, iA_25077);
                                        bool y_25079 = slt64(iA_25077, tape_slot_count_16222);
                                        bool bounds_check_25080 = x_25078 && y_25079;
                                        bool index_certs_25081;
                                        
                                        if (!bounds_check_25080) {
                                            {
                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 7) == -1) {
                                                    global_failure_args[0] = (int64_t) iA_25077;
                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                    ;
                                                }
                                                return;
                                            }
                                        }
                                        
                                        float add_arg_25082 = ((__global float *) color_27039)[phys_tid_25000 + iA_25077 * num_threads_27044];
                                        float zp_res_25083 = add_arg_25076 + add_arg_25082;
                                        
                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_25070 = zp_res_25083;
                                    } else {
                                        bool cond_25084 = instr_25014 == (int8_t) 7;
                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25085;
                                        
                                        if (cond_25084 == 1) {
                                            int64_t iB_25086 = sext_i8_i64(instr_25013);
                                            bool x_25087 = sle64((int64_t) 0, iB_25086);
                                            bool y_25088 = slt64(iB_25086, tape_slot_count_16222);
                                            bool bounds_check_25089 = x_25087 && y_25088;
                                            bool index_certs_25090;
                                            
                                            if (!bounds_check_25089) {
                                                {
                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 8) == -1) {
                                                        global_failure_args[0] = (int64_t) iB_25086;
                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                        ;
                                                    }
                                                    return;
                                                }
                                            }
                                            
                                            float sub_arg_25091 = ((__global float *) color_27039)[phys_tid_25000 + iB_25086 * num_threads_27044];
                                            int64_t iA_25092 = sext_i8_i64(instr_25012);
                                            bool x_25093 = sle64((int64_t) 0, iA_25092);
                                            bool y_25094 = slt64(iA_25092, tape_slot_count_16222);
                                            bool bounds_check_25095 = x_25093 && y_25094;
                                            bool index_certs_25096;
                                            
                                            if (!bounds_check_25095) {
                                                {
                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 9) == -1) {
                                                        global_failure_args[0] = (int64_t) iA_25092;
                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                        ;
                                                    }
                                                    return;
                                                }
                                            }
                                            
                                            float sub_arg_25097 = ((__global float *) color_27039)[phys_tid_25000 + iA_25092 * num_threads_27044];
                                            float zm_res_25098 = sub_arg_25097 - sub_arg_25091;
                                            
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25085 = zm_res_25098;
                                        } else {
                                            bool cond_25099 = instr_25014 == (int8_t) 8;
                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25100;
                                            
                                            if (cond_25099 == 1) {
                                                int64_t iB_25101 = sext_i8_i64(instr_25013);
                                                bool x_25102 = sle64((int64_t) 0, iB_25101);
                                                bool y_25103 = slt64(iB_25101, tape_slot_count_16222);
                                                bool bounds_check_25104 = x_25102 && y_25103;
                                                bool index_certs_25105;
                                                
                                                if (!bounds_check_25104) {
                                                    {
                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 10) == -1) {
                                                            global_failure_args[0] = (int64_t) iB_25101;
                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                            ;
                                                        }
                                                        return;
                                                    }
                                                }
                                                
                                                float mul_arg_25106 = ((__global float *) color_27039)[phys_tid_25000 + iB_25101 * num_threads_27044];
                                                int64_t iA_25107 = sext_i8_i64(instr_25012);
                                                bool x_25108 = sle64((int64_t) 0, iA_25107);
                                                bool y_25109 = slt64(iA_25107, tape_slot_count_16222);
                                                bool bounds_check_25110 = x_25108 && y_25109;
                                                bool index_certs_25111;
                                                
                                                if (!bounds_check_25110) {
                                                    {
                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 11) == -1) {
                                                            global_failure_args[0] = (int64_t) iA_25107;
                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                            ;
                                                        }
                                                        return;
                                                    }
                                                }
                                                
                                                float mul_arg_25112 = ((__global float *) color_27039)[phys_tid_25000 + iA_25107 * num_threads_27044];
                                                float zt_res_25113 = mul_arg_25106 * mul_arg_25112;
                                                
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25100 = zt_res_25113;
                                            } else {
                                                bool cond_25114 = instr_25014 == (int8_t) 9;
                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25115;
                                                
                                                if (cond_25114 == 1) {
                                                    int64_t iB_25116 = sext_i8_i64(instr_25013);
                                                    bool x_25117 = sle64((int64_t) 0, iB_25116);
                                                    bool y_25118 = slt64(iB_25116, tape_slot_count_16222);
                                                    bool bounds_check_25119 = x_25117 && y_25118;
                                                    bool index_certs_25120;
                                                    
                                                    if (!bounds_check_25119) {
                                                        {
                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 12) == -1) {
                                                                global_failure_args[0] = (int64_t) iB_25116;
                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                ;
                                                            }
                                                            return;
                                                        }
                                                    }
                                                    
                                                    float div_arg_25121 = ((__global float *) color_27039)[phys_tid_25000 + iB_25116 * num_threads_27044];
                                                    int64_t iA_25122 = sext_i8_i64(instr_25012);
                                                    bool x_25123 = sle64((int64_t) 0, iA_25122);
                                                    bool y_25124 = slt64(iA_25122, tape_slot_count_16222);
                                                    bool bounds_check_25125 = x_25123 && y_25124;
                                                    bool index_certs_25126;
                                                    
                                                    if (!bounds_check_25125) {
                                                        {
                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 13) == -1) {
                                                                global_failure_args[0] = (int64_t) iA_25122;
                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                ;
                                                            }
                                                            return;
                                                        }
                                                    }
                                                    
                                                    float div_arg_25127 = ((__global float *) color_27039)[phys_tid_25000 + iA_25122 * num_threads_27044];
                                                    float zs_res_25128 = div_arg_25127 / div_arg_25121;
                                                    
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25115 = zs_res_25128;
                                                } else {
                                                    bool cond_25129 = instr_25014 == (int8_t) 10;
                                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25130;
                                                    
                                                    if (cond_25129 == 1) {
                                                        int64_t iB_25131 = sext_i8_i64(instr_25013);
                                                        bool x_25132 = sle64((int64_t) 0, iB_25131);
                                                        bool y_25133 = slt64(iB_25131, tape_slot_count_16222);
                                                        bool bounds_check_25134 = x_25132 && y_25133;
                                                        bool index_certs_25135;
                                                        
                                                        if (!bounds_check_25134) {
                                                            {
                                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 14) == -1) {
                                                                    global_failure_args[0] = (int64_t) iB_25131;
                                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                    ;
                                                                }
                                                                return;
                                                            }
                                                        }
                                                        
                                                        float min_arg_25136 = ((__global float *) color_27039)[phys_tid_25000 + iB_25131 * num_threads_27044];
                                                        int64_t iA_25137 = sext_i8_i64(instr_25012);
                                                        bool x_25138 = sle64((int64_t) 0, iA_25137);
                                                        bool y_25139 = slt64(iA_25137, tape_slot_count_16222);
                                                        bool bounds_check_25140 = x_25138 && y_25139;
                                                        bool index_certs_25141;
                                                        
                                                        if (!bounds_check_25140) {
                                                            {
                                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 15) == -1) {
                                                                    global_failure_args[0] = (int64_t) iA_25137;
                                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                    ;
                                                                }
                                                                return;
                                                            }
                                                        }
                                                        
                                                        float min_arg_25142 = ((__global float *) color_27039)[phys_tid_25000 + iA_25137 * num_threads_27044];
                                                        float min_res_25143 = fmin32(min_arg_25136, min_arg_25142);
                                                        
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25130 = min_res_25143;
                                                    } else {
                                                        bool cond_25144 = instr_25014 == (int8_t) 11;
                                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25145;
                                                        
                                                        if (cond_25144 == 1) {
                                                            int64_t iB_25146 = sext_i8_i64(instr_25013);
                                                            bool x_25147 = sle64((int64_t) 0, iB_25146);
                                                            bool y_25148 = slt64(iB_25146, tape_slot_count_16222);
                                                            bool bounds_check_25149 = x_25147 && y_25148;
                                                            bool index_certs_25150;
                                                            
                                                            if (!bounds_check_25149) {
                                                                {
                                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 16) == -1) {
                                                                        global_failure_args[0] = (int64_t) iB_25146;
                                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                        ;
                                                                    }
                                                                    return;
                                                                }
                                                            }
                                                            
                                                            float max_arg_25151 = ((__global float *) color_27039)[phys_tid_25000 + iB_25146 * num_threads_27044];
                                                            int64_t iA_25152 = sext_i8_i64(instr_25012);
                                                            bool x_25153 = sle64((int64_t) 0, iA_25152);
                                                            bool y_25154 = slt64(iA_25152, tape_slot_count_16222);
                                                            bool bounds_check_25155 = x_25153 && y_25154;
                                                            bool index_certs_25156;
                                                            
                                                            if (!bounds_check_25155) {
                                                                {
                                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 17) == -1) {
                                                                        global_failure_args[0] = (int64_t) iA_25152;
                                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                        ;
                                                                    }
                                                                    return;
                                                                }
                                                            }
                                                            
                                                            float max_arg_25157 = ((__global float *) color_27039)[phys_tid_25000 + iA_25152 * num_threads_27044];
                                                            float max_res_25158 = fmax32(max_arg_25151, max_arg_25157);
                                                            
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25145 = max_res_25158;
                                                        } else {
                                                            bool cond_25159 = instr_25014 == (int8_t) 12;
                                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25160;
                                                            
                                                            if (cond_25159 == 1) {
                                                                int64_t iA_25161 = sext_i8_i64(instr_25012);
                                                                bool x_25162 = sle64((int64_t) 0, iA_25161);
                                                                bool y_25163 = slt64(iA_25161, tape_slot_count_16222);
                                                                bool bounds_check_25164 = x_25162 && y_25163;
                                                                bool index_certs_25165;
                                                                
                                                                if (!bounds_check_25164) {
                                                                    {
                                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 18) == -1) {
                                                                            global_failure_args[0] = (int64_t) iA_25161;
                                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                            ;
                                                                        }
                                                                        return;
                                                                    }
                                                                }
                                                                
                                                                float copy_arg_25166 = ((__global float *) color_27039)[phys_tid_25000 + iA_25161 * num_threads_27044];
                                                                
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25160 = copy_arg_25166;
                                                            } else {
                                                                int64_t iO_25167 = sext_i8_i64(instr_25015);
                                                                bool x_25168 = sle64((int64_t) 0, iO_25167);
                                                                bool y_25169 = slt64(iO_25167, tape_slot_count_16222);
                                                                bool bounds_check_25170 = x_25168 && y_25169;
                                                                bool index_certs_25171;
                                                                
                                                                if (!bounds_check_25170) {
                                                                    {
                                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 19) == -1) {
                                                                            global_failure_args[0] = (int64_t) iO_25167;
                                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                            ;
                                                                        }
                                                                        return;
                                                                    }
                                                                }
                                                                
                                                                float copy_arg_25172 = ((__global float *) color_27039)[phys_tid_25000 + iO_25167 * num_threads_27044];
                                                                
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25160 = copy_arg_25172;
                                                            }
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25145 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25160;
                                                        }
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25130 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25145;
                                                    }
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25115 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25130;
                                                }
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25100 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25115;
                                            }
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25085 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25100;
                                        }
                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_25070 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_25085;
                                    }
                                    lw_val_f_res_f_res_f_res_f_res_f_res_25061 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_25070;
                                }
                                lw_val_f_res_f_res_f_res_f_res_25052 = lw_val_f_res_f_res_f_res_f_res_f_res_25061;
                            }
                            lw_val_f_res_f_res_f_res_25043 = lw_val_f_res_f_res_f_res_f_res_25052;
                        }
                        lw_val_f_res_f_res_25034 = lw_val_f_res_f_res_f_res_25043;
                    }
                    lw_val_f_res_25025 = lw_val_f_res_f_res_25034;
                }
                lw_val_25017 = lw_val_f_res_25025;
            }
            
            int64_t iO_25173 = sext_i8_i64(instr_25015);
            bool x_25174 = sle64((int64_t) 0, iO_25173);
            bool y_25175 = slt64(iO_25173, tape_slot_count_16222);
            bool bounds_check_25176 = x_25174 && y_25175;
            bool index_certs_25177;
            
            if (!bounds_check_25176) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 20) == -1) {
                        global_failure_args[0] = (int64_t) iO_25173;
                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                        ;
                    }
                    return;
                }
            }
            ((__global float *) color_27039)[phys_tid_25000 + iO_25173 * num_threads_27044] = lw_val_25017;
        }
        
        float eval_res_25179 = ((__global float *) color_27039)[phys_tid_25000];
        bool defunc_0_f_res_25180 = eval_res_25179 <= 0.0F;
        
        ((__global bool *) mem_26959)[gtid_24997 * (int64_t) 65536 + gtid_24998 * (int64_t) 256 + gtid_24999] = defunc_0_f_res_25180;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_24994
    #undef num_threads_27044
}
__kernel void mainzisegmap_26336(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t dz2080U_16203, int64_t dz2081U_16204, int64_t pixel_width_16205, int64_t pixel_height_16206, float cam_pos_x_16207, float cam_pos_y_16208, float cam_pos_zz_16209, float cam_forward_x_16210, float cam_forward_y_16211, float cam_forward_zz_16212, float cam_right_x_16213, float cam_right_y_16214, float cam_right_zz_16215, float cam_up_x_16216, float cam_up_y_16217, float cam_up_zz_16218, int64_t tape_slot_count_16222, float screen_world_sizze_x_22918, float i64_res_22919, float i64_res_22920, float screen_world_sizze_y_22922, float defunc_1_f_res_23467, float defunc_1_f_res_23468, float defunc_1_f_res_23469, float defunc_1_f_res_23485, float defunc_1_f_res_23486, float defunc_1_f_res_23487, int64_t num_threads_27046, __global unsigned char *tape_constants_mem_26934, __global unsigned char *mem_26937, __global unsigned char *mem_26939, __global unsigned char *mem_26941, __global unsigned char *mem_26943, __global unsigned char *mem_26959, __global unsigned char *mem_27016, __global unsigned char *color_27040, __global unsigned char *color_27041, __global unsigned char *color_27042, __global unsigned char *color_27043)
{
    #define segmap_group_sizze_26331 (mainzisegmap_group_sizze_25199)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_27078;
    int64_t group_sizze_27081;
    int32_t wave_sizze_27080;
    int32_t group_tid_27079;
    
    local_tid_27078 = get_local_id(0);
    group_sizze_27081 = get_local_size(0);
    wave_sizze_27080 = LOCKSTEP_WIDTH;
    group_tid_27079 = get_group_id(0);
    
    int32_t global_tid_27077 = group_tid_27079 * group_sizze_27081 + local_tid_27078;
    int32_t phys_tid_26336 = global_tid_27077;
    int64_t global_tid_27082 = sext_i32_i64(group_tid_27079) * segmap_group_sizze_26331 + sext_i32_i64(local_tid_27078);
    int64_t slice_27083 = pixel_height_16206;
    int64_t slice_27084 = pixel_width_16205 * slice_27083;
    int64_t gtid_26334 = squot64(global_tid_27082, slice_27083);
    int64_t remnant_27085 = global_tid_27082 - gtid_26334 * slice_27083;
    int64_t gtid_26335 = remnant_27085;
    int64_t remnant_27086 = remnant_27085 - gtid_26335;
    
    if (slt64(gtid_26334, pixel_width_16205) && slt64(gtid_26335, pixel_height_16206)) {
        float binop_x_26907 = sitofp_i64_f32(gtid_26334);
        float binop_y_26908 = binop_x_26907 / i64_res_22920;
        float binop_x_26909 = 2.0F * binop_y_26908;
        float binop_y_26910 = binop_x_26909 - 1.0F;
        float binop_y_26911 = screen_world_sizze_x_22918 * binop_y_26910;
        float binop_y_26912 = cam_right_x_16213 * binop_y_26911;
        float index_primexp_26913 = cam_forward_x_16210 + binop_y_26912;
        float binop_y_26903 = cam_right_y_16214 * binop_y_26911;
        float index_primexp_26904 = cam_forward_y_16211 + binop_y_26903;
        float binop_y_26894 = cam_right_zz_16215 * binop_y_26911;
        float index_primexp_26895 = cam_forward_zz_16212 + binop_y_26894;
        float i64_res_26341 = sitofp_i64_f32(gtid_26335);
        float arg_26342 = i64_res_26341 / i64_res_22919;
        float arg_26343 = 2.0F * arg_26342;
        float dy_26344 = arg_26343 - 1.0F;
        float scale_arg_26345 = screen_world_sizze_y_22922 * dy_26344;
        float zt_res_26346 = cam_up_x_16216 * scale_arg_26345;
        float zt_res_26347 = cam_up_y_16217 * scale_arg_26345;
        float zt_res_26348 = cam_up_zz_16218 * scale_arg_26345;
        float defunc_1_f_res_26349 = zt_res_26346 + index_primexp_26913;
        float defunc_1_f_res_26350 = zt_res_26347 + index_primexp_26904;
        float defunc_1_f_res_26351 = zt_res_26348 + index_primexp_26895;
        float zt_res_26352 = defunc_1_f_res_26351 * defunc_1_f_res_26351;
        float zt_res_26353 = defunc_1_f_res_26350 * defunc_1_f_res_26350;
        float zt_res_26354 = defunc_1_f_res_26349 * defunc_1_f_res_26349;
        float zp_res_26355 = zt_res_26353 + zt_res_26354;
        float zp_res_26356 = zt_res_26352 + zp_res_26355;
        float defunc_0_g_res_26357 = futrts_sqrt32(zp_res_26356);
        float zs_res_26358 = 1.0F / defunc_0_g_res_26357;
        float zt_res_26359 = defunc_1_f_res_26349 * zs_res_26358;
        float zt_res_26360 = defunc_1_f_res_26350 * zs_res_26358;
        float zt_res_26361 = defunc_1_f_res_26351 * zs_res_26358;
        float defunc_1_f_res_26362 = defunc_1_f_res_23467 / zt_res_26359;
        float defunc_1_f_res_26363 = defunc_1_f_res_23468 / zt_res_26360;
        float defunc_1_f_res_26364 = defunc_1_f_res_23469 / zt_res_26361;
        float defunc_1_f_res_26365 = defunc_1_f_res_23485 / zt_res_26359;
        float defunc_1_f_res_26366 = defunc_1_f_res_23486 / zt_res_26360;
        float defunc_1_f_res_26367 = defunc_1_f_res_23487 / zt_res_26361;
        bool cond_26368 = 0.0F <= zt_res_26359;
        float raygrid_intersect_res_26369;
        
        if (cond_26368 == 1) {
            raygrid_intersect_res_26369 = defunc_1_f_res_26362;
        } else {
            raygrid_intersect_res_26369 = defunc_1_f_res_26365;
        }
        
        bool cond_26370 = 0.0F <= zt_res_26360;
        float raygrid_intersect_res_26371;
        
        if (cond_26370 == 1) {
            raygrid_intersect_res_26371 = defunc_1_f_res_26363;
        } else {
            raygrid_intersect_res_26371 = defunc_1_f_res_26366;
        }
        
        bool cond_26372 = 0.0F <= zt_res_26361;
        float raygrid_intersect_res_26373;
        
        if (cond_26372 == 1) {
            raygrid_intersect_res_26373 = defunc_1_f_res_26364;
        } else {
            raygrid_intersect_res_26373 = defunc_1_f_res_26367;
        }
        
        float raygrid_intersect_res_26374;
        
        if (cond_26368 == 1) {
            raygrid_intersect_res_26374 = defunc_1_f_res_26365;
        } else {
            raygrid_intersect_res_26374 = defunc_1_f_res_26362;
        }
        
        float raygrid_intersect_res_26375;
        
        if (cond_26370 == 1) {
            raygrid_intersect_res_26375 = defunc_1_f_res_26366;
        } else {
            raygrid_intersect_res_26375 = defunc_1_f_res_26363;
        }
        
        float raygrid_intersect_res_26376;
        
        if (cond_26372 == 1) {
            raygrid_intersect_res_26376 = defunc_1_f_res_26367;
        } else {
            raygrid_intersect_res_26376 = defunc_1_f_res_26364;
        }
        
        float max_res_26377 = fmax32(raygrid_intersect_res_26371, raygrid_intersect_res_26373);
        float max_res_26378 = fmax32(raygrid_intersect_res_26369, max_res_26377);
        float min_res_26379 = fmin32(raygrid_intersect_res_26375, raygrid_intersect_res_26376);
        float min_res_26380 = fmin32(raygrid_intersect_res_26374, min_res_26379);
        bool cond_26381 = max_res_26378 <= min_res_26380;
        bool hit_t_res_26382 = 0.0F <= min_res_26380;
        bool x_26383 = cond_26381 && hit_t_res_26382;
        bool cond_26384 = !x_26383;
        float max_res_26387 = fmax32(0.0F, max_res_26378);
        float arg_26388 = 1.0e-6F + max_res_26387;
        bool loop_cond_26389 = arg_26388 < min_res_26380;
        int8_t hit_26392;
        float hit_26393;
        
        if (x_26383 == 1) {
            bool x_27026;
            float x_27027;
            int8_t x_27028;
            float x_27029;
            bool loop_while_26394;
            float t_curr_26395;
            int8_t nameless_26396;
            float nameless_26397;
            
            loop_while_26394 = loop_cond_26389;
            t_curr_26395 = max_res_26387;
            nameless_26396 = (int8_t) 1;
            nameless_26397 = 0.0F;
            while (loop_while_26394) {
                float ray_eval_arg_26398 = 1.0e-6F + t_curr_26395;
                float zt_res_26399 = zt_res_26359 * ray_eval_arg_26398;
                float zt_res_26400 = zt_res_26360 * ray_eval_arg_26398;
                float zt_res_26401 = zt_res_26361 * ray_eval_arg_26398;
                float defunc_1_f_res_26402 = cam_pos_x_16207 + zt_res_26399;
                float defunc_1_f_res_26403 = cam_pos_y_16208 + zt_res_26400;
                float defunc_1_f_res_26404 = cam_pos_zz_16209 + zt_res_26401;
                float defunc_1_f_res_26405 = defunc_1_f_res_26402 - -10.0F;
                float defunc_1_f_res_26406 = defunc_1_f_res_26403 - -10.0F;
                float defunc_1_f_res_26407 = defunc_1_f_res_26404 - -10.0F;
                float zt_res_26408 = 12.8F * defunc_1_f_res_26405;
                float zt_res_26409 = 12.8F * defunc_1_f_res_26406;
                float zt_res_26410 = 12.8F * defunc_1_f_res_26407;
                float defunc_0_f_res_26411 = futrts_floor32(zt_res_26408);
                int64_t defunc_0_f_res_26412 = fptosi_f32_i64(defunc_0_f_res_26411);
                float defunc_0_f_res_26413 = futrts_floor32(zt_res_26409);
                int64_t defunc_0_f_res_26414 = fptosi_f32_i64(defunc_0_f_res_26413);
                float defunc_0_f_res_26415 = futrts_floor32(zt_res_26410);
                int64_t defunc_0_f_res_26416 = fptosi_f32_i64(defunc_0_f_res_26415);
                bool cond_26417 = sle64((int64_t) 0, defunc_0_f_res_26412);
                bool cond_t_res_26418 = slt64(defunc_0_f_res_26412, (int64_t) 256);
                bool x_26419 = cond_26417 && cond_t_res_26418;
                bool cond_t_res_26420 = sle64((int64_t) 0, defunc_0_f_res_26414);
                bool x_26421 = x_26419 && cond_t_res_26420;
                bool cond_t_res_26422 = slt64(defunc_0_f_res_26414, (int64_t) 256);
                bool x_26423 = x_26421 && cond_t_res_26422;
                bool cond_t_res_26424 = sle64((int64_t) 0, defunc_0_f_res_26416);
                bool x_26425 = x_26423 && cond_t_res_26424;
                bool cond_t_res_26426 = slt64(defunc_0_f_res_26416, (int64_t) 256);
                bool x_26427 = x_26425 && cond_t_res_26426;
                bool cond_26428;
                
                if (x_26427 == 1) {
                    bool bounds_check_26429 = cond_t_res_26420 && cond_t_res_26422;
                    bool bounds_check_26430 = cond_t_res_26424 && cond_t_res_26426;
                    bool y_26431 = x_26419 && bounds_check_26430;
                    bool index_ok_26432 = bounds_check_26429 && y_26431;
                    bool index_certs_26433;
                    
                    if (!index_ok_26432) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 21) == -1) {
                                global_failure_args[0] = (int64_t) defunc_0_f_res_26412;
                                global_failure_args[1] = (int64_t) defunc_0_f_res_26414;
                                global_failure_args[2] = (int64_t) defunc_0_f_res_26416;
                                global_failure_args[3] = (int64_t) (int64_t) 256;
                                global_failure_args[4] = (int64_t) (int64_t) 256;
                                global_failure_args[5] = (int64_t) (int64_t) 256;
                                ;
                            }
                            return;
                        }
                    }
                    
                    bool cond_t_res_26434 = ((__global bool *) mem_26959)[defunc_0_f_res_26412 * (int64_t) 65536 + defunc_0_f_res_26414 * (int64_t) 256 + defunc_0_f_res_26416];
                    
                    cond_26428 = cond_t_res_26434;
                } else {
                    cond_26428 = 0;
                }
                
                bool cond_neg_26435 = !cond_26428;
                int8_t loopres_26436 = btoi_bool_i8(cond_neg_26435);
                float loopres_26437;
                
                if (cond_26428 == 1) {
                    loopres_26437 = t_curr_26395;
                } else {
                    loopres_26437 = 0.0F;
                }
                
                float loopres_26438;
                
                if (cond_26428 == 1) {
                    loopres_26438 = min_res_26380;
                } else {
                    float i64_res_26439 = sitofp_i64_f32(defunc_0_f_res_26412);
                    float arg_26440;
                    
                    if (cond_26368 == 1) {
                        arg_26440 = 1.0F;
                    } else {
                        arg_26440 = 0.0F;
                    }
                    
                    float arg_26441 = i64_res_26439 + arg_26440;
                    float arg_26442 = arg_26441 - zt_res_26408;
                    float arg_26443 = 7.8125e-2F * arg_26442;
                    float arg_26444 = arg_26443 / zt_res_26359;
                    float loopres_f_res_26445 = ray_eval_arg_26398 + arg_26444;
                    float i64_res_26446 = sitofp_i64_f32(defunc_0_f_res_26414);
                    float arg_26447;
                    
                    if (cond_26370 == 1) {
                        arg_26447 = 1.0F;
                    } else {
                        arg_26447 = 0.0F;
                    }
                    
                    float arg_26448 = i64_res_26446 + arg_26447;
                    float arg_26449 = arg_26448 - zt_res_26409;
                    float arg_26450 = 7.8125e-2F * arg_26449;
                    float arg_26451 = arg_26450 / zt_res_26360;
                    float loopres_f_res_26452 = ray_eval_arg_26398 + arg_26451;
                    float i64_res_26453 = sitofp_i64_f32(defunc_0_f_res_26416);
                    float arg_26454;
                    
                    if (cond_26372 == 1) {
                        arg_26454 = 1.0F;
                    } else {
                        arg_26454 = 0.0F;
                    }
                    
                    float arg_26455 = i64_res_26453 + arg_26454;
                    float arg_26456 = arg_26455 - zt_res_26410;
                    float arg_26457 = 7.8125e-2F * arg_26456;
                    float arg_26458 = arg_26457 / zt_res_26361;
                    float loopres_f_res_26459 = ray_eval_arg_26398 + arg_26458;
                    float min_res_26460 = fmin32(loopres_f_res_26452, loopres_f_res_26459);
                    float min_res_26461 = fmin32(loopres_f_res_26445, min_res_26460);
                    
                    loopres_26438 = min_res_26461;
                }
                
                float arg_26462 = 1.0e-6F + loopres_26438;
                bool loop_cond_26463 = arg_26462 < min_res_26380;
                bool loop_while_tmp_27087 = loop_cond_26463;
                float t_curr_tmp_27088 = loopres_26438;
                int8_t nameless_tmp_27089 = loopres_26436;
                float nameless_tmp_27090 = loopres_26437;
                
                loop_while_26394 = loop_while_tmp_27087;
                t_curr_26395 = t_curr_tmp_27088;
                nameless_26396 = nameless_tmp_27089;
                nameless_26397 = nameless_tmp_27090;
            }
            x_27026 = loop_while_26394;
            x_27027 = t_curr_26395;
            x_27028 = nameless_26396;
            x_27029 = nameless_26397;
            hit_26392 = x_27028;
            hit_26393 = x_27029;
        } else {
            hit_26392 = (int8_t) 0;
            hit_26393 = 0.0F;
        }
        
        int8_t raytrace_res_26385;
        
        if (cond_26384 == 1) {
            raytrace_res_26385 = (int8_t) 1;
        } else {
            raytrace_res_26385 = hit_26392;
        }
        
        float raytrace_res_26386;
        
        if (cond_26384 == 1) {
            raytrace_res_26386 = 0.0F;
        } else {
            raytrace_res_26386 = hit_26393;
        }
        
        int32_t shade_res_26464;
        
        if (raytrace_res_26385 == (int8_t) 1) {
            shade_res_26464 = -16777216;
        } else {
            float zt_res_26465 = zt_res_26359 * raytrace_res_26386;
            float zt_res_26466 = zt_res_26360 * raytrace_res_26386;
            float zt_res_26467 = zt_res_26361 * raytrace_res_26386;
            float defunc_1_f_res_26468 = cam_pos_x_16207 + zt_res_26465;
            float defunc_1_f_res_26469 = cam_pos_y_16208 + zt_res_26466;
            float defunc_1_f_res_26470 = cam_pos_zz_16209 + zt_res_26467;
            
            for (int64_t i_27091 = 0; i_27091 < tape_slot_count_16222; i_27091++) {
                ((__global float *) color_27043)[phys_tid_26336 + i_27091 * num_threads_27046] = 0.0F;
            }
            for (int64_t i_27092 = 0; i_27092 < tape_slot_count_16222; i_27092++) {
                ((__global float *) color_27042)[phys_tid_26336 + i_27092 * num_threads_27046] = 0.0F;
            }
            for (int64_t i_27093 = 0; i_27093 < tape_slot_count_16222; i_27093++) {
                ((__global float *) color_27041)[phys_tid_26336 + i_27093 * num_threads_27046] = 0.0F;
            }
            for (int64_t i_27094 = 0; i_27094 < tape_slot_count_16222; i_27094++) {
                ((__global float *) color_27040)[phys_tid_26336 + i_27094 * num_threads_27046] = 0.0F;
            }
            
            bool y_26475 = slt64((int64_t) 0, tape_slot_count_16222);
            bool index_certs_26476;
            
            if (!y_26475) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 22) == -1) {
                        global_failure_args[0] = (int64_t) (int64_t) 0;
                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                        ;
                    }
                    return;
                }
            }
            ((__global float *) color_27043)[phys_tid_26336] = 1.0F;
            ((__global float *) color_27042)[phys_tid_26336] = 0.0F;
            ((__global float *) color_27041)[phys_tid_26336] = 0.0F;
            ((__global float *) color_27040)[phys_tid_26336] = defunc_1_f_res_26468;
            
            bool y_26481 = slt64((int64_t) 1, tape_slot_count_16222);
            bool index_certs_26482;
            
            if (!y_26481) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 23) == -1) {
                        global_failure_args[0] = (int64_t) (int64_t) 1;
                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                        ;
                    }
                    return;
                }
            }
            ((__global float *) color_27043)[phys_tid_26336 + num_threads_27046] = 0.0F;
            ((__global float *) color_27042)[phys_tid_26336 + num_threads_27046] = 1.0F;
            ((__global float *) color_27041)[phys_tid_26336 + num_threads_27046] = 0.0F;
            ((__global float *) color_27040)[phys_tid_26336 + num_threads_27046] = defunc_1_f_res_26469;
            
            bool y_26487 = slt64((int64_t) 2, tape_slot_count_16222);
            bool index_certs_26488;
            
            if (!y_26487) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 24) == -1) {
                        global_failure_args[0] = (int64_t) (int64_t) 2;
                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                        ;
                    }
                    return;
                }
            }
            ((__global float *) color_27043)[phys_tid_26336 + (int64_t) 2 * num_threads_27046] = 0.0F;
            ((__global float *) color_27042)[phys_tid_26336 + (int64_t) 2 * num_threads_27046] = 0.0F;
            ((__global float *) color_27041)[phys_tid_26336 + (int64_t) 2 * num_threads_27046] = 1.0F;
            ((__global float *) color_27040)[phys_tid_26336 + (int64_t) 2 * num_threads_27046] = defunc_1_f_res_26470;
            
            bool y_26493 = slt64((int64_t) 3, tape_slot_count_16222);
            bool index_certs_26494;
            
            if (!y_26493) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 25) == -1) {
                        global_failure_args[0] = (int64_t) (int64_t) 3;
                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                        ;
                    }
                    return;
                }
            }
            ((__global float *) color_27043)[phys_tid_26336 + (int64_t) 3 * num_threads_27046] = 0.0F;
            ((__global float *) color_27042)[phys_tid_26336 + (int64_t) 3 * num_threads_27046] = 0.0F;
            ((__global float *) color_27041)[phys_tid_26336 + (int64_t) 3 * num_threads_27046] = 0.0F;
            ((__global float *) color_27040)[phys_tid_26336 + (int64_t) 3 * num_threads_27046] = 0.0F;
            
            int8_t instr_26508;
            int8_t instr_26510;
            int8_t instr_26511;
            
            for (int64_t i_26503 = 0; i_26503 < dz2080U_16203; i_26503++) {
                instr_26508 = ((__global int8_t *) mem_26937)[i_26503];
                instr_26510 = ((__global int8_t *) mem_26941)[i_26503];
                instr_26511 = ((__global int8_t *) mem_26943)[i_26503];
                
                bool cond_26512 = instr_26510 == (int8_t) 0;
                float lw_val_26513;
                float lw_val_26514;
                float lw_val_26515;
                float lw_val_26516;
                
                if (cond_26512 == 1) {
                    int64_t iA_26517 = sext_i8_i64(instr_26508);
                    bool x_26518 = sle64((int64_t) 0, iA_26517);
                    bool y_26519 = slt64(iA_26517, dz2081U_16204);
                    bool bounds_check_26520 = x_26518 && y_26519;
                    bool index_certs_26521;
                    
                    if (!bounds_check_26520) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 26) == -1) {
                                global_failure_args[0] = (int64_t) iA_26517;
                                global_failure_args[1] = (int64_t) dz2081U_16204;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float constant_arg_26522 = ((__global float *) tape_constants_mem_26934)[iA_26517];
                    
                    lw_val_26513 = 0.0F;
                    lw_val_26514 = 0.0F;
                    lw_val_26515 = 0.0F;
                    lw_val_26516 = constant_arg_26522;
                } else {
                    bool cond_26523 = instr_26510 == (int8_t) 1;
                    float lw_val_f_res_26524;
                    float lw_val_f_res_26525;
                    float lw_val_f_res_26526;
                    float lw_val_f_res_26527;
                    
                    if (cond_26523 == 1) {
                        int64_t iA_26528 = sext_i8_i64(instr_26508);
                        bool x_26529 = sle64((int64_t) 0, iA_26528);
                        bool y_26530 = slt64(iA_26528, tape_slot_count_16222);
                        bool bounds_check_26531 = x_26529 && y_26530;
                        bool index_certs_26532;
                        
                        if (!bounds_check_26531) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure, -1, 27) == -1) {
                                    global_failure_args[0] = (int64_t) iA_26528;
                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                    ;
                                }
                                return;
                            }
                        }
                        
                        float sin_arg_26533 = ((__global float *) color_27043)[phys_tid_26336 + iA_26528 * num_threads_27046];
                        float sin_arg_26534 = ((__global float *) color_27042)[phys_tid_26336 + iA_26528 * num_threads_27046];
                        float sin_arg_26535 = ((__global float *) color_27041)[phys_tid_26336 + iA_26528 * num_threads_27046];
                        float sin_arg_26536 = ((__global float *) color_27040)[phys_tid_26336 + iA_26528 * num_threads_27046];
                        float sin_res_26537 = futrts_sin32(sin_arg_26536);
                        float cos_res_26538 = futrts_cos32(sin_arg_26536);
                        float sin_res_26539 = sin_arg_26533 * cos_res_26538;
                        float sin_res_26540 = sin_arg_26534 * cos_res_26538;
                        float sin_res_26541 = sin_arg_26535 * cos_res_26538;
                        
                        lw_val_f_res_26524 = sin_res_26539;
                        lw_val_f_res_26525 = sin_res_26540;
                        lw_val_f_res_26526 = sin_res_26541;
                        lw_val_f_res_26527 = sin_res_26537;
                    } else {
                        bool cond_26542 = instr_26510 == (int8_t) 2;
                        float lw_val_f_res_f_res_26543;
                        float lw_val_f_res_f_res_26544;
                        float lw_val_f_res_f_res_26545;
                        float lw_val_f_res_f_res_26546;
                        
                        if (cond_26542 == 1) {
                            int64_t iA_26547 = sext_i8_i64(instr_26508);
                            bool x_26548 = sle64((int64_t) 0, iA_26547);
                            bool y_26549 = slt64(iA_26547, tape_slot_count_16222);
                            bool bounds_check_26550 = x_26548 && y_26549;
                            bool index_certs_26551;
                            
                            if (!bounds_check_26550) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 28) == -1) {
                                        global_failure_args[0] = (int64_t) iA_26547;
                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                        ;
                                    }
                                    return;
                                }
                            }
                            
                            float cos_arg_26552 = ((__global float *) color_27043)[phys_tid_26336 + iA_26547 * num_threads_27046];
                            float cos_arg_26553 = ((__global float *) color_27042)[phys_tid_26336 + iA_26547 * num_threads_27046];
                            float cos_arg_26554 = ((__global float *) color_27041)[phys_tid_26336 + iA_26547 * num_threads_27046];
                            float cos_arg_26555 = ((__global float *) color_27040)[phys_tid_26336 + iA_26547 * num_threads_27046];
                            float cos_res_26556 = futrts_cos32(cos_arg_26555);
                            float arg_26557 = 0.0F - cos_arg_26552;
                            float sin_res_26558 = futrts_sin32(cos_arg_26555);
                            float cos_res_26559 = arg_26557 * sin_res_26558;
                            float arg_26560 = 0.0F - cos_arg_26553;
                            float cos_res_26561 = sin_res_26558 * arg_26560;
                            float arg_26562 = 0.0F - cos_arg_26554;
                            float cos_res_26563 = sin_res_26558 * arg_26562;
                            
                            lw_val_f_res_f_res_26543 = cos_res_26559;
                            lw_val_f_res_f_res_26544 = cos_res_26561;
                            lw_val_f_res_f_res_26545 = cos_res_26563;
                            lw_val_f_res_f_res_26546 = cos_res_26556;
                        } else {
                            bool cond_26564 = instr_26510 == (int8_t) 3;
                            float lw_val_f_res_f_res_f_res_26565;
                            float lw_val_f_res_f_res_f_res_26566;
                            float lw_val_f_res_f_res_f_res_26567;
                            float lw_val_f_res_f_res_f_res_26568;
                            
                            if (cond_26564 == 1) {
                                int64_t iA_26569 = sext_i8_i64(instr_26508);
                                bool x_26570 = sle64((int64_t) 0, iA_26569);
                                bool y_26571 = slt64(iA_26569, tape_slot_count_16222);
                                bool bounds_check_26572 = x_26570 && y_26571;
                                bool index_certs_26573;
                                
                                if (!bounds_check_26572) {
                                    {
                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 29) == -1) {
                                            global_failure_args[0] = (int64_t) iA_26569;
                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                            ;
                                        }
                                        return;
                                    }
                                }
                                
                                float exp_arg_26574 = ((__global float *) color_27043)[phys_tid_26336 + iA_26569 * num_threads_27046];
                                float exp_arg_26575 = ((__global float *) color_27042)[phys_tid_26336 + iA_26569 * num_threads_27046];
                                float exp_arg_26576 = ((__global float *) color_27041)[phys_tid_26336 + iA_26569 * num_threads_27046];
                                float exp_arg_26577 = ((__global float *) color_27040)[phys_tid_26336 + iA_26569 * num_threads_27046];
                                float exp_res_26578 = futrts_exp32(exp_arg_26577);
                                float exp_res_26579 = exp_arg_26574 * exp_res_26578;
                                float exp_res_26580 = exp_arg_26575 * exp_res_26578;
                                float exp_res_26581 = exp_arg_26576 * exp_res_26578;
                                
                                lw_val_f_res_f_res_f_res_26565 = exp_res_26579;
                                lw_val_f_res_f_res_f_res_26566 = exp_res_26580;
                                lw_val_f_res_f_res_f_res_26567 = exp_res_26581;
                                lw_val_f_res_f_res_f_res_26568 = exp_res_26578;
                            } else {
                                bool cond_26582 = instr_26510 == (int8_t) 4;
                                float lw_val_f_res_f_res_f_res_f_res_26583;
                                float lw_val_f_res_f_res_f_res_f_res_26584;
                                float lw_val_f_res_f_res_f_res_f_res_26585;
                                float lw_val_f_res_f_res_f_res_f_res_26586;
                                
                                if (cond_26582 == 1) {
                                    int64_t iA_26587 = sext_i8_i64(instr_26508);
                                    bool x_26588 = sle64((int64_t) 0, iA_26587);
                                    bool y_26589 = slt64(iA_26587, tape_slot_count_16222);
                                    bool bounds_check_26590 = x_26588 && y_26589;
                                    bool index_certs_26591;
                                    
                                    if (!bounds_check_26590) {
                                        {
                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 30) == -1) {
                                                global_failure_args[0] = (int64_t) iA_26587;
                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                ;
                                            }
                                            return;
                                        }
                                    }
                                    
                                    float sqrt_arg_26592 = ((__global float *) color_27043)[phys_tid_26336 + iA_26587 * num_threads_27046];
                                    float sqrt_arg_26593 = ((__global float *) color_27042)[phys_tid_26336 + iA_26587 * num_threads_27046];
                                    float sqrt_arg_26594 = ((__global float *) color_27041)[phys_tid_26336 + iA_26587 * num_threads_27046];
                                    float sqrt_arg_26595 = ((__global float *) color_27040)[phys_tid_26336 + iA_26587 * num_threads_27046];
                                    float sqrt_res_26596 = futrts_sqrt32(sqrt_arg_26595);
                                    float arg_26597 = 2.0F * sqrt_res_26596;
                                    float sqrt_res_26598 = sqrt_arg_26592 / arg_26597;
                                    float sqrt_res_26599 = sqrt_arg_26593 / arg_26597;
                                    float sqrt_res_26600 = sqrt_arg_26594 / arg_26597;
                                    
                                    lw_val_f_res_f_res_f_res_f_res_26583 = sqrt_res_26598;
                                    lw_val_f_res_f_res_f_res_f_res_26584 = sqrt_res_26599;
                                    lw_val_f_res_f_res_f_res_f_res_26585 = sqrt_res_26600;
                                    lw_val_f_res_f_res_f_res_f_res_26586 = sqrt_res_26596;
                                } else {
                                    bool cond_26601 = instr_26510 == (int8_t) 5;
                                    float lw_val_f_res_f_res_f_res_f_res_f_res_26602;
                                    float lw_val_f_res_f_res_f_res_f_res_f_res_26603;
                                    float lw_val_f_res_f_res_f_res_f_res_f_res_26604;
                                    float lw_val_f_res_f_res_f_res_f_res_f_res_26605;
                                    
                                    if (cond_26601 == 1) {
                                        int64_t iA_26606 = sext_i8_i64(instr_26508);
                                        bool x_26607 = sle64((int64_t) 0, iA_26606);
                                        bool y_26608 = slt64(iA_26606, tape_slot_count_16222);
                                        bool bounds_check_26609 = x_26607 && y_26608;
                                        bool index_certs_26610;
                                        
                                        if (!bounds_check_26609) {
                                            {
                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 31) == -1) {
                                                    global_failure_args[0] = (int64_t) iA_26606;
                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                    ;
                                                }
                                                return;
                                            }
                                        }
                                        
                                        float neg_arg_26611 = ((__global float *) color_27043)[phys_tid_26336 + iA_26606 * num_threads_27046];
                                        float neg_arg_26612 = ((__global float *) color_27042)[phys_tid_26336 + iA_26606 * num_threads_27046];
                                        float neg_arg_26613 = ((__global float *) color_27041)[phys_tid_26336 + iA_26606 * num_threads_27046];
                                        float neg_arg_26614 = ((__global float *) color_27040)[phys_tid_26336 + iA_26606 * num_threads_27046];
                                        float neg_res_26615 = 0.0F - neg_arg_26614;
                                        float neg_res_26616 = 0.0F - neg_arg_26611;
                                        float neg_res_26617 = 0.0F - neg_arg_26612;
                                        float neg_res_26618 = 0.0F - neg_arg_26613;
                                        
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26602 = neg_res_26616;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26603 = neg_res_26617;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26604 = neg_res_26618;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26605 = neg_res_26615;
                                    } else {
                                        int8_t instr_26509 = ((__global int8_t *) mem_26939)[i_26503];
                                        bool cond_26619 = instr_26510 == (int8_t) 6;
                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26620;
                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26621;
                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26622;
                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26623;
                                        
                                        if (cond_26619 == 1) {
                                            int64_t iB_26624 = sext_i8_i64(instr_26509);
                                            bool x_26625 = sle64((int64_t) 0, iB_26624);
                                            bool y_26626 = slt64(iB_26624, tape_slot_count_16222);
                                            bool bounds_check_26627 = x_26625 && y_26626;
                                            bool index_certs_26628;
                                            
                                            if (!bounds_check_26627) {
                                                {
                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 32) == -1) {
                                                        global_failure_args[0] = (int64_t) iB_26624;
                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                        ;
                                                    }
                                                    return;
                                                }
                                            }
                                            
                                            float add_arg_26629 = ((__global float *) color_27043)[phys_tid_26336 + iB_26624 * num_threads_27046];
                                            float add_arg_26630 = ((__global float *) color_27042)[phys_tid_26336 + iB_26624 * num_threads_27046];
                                            float add_arg_26631 = ((__global float *) color_27041)[phys_tid_26336 + iB_26624 * num_threads_27046];
                                            float add_arg_26632 = ((__global float *) color_27040)[phys_tid_26336 + iB_26624 * num_threads_27046];
                                            int64_t iA_26633 = sext_i8_i64(instr_26508);
                                            bool x_26634 = sle64((int64_t) 0, iA_26633);
                                            bool y_26635 = slt64(iA_26633, tape_slot_count_16222);
                                            bool bounds_check_26636 = x_26634 && y_26635;
                                            bool index_certs_26637;
                                            
                                            if (!bounds_check_26636) {
                                                {
                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 33) == -1) {
                                                        global_failure_args[0] = (int64_t) iA_26633;
                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                        ;
                                                    }
                                                    return;
                                                }
                                            }
                                            
                                            float add_arg_26638 = ((__global float *) color_27043)[phys_tid_26336 + iA_26633 * num_threads_27046];
                                            float add_arg_26639 = ((__global float *) color_27042)[phys_tid_26336 + iA_26633 * num_threads_27046];
                                            float add_arg_26640 = ((__global float *) color_27041)[phys_tid_26336 + iA_26633 * num_threads_27046];
                                            float add_arg_26641 = ((__global float *) color_27040)[phys_tid_26336 + iA_26633 * num_threads_27046];
                                            float add_res_26642 = add_arg_26632 + add_arg_26641;
                                            float add_res_26643 = add_arg_26629 + add_arg_26638;
                                            float add_res_26644 = add_arg_26630 + add_arg_26639;
                                            float add_res_26645 = add_arg_26631 + add_arg_26640;
                                            
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26620 = add_res_26643;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26621 = add_res_26644;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26622 = add_res_26645;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26623 = add_res_26642;
                                        } else {
                                            bool cond_26646 = instr_26510 == (int8_t) 7;
                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26647;
                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26648;
                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26649;
                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26650;
                                            
                                            if (cond_26646 == 1) {
                                                int64_t iB_26651 = sext_i8_i64(instr_26509);
                                                bool x_26652 = sle64((int64_t) 0, iB_26651);
                                                bool y_26653 = slt64(iB_26651, tape_slot_count_16222);
                                                bool bounds_check_26654 = x_26652 && y_26653;
                                                bool index_certs_26655;
                                                
                                                if (!bounds_check_26654) {
                                                    {
                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 34) == -1) {
                                                            global_failure_args[0] = (int64_t) iB_26651;
                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                            ;
                                                        }
                                                        return;
                                                    }
                                                }
                                                
                                                float sub_arg_26656 = ((__global float *) color_27043)[phys_tid_26336 + iB_26651 * num_threads_27046];
                                                float sub_arg_26657 = ((__global float *) color_27042)[phys_tid_26336 + iB_26651 * num_threads_27046];
                                                float sub_arg_26658 = ((__global float *) color_27041)[phys_tid_26336 + iB_26651 * num_threads_27046];
                                                float sub_arg_26659 = ((__global float *) color_27040)[phys_tid_26336 + iB_26651 * num_threads_27046];
                                                int64_t iA_26660 = sext_i8_i64(instr_26508);
                                                bool x_26661 = sle64((int64_t) 0, iA_26660);
                                                bool y_26662 = slt64(iA_26660, tape_slot_count_16222);
                                                bool bounds_check_26663 = x_26661 && y_26662;
                                                bool index_certs_26664;
                                                
                                                if (!bounds_check_26663) {
                                                    {
                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 35) == -1) {
                                                            global_failure_args[0] = (int64_t) iA_26660;
                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                            ;
                                                        }
                                                        return;
                                                    }
                                                }
                                                
                                                float sub_arg_26665 = ((__global float *) color_27043)[phys_tid_26336 + iA_26660 * num_threads_27046];
                                                float sub_arg_26666 = ((__global float *) color_27042)[phys_tid_26336 + iA_26660 * num_threads_27046];
                                                float sub_arg_26667 = ((__global float *) color_27041)[phys_tid_26336 + iA_26660 * num_threads_27046];
                                                float sub_arg_26668 = ((__global float *) color_27040)[phys_tid_26336 + iA_26660 * num_threads_27046];
                                                float sub_res_26669 = sub_arg_26668 - sub_arg_26659;
                                                float sub_res_26670 = sub_arg_26665 - sub_arg_26656;
                                                float sub_res_26671 = sub_arg_26666 - sub_arg_26657;
                                                float sub_res_26672 = sub_arg_26667 - sub_arg_26658;
                                                
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26647 = sub_res_26670;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26648 = sub_res_26671;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26649 = sub_res_26672;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26650 = sub_res_26669;
                                            } else {
                                                bool cond_26673 = instr_26510 == (int8_t) 8;
                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26674;
                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26675;
                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26676;
                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26677;
                                                
                                                if (cond_26673 == 1) {
                                                    int64_t iB_26678 = sext_i8_i64(instr_26509);
                                                    bool x_26679 = sle64((int64_t) 0, iB_26678);
                                                    bool y_26680 = slt64(iB_26678, tape_slot_count_16222);
                                                    bool bounds_check_26681 = x_26679 && y_26680;
                                                    bool index_certs_26682;
                                                    
                                                    if (!bounds_check_26681) {
                                                        {
                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 36) == -1) {
                                                                global_failure_args[0] = (int64_t) iB_26678;
                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                ;
                                                            }
                                                            return;
                                                        }
                                                    }
                                                    
                                                    float mul_arg_26683 = ((__global float *) color_27043)[phys_tid_26336 + iB_26678 * num_threads_27046];
                                                    float mul_arg_26684 = ((__global float *) color_27042)[phys_tid_26336 + iB_26678 * num_threads_27046];
                                                    float mul_arg_26685 = ((__global float *) color_27041)[phys_tid_26336 + iB_26678 * num_threads_27046];
                                                    float mul_arg_26686 = ((__global float *) color_27040)[phys_tid_26336 + iB_26678 * num_threads_27046];
                                                    int64_t iA_26687 = sext_i8_i64(instr_26508);
                                                    bool x_26688 = sle64((int64_t) 0, iA_26687);
                                                    bool y_26689 = slt64(iA_26687, tape_slot_count_16222);
                                                    bool bounds_check_26690 = x_26688 && y_26689;
                                                    bool index_certs_26691;
                                                    
                                                    if (!bounds_check_26690) {
                                                        {
                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 37) == -1) {
                                                                global_failure_args[0] = (int64_t) iA_26687;
                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                ;
                                                            }
                                                            return;
                                                        }
                                                    }
                                                    
                                                    float mul_arg_26692 = ((__global float *) color_27043)[phys_tid_26336 + iA_26687 * num_threads_27046];
                                                    float mul_arg_26693 = ((__global float *) color_27042)[phys_tid_26336 + iA_26687 * num_threads_27046];
                                                    float mul_arg_26694 = ((__global float *) color_27041)[phys_tid_26336 + iA_26687 * num_threads_27046];
                                                    float mul_arg_26695 = ((__global float *) color_27040)[phys_tid_26336 + iA_26687 * num_threads_27046];
                                                    float mul_res_26696 = mul_arg_26686 * mul_arg_26695;
                                                    float arg_26697 = mul_arg_26686 * mul_arg_26692;
                                                    float arg_26698 = mul_arg_26683 * mul_arg_26695;
                                                    float mul_res_26699 = arg_26697 + arg_26698;
                                                    float arg_26700 = mul_arg_26686 * mul_arg_26693;
                                                    float arg_26701 = mul_arg_26684 * mul_arg_26695;
                                                    float mul_res_26702 = arg_26700 + arg_26701;
                                                    float arg_26703 = mul_arg_26686 * mul_arg_26694;
                                                    float arg_26704 = mul_arg_26685 * mul_arg_26695;
                                                    float mul_res_26705 = arg_26703 + arg_26704;
                                                    
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26674 = mul_res_26699;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26675 = mul_res_26702;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26676 = mul_res_26705;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26677 = mul_res_26696;
                                                } else {
                                                    bool cond_26706 = instr_26510 == (int8_t) 9;
                                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26707;
                                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26708;
                                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26709;
                                                    float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26710;
                                                    
                                                    if (cond_26706 == 1) {
                                                        int64_t iB_26711 = sext_i8_i64(instr_26509);
                                                        bool x_26712 = sle64((int64_t) 0, iB_26711);
                                                        bool y_26713 = slt64(iB_26711, tape_slot_count_16222);
                                                        bool bounds_check_26714 = x_26712 && y_26713;
                                                        bool index_certs_26715;
                                                        
                                                        if (!bounds_check_26714) {
                                                            {
                                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 38) == -1) {
                                                                    global_failure_args[0] = (int64_t) iB_26711;
                                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                    ;
                                                                }
                                                                return;
                                                            }
                                                        }
                                                        
                                                        float div_arg_26716 = ((__global float *) color_27043)[phys_tid_26336 + iB_26711 * num_threads_27046];
                                                        float div_arg_26717 = ((__global float *) color_27042)[phys_tid_26336 + iB_26711 * num_threads_27046];
                                                        float div_arg_26718 = ((__global float *) color_27041)[phys_tid_26336 + iB_26711 * num_threads_27046];
                                                        float div_arg_26719 = ((__global float *) color_27040)[phys_tid_26336 + iB_26711 * num_threads_27046];
                                                        int64_t iA_26720 = sext_i8_i64(instr_26508);
                                                        bool x_26721 = sle64((int64_t) 0, iA_26720);
                                                        bool y_26722 = slt64(iA_26720, tape_slot_count_16222);
                                                        bool bounds_check_26723 = x_26721 && y_26722;
                                                        bool index_certs_26724;
                                                        
                                                        if (!bounds_check_26723) {
                                                            {
                                                                if (atomic_cmpxchg_i32_global(global_failure, -1, 39) == -1) {
                                                                    global_failure_args[0] = (int64_t) iA_26720;
                                                                    global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                    ;
                                                                }
                                                                return;
                                                            }
                                                        }
                                                        
                                                        float div_arg_26725 = ((__global float *) color_27043)[phys_tid_26336 + iA_26720 * num_threads_27046];
                                                        float div_arg_26726 = ((__global float *) color_27042)[phys_tid_26336 + iA_26720 * num_threads_27046];
                                                        float div_arg_26727 = ((__global float *) color_27041)[phys_tid_26336 + iA_26720 * num_threads_27046];
                                                        float div_arg_26728 = ((__global float *) color_27040)[phys_tid_26336 + iA_26720 * num_threads_27046];
                                                        float div_res_26729 = div_arg_26728 / div_arg_26719;
                                                        float arg_26730 = div_arg_26719 * div_arg_26725;
                                                        float arg_26731 = div_arg_26716 * div_arg_26728;
                                                        float arg_26732 = arg_26730 - arg_26731;
                                                        float arg_26733 = fpow32(div_arg_26719, 2.0F);
                                                        float div_res_26734 = arg_26732 / arg_26733;
                                                        float arg_26735 = div_arg_26719 * div_arg_26726;
                                                        float arg_26736 = div_arg_26717 * div_arg_26728;
                                                        float arg_26737 = arg_26735 - arg_26736;
                                                        float div_res_26738 = arg_26737 / arg_26733;
                                                        float arg_26739 = div_arg_26719 * div_arg_26727;
                                                        float arg_26740 = div_arg_26718 * div_arg_26728;
                                                        float arg_26741 = arg_26739 - arg_26740;
                                                        float div_res_26742 = arg_26741 / arg_26733;
                                                        
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26707 = div_res_26734;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26708 = div_res_26738;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26709 = div_res_26742;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26710 = div_res_26729;
                                                    } else {
                                                        bool cond_26743 = instr_26510 == (int8_t) 10;
                                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26744;
                                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26745;
                                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26746;
                                                        float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26747;
                                                        
                                                        if (cond_26743 == 1) {
                                                            int64_t iB_26748 = sext_i8_i64(instr_26509);
                                                            bool x_26749 = sle64((int64_t) 0, iB_26748);
                                                            bool y_26750 = slt64(iB_26748, tape_slot_count_16222);
                                                            bool bounds_check_26751 = x_26749 && y_26750;
                                                            bool index_certs_26752;
                                                            
                                                            if (!bounds_check_26751) {
                                                                {
                                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 40) == -1) {
                                                                        global_failure_args[0] = (int64_t) iB_26748;
                                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                        ;
                                                                    }
                                                                    return;
                                                                }
                                                            }
                                                            
                                                            float min_arg_26756 = ((__global float *) color_27040)[phys_tid_26336 + iB_26748 * num_threads_27046];
                                                            int64_t iA_26757 = sext_i8_i64(instr_26508);
                                                            bool x_26758 = sle64((int64_t) 0, iA_26757);
                                                            bool y_26759 = slt64(iA_26757, tape_slot_count_16222);
                                                            bool bounds_check_26760 = x_26758 && y_26759;
                                                            bool index_certs_26761;
                                                            
                                                            if (!bounds_check_26760) {
                                                                {
                                                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 41) == -1) {
                                                                        global_failure_args[0] = (int64_t) iA_26757;
                                                                        global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                        ;
                                                                    }
                                                                    return;
                                                                }
                                                            }
                                                            
                                                            float min_arg_26765 = ((__global float *) color_27040)[phys_tid_26336 + iA_26757 * num_threads_27046];
                                                            bool cond_26766 = min_arg_26765 < min_arg_26756;
                                                            float min_res_26767;
                                                            
                                                            if (cond_26766 == 1) {
                                                                float min_arg_26762 = ((__global float *) color_27043)[phys_tid_26336 + iA_26757 * num_threads_27046];
                                                                
                                                                min_res_26767 = min_arg_26762;
                                                            } else {
                                                                float min_arg_26753 = ((__global float *) color_27043)[phys_tid_26336 + iB_26748 * num_threads_27046];
                                                                
                                                                min_res_26767 = min_arg_26753;
                                                            }
                                                            
                                                            float min_res_26768;
                                                            
                                                            if (cond_26766 == 1) {
                                                                float min_arg_26763 = ((__global float *) color_27042)[phys_tid_26336 + iA_26757 * num_threads_27046];
                                                                
                                                                min_res_26768 = min_arg_26763;
                                                            } else {
                                                                float min_arg_26754 = ((__global float *) color_27042)[phys_tid_26336 + iB_26748 * num_threads_27046];
                                                                
                                                                min_res_26768 = min_arg_26754;
                                                            }
                                                            
                                                            float min_res_26769;
                                                            
                                                            if (cond_26766 == 1) {
                                                                float min_arg_26764 = ((__global float *) color_27041)[phys_tid_26336 + iA_26757 * num_threads_27046];
                                                                
                                                                min_res_26769 = min_arg_26764;
                                                            } else {
                                                                float min_arg_26755 = ((__global float *) color_27041)[phys_tid_26336 + iB_26748 * num_threads_27046];
                                                                
                                                                min_res_26769 = min_arg_26755;
                                                            }
                                                            
                                                            float min_res_26770;
                                                            
                                                            if (cond_26766 == 1) {
                                                                min_res_26770 = min_arg_26765;
                                                            } else {
                                                                min_res_26770 = min_arg_26756;
                                                            }
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26744 = min_res_26767;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26745 = min_res_26768;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26746 = min_res_26769;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26747 = min_res_26770;
                                                        } else {
                                                            bool cond_26771 = instr_26510 == (int8_t) 11;
                                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26772;
                                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26773;
                                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26774;
                                                            float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26775;
                                                            
                                                            if (cond_26771 == 1) {
                                                                int64_t iB_26776 = sext_i8_i64(instr_26509);
                                                                bool x_26777 = sle64((int64_t) 0, iB_26776);
                                                                bool y_26778 = slt64(iB_26776, tape_slot_count_16222);
                                                                bool bounds_check_26779 = x_26777 && y_26778;
                                                                bool index_certs_26780;
                                                                
                                                                if (!bounds_check_26779) {
                                                                    {
                                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 42) == -1) {
                                                                            global_failure_args[0] = (int64_t) iB_26776;
                                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                            ;
                                                                        }
                                                                        return;
                                                                    }
                                                                }
                                                                
                                                                float max_arg_26784 = ((__global float *) color_27040)[phys_tid_26336 + iB_26776 * num_threads_27046];
                                                                int64_t iA_26785 = sext_i8_i64(instr_26508);
                                                                bool x_26786 = sle64((int64_t) 0, iA_26785);
                                                                bool y_26787 = slt64(iA_26785, tape_slot_count_16222);
                                                                bool bounds_check_26788 = x_26786 && y_26787;
                                                                bool index_certs_26789;
                                                                
                                                                if (!bounds_check_26788) {
                                                                    {
                                                                        if (atomic_cmpxchg_i32_global(global_failure, -1, 43) == -1) {
                                                                            global_failure_args[0] = (int64_t) iA_26785;
                                                                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                            ;
                                                                        }
                                                                        return;
                                                                    }
                                                                }
                                                                
                                                                float max_arg_26793 = ((__global float *) color_27040)[phys_tid_26336 + iA_26785 * num_threads_27046];
                                                                bool cond_26794 = max_arg_26784 < max_arg_26793;
                                                                float max_res_26795;
                                                                
                                                                if (cond_26794 == 1) {
                                                                    float max_arg_26790 = ((__global float *) color_27043)[phys_tid_26336 + iA_26785 * num_threads_27046];
                                                                    
                                                                    max_res_26795 = max_arg_26790;
                                                                } else {
                                                                    float max_arg_26781 = ((__global float *) color_27043)[phys_tid_26336 + iB_26776 * num_threads_27046];
                                                                    
                                                                    max_res_26795 = max_arg_26781;
                                                                }
                                                                
                                                                float max_res_26796;
                                                                
                                                                if (cond_26794 == 1) {
                                                                    float max_arg_26791 = ((__global float *) color_27042)[phys_tid_26336 + iA_26785 * num_threads_27046];
                                                                    
                                                                    max_res_26796 = max_arg_26791;
                                                                } else {
                                                                    float max_arg_26782 = ((__global float *) color_27042)[phys_tid_26336 + iB_26776 * num_threads_27046];
                                                                    
                                                                    max_res_26796 = max_arg_26782;
                                                                }
                                                                
                                                                float max_res_26797;
                                                                
                                                                if (cond_26794 == 1) {
                                                                    float max_arg_26792 = ((__global float *) color_27041)[phys_tid_26336 + iA_26785 * num_threads_27046];
                                                                    
                                                                    max_res_26797 = max_arg_26792;
                                                                } else {
                                                                    float max_arg_26783 = ((__global float *) color_27041)[phys_tid_26336 + iB_26776 * num_threads_27046];
                                                                    
                                                                    max_res_26797 = max_arg_26783;
                                                                }
                                                                
                                                                float max_res_26798;
                                                                
                                                                if (cond_26794 == 1) {
                                                                    max_res_26798 = max_arg_26793;
                                                                } else {
                                                                    max_res_26798 = max_arg_26784;
                                                                }
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26772 = max_res_26795;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26773 = max_res_26796;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26774 = max_res_26797;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26775 = max_res_26798;
                                                            } else {
                                                                bool cond_26799 = instr_26510 == (int8_t) 12;
                                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26800;
                                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26801;
                                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26802;
                                                                float lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26803;
                                                                
                                                                if (cond_26799 == 1) {
                                                                    int64_t iA_26804 = sext_i8_i64(instr_26508);
                                                                    bool x_26805 = sle64((int64_t) 0, iA_26804);
                                                                    bool y_26806 = slt64(iA_26804, tape_slot_count_16222);
                                                                    bool bounds_check_26807 = x_26805 && y_26806;
                                                                    bool index_certs_26808;
                                                                    
                                                                    if (!bounds_check_26807) {
                                                                        {
                                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 44) == -1) {
                                                                                global_failure_args[0] = (int64_t) iA_26804;
                                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                                ;
                                                                            }
                                                                            return;
                                                                        }
                                                                    }
                                                                    
                                                                    float copy_arg_26809 = ((__global float *) color_27043)[phys_tid_26336 + iA_26804 * num_threads_27046];
                                                                    float copy_arg_26810 = ((__global float *) color_27042)[phys_tid_26336 + iA_26804 * num_threads_27046];
                                                                    float copy_arg_26811 = ((__global float *) color_27041)[phys_tid_26336 + iA_26804 * num_threads_27046];
                                                                    float copy_arg_26812 = ((__global float *) color_27040)[phys_tid_26336 + iA_26804 * num_threads_27046];
                                                                    
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26800 = copy_arg_26809;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26801 = copy_arg_26810;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26802 = copy_arg_26811;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26803 = copy_arg_26812;
                                                                } else {
                                                                    int64_t iO_26813 = sext_i8_i64(instr_26511);
                                                                    bool x_26814 = sle64((int64_t) 0, iO_26813);
                                                                    bool y_26815 = slt64(iO_26813, tape_slot_count_16222);
                                                                    bool bounds_check_26816 = x_26814 && y_26815;
                                                                    bool index_certs_26817;
                                                                    
                                                                    if (!bounds_check_26816) {
                                                                        {
                                                                            if (atomic_cmpxchg_i32_global(global_failure, -1, 45) == -1) {
                                                                                global_failure_args[0] = (int64_t) iO_26813;
                                                                                global_failure_args[1] = (int64_t) tape_slot_count_16222;
                                                                                ;
                                                                            }
                                                                            return;
                                                                        }
                                                                    }
                                                                    
                                                                    float copy_arg_26818 = ((__global float *) color_27043)[phys_tid_26336 + iO_26813 * num_threads_27046];
                                                                    float copy_arg_26819 = ((__global float *) color_27042)[phys_tid_26336 + iO_26813 * num_threads_27046];
                                                                    float copy_arg_26820 = ((__global float *) color_27041)[phys_tid_26336 + iO_26813 * num_threads_27046];
                                                                    float copy_arg_26821 = ((__global float *) color_27040)[phys_tid_26336 + iO_26813 * num_threads_27046];
                                                                    
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26800 = copy_arg_26818;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26801 = copy_arg_26819;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26802 = copy_arg_26820;
                                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26803 = copy_arg_26821;
                                                                }
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26772 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26800;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26773 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26801;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26774 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26802;
                                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26775 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26803;
                                                            }
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26744 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26772;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26745 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26773;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26746 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26774;
                                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26747 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26775;
                                                        }
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26707 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26744;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26708 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26745;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26709 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26746;
                                                        lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26710 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26747;
                                                    }
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26674 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26707;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26675 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26708;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26676 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26709;
                                                    lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26677 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26710;
                                                }
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26647 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26674;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26648 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26675;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26649 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26676;
                                                lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26650 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26677;
                                            }
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26620 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26647;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26621 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26648;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26622 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26649;
                                            lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26623 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_f_res_26650;
                                        }
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26602 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26620;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26603 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26621;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26604 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26622;
                                        lw_val_f_res_f_res_f_res_f_res_f_res_26605 = lw_val_f_res_f_res_f_res_f_res_f_res_f_res_26623;
                                    }
                                    lw_val_f_res_f_res_f_res_f_res_26583 = lw_val_f_res_f_res_f_res_f_res_f_res_26602;
                                    lw_val_f_res_f_res_f_res_f_res_26584 = lw_val_f_res_f_res_f_res_f_res_f_res_26603;
                                    lw_val_f_res_f_res_f_res_f_res_26585 = lw_val_f_res_f_res_f_res_f_res_f_res_26604;
                                    lw_val_f_res_f_res_f_res_f_res_26586 = lw_val_f_res_f_res_f_res_f_res_f_res_26605;
                                }
                                lw_val_f_res_f_res_f_res_26565 = lw_val_f_res_f_res_f_res_f_res_26583;
                                lw_val_f_res_f_res_f_res_26566 = lw_val_f_res_f_res_f_res_f_res_26584;
                                lw_val_f_res_f_res_f_res_26567 = lw_val_f_res_f_res_f_res_f_res_26585;
                                lw_val_f_res_f_res_f_res_26568 = lw_val_f_res_f_res_f_res_f_res_26586;
                            }
                            lw_val_f_res_f_res_26543 = lw_val_f_res_f_res_f_res_26565;
                            lw_val_f_res_f_res_26544 = lw_val_f_res_f_res_f_res_26566;
                            lw_val_f_res_f_res_26545 = lw_val_f_res_f_res_f_res_26567;
                            lw_val_f_res_f_res_26546 = lw_val_f_res_f_res_f_res_26568;
                        }
                        lw_val_f_res_26524 = lw_val_f_res_f_res_26543;
                        lw_val_f_res_26525 = lw_val_f_res_f_res_26544;
                        lw_val_f_res_26526 = lw_val_f_res_f_res_26545;
                        lw_val_f_res_26527 = lw_val_f_res_f_res_26546;
                    }
                    lw_val_26513 = lw_val_f_res_26524;
                    lw_val_26514 = lw_val_f_res_26525;
                    lw_val_26515 = lw_val_f_res_26526;
                    lw_val_26516 = lw_val_f_res_26527;
                }
                
                int64_t iO_26822 = sext_i8_i64(instr_26511);
                bool x_26823 = sle64((int64_t) 0, iO_26822);
                bool y_26824 = slt64(iO_26822, tape_slot_count_16222);
                bool bounds_check_26825 = x_26823 && y_26824;
                bool index_certs_26826;
                
                if (!bounds_check_26825) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 46) == -1) {
                            global_failure_args[0] = (int64_t) iO_26822;
                            global_failure_args[1] = (int64_t) tape_slot_count_16222;
                            ;
                        }
                        return;
                    }
                }
                ((__global float *) color_27043)[phys_tid_26336 + iO_26822 * num_threads_27046] = lw_val_26513;
                ((__global float *) color_27042)[phys_tid_26336 + iO_26822 * num_threads_27046] = lw_val_26514;
                ((__global float *) color_27041)[phys_tid_26336 + iO_26822 * num_threads_27046] = lw_val_26515;
                ((__global float *) color_27040)[phys_tid_26336 + iO_26822 * num_threads_27046] = lw_val_26516;
            }
            
            float eval_res_26831 = ((__global float *) color_27043)[phys_tid_26336];
            float eval_res_26832 = ((__global float *) color_27042)[phys_tid_26336];
            float eval_res_26833 = ((__global float *) color_27041)[phys_tid_26336];
            float zt_res_26834 = eval_res_26833 * eval_res_26833;
            float zt_res_26835 = eval_res_26832 * eval_res_26832;
            float zt_res_26836 = eval_res_26831 * eval_res_26831;
            float zp_res_26837 = zt_res_26835 + zt_res_26836;
            float zp_res_26838 = zt_res_26834 + zp_res_26837;
            float defunc_0_g_res_26839 = futrts_sqrt32(zp_res_26838);
            float zs_res_26840 = 1.0F / defunc_0_g_res_26839;
            float zt_res_26841 = eval_res_26831 * zs_res_26840;
            float zt_res_26842 = eval_res_26832 * zs_res_26840;
            float zt_res_26843 = eval_res_26833 * zs_res_26840;
            float zt_res_26844 = 0.5F * zt_res_26841;
            float zt_res_26845 = 0.5F * zt_res_26842;
            float zt_res_26846 = 0.5F * zt_res_26843;
            float defunc_1_f_res_26847 = 0.5F + zt_res_26844;
            float defunc_1_f_res_26848 = 0.5F + zt_res_26845;
            float defunc_1_f_res_26849 = 0.5F + zt_res_26846;
            bool cond_26850 = defunc_1_f_res_26847 < 0.0F;
            float clamp_channel_res_26851;
            
            if (cond_26850 == 1) {
                clamp_channel_res_26851 = 0.0F;
            } else {
                bool cond_26852 = 1.0F < defunc_1_f_res_26847;
                float clamp_channel_res_f_res_26853;
                
                if (cond_26852 == 1) {
                    clamp_channel_res_f_res_26853 = 1.0F;
                } else {
                    clamp_channel_res_f_res_26853 = defunc_1_f_res_26847;
                }
                clamp_channel_res_26851 = clamp_channel_res_f_res_26853;
            }
            
            float f32_arg_26854 = 255.0F * clamp_channel_res_26851;
            int32_t unsign_arg_26855 = fptoui_f32_i32(f32_arg_26854);
            int32_t arg_26856 = shl32(unsign_arg_26855, 16);
            int32_t arg_26857 = -16777216 | arg_26856;
            bool cond_26858 = defunc_1_f_res_26848 < 0.0F;
            float clamp_channel_res_26859;
            
            if (cond_26858 == 1) {
                clamp_channel_res_26859 = 0.0F;
            } else {
                bool cond_26860 = 1.0F < defunc_1_f_res_26848;
                float clamp_channel_res_f_res_26861;
                
                if (cond_26860 == 1) {
                    clamp_channel_res_f_res_26861 = 1.0F;
                } else {
                    clamp_channel_res_f_res_26861 = defunc_1_f_res_26848;
                }
                clamp_channel_res_26859 = clamp_channel_res_f_res_26861;
            }
            
            float f32_arg_26862 = 255.0F * clamp_channel_res_26859;
            int32_t unsign_arg_26863 = fptoui_f32_i32(f32_arg_26862);
            int32_t arg_26864 = shl32(unsign_arg_26863, 8);
            int32_t arg_26865 = arg_26857 | arg_26864;
            bool cond_26866 = defunc_1_f_res_26849 < 0.0F;
            float clamp_channel_res_26867;
            
            if (cond_26866 == 1) {
                clamp_channel_res_26867 = 0.0F;
            } else {
                bool cond_26868 = 1.0F < defunc_1_f_res_26849;
                float clamp_channel_res_f_res_26869;
                
                if (cond_26868 == 1) {
                    clamp_channel_res_f_res_26869 = 1.0F;
                } else {
                    clamp_channel_res_f_res_26869 = defunc_1_f_res_26849;
                }
                clamp_channel_res_26867 = clamp_channel_res_f_res_26869;
            }
            
            float f32_arg_26870 = 255.0F * clamp_channel_res_26867;
            int32_t unsign_arg_26871 = fptoui_f32_i32(f32_arg_26870);
            int32_t from_rgba_res_26872 = arg_26865 | unsign_arg_26871;
            
            shade_res_26464 = from_rgba_res_26872;
        }
        ((__global int32_t *) mem_27016)[gtid_26334 * pixel_height_16206 + gtid_26335] = shade_res_26464;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26331
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f16(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f16.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f16.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f16.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f16')
               return x

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        tf = FUTHARK_PRIMTYPES[t]['numpy_type']
        return tf(struct.unpack('<' + fmt, f.get_chars(size))[0])
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f16 = mk_bin_scalar_reader('f16')
read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f16': {'binname' : b" f16",
            'size' : 2,
            'bin_reader': read_bin_f16,
            'str_reader': read_str_f16,
            'bin_format': 'e',
            'numpy_type': np.float16 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_i64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.frombuffer.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.frombuffer(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
    assert m and basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
    if dims > 0:
        return read_array(reader, basetype, dims)
    else:
        return read_scalar(reader, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float16:
        if np.isnan(v):
            out.write('f16.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f16.inf')
            else:
                out.write('-f16.inf')
        else:
            out.write("%.6ff16" % v)
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float16'): b' f16',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tobytes()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tobytes()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape, t):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=t)
  else:
      return np.ctypeslib.as_array(x, shape=shape).view(t)

def indexArray(x, offset, bt):
  return addressOffset(x, offset*ct.sizeof(bt), bt)[0]

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return np.fmin(x,y)

def fmaxN(x,y):
  return np.fmax(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int16(x)

def btoi_bool_i32(x):
  return np.int32(x)

def btoi_bool_i64(x):
  return np.int64(x)

def ftob_T_bool(x):
  return bool(x)

def btof_bool_f16(x):
  return np.float16(x)

def btof_bool_f32(x):
  return np.float32(x)

def btof_bool_f64(x):
  return np.float64(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow16 = fpow32 = fpow64 = fpowN
fmax16 = fmax32 = fmax64 = fmaxN
fmin16 = fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool
ftob_f16_bool = ftob_f32_bool = ftob_f64_bool = ftob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptosi_f16_i8 = fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptosi_f16_i16 = fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptosi_f16_i32 = fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptosi_f16_i64 = fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptoui_f16_i8 = fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptoui_f16_i16 = fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptoui_f16_i32 = fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptoui_f16_i64 = fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f16_f32(x):
  return np.float32(x)

def fpconv_f16_f64(x):
  return np.float64(x)

def fpconv_f32_f16(x):
  return np.float16(x)

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f16(x):
  return np.float16(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_cbrt64(x):
  return np.cbrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_hypot64(x, y):
  return np.hypot(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_erf64(x):
  return np.float64(math.erf(x))

def futhark_erfc64(x):
  return np.float64(math.erfc(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_nextafter64(x, y):
  return np.nextafter(x, y)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_cbrt32(x):
  return np.float32(np.cbrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_hypot32(x, y):
  return np.hypot(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_erf32(x):
  return np.float32(math.erf(x))

def futhark_erfc32(x):
  return np.float32(math.erfc(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_nextafter32(x, y):
  return np.nextafter(x, y)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_log16(x):
  return np.float16(np.log(x))

def futhark_log2_16(x):
  return np.float16(np.log2(x))

def futhark_log10_16(x):
  return np.float16(np.log10(x))

def futhark_sqrt16(x):
  return np.float16(np.sqrt(x))

def futhark_cbrt16(x):
  return np.float16(np.cbrt(x))

def futhark_exp16(x):
  return np.exp(x)

def futhark_cos16(x):
  return np.cos(x)

def futhark_sin16(x):
  return np.sin(x)

def futhark_tan16(x):
  return np.tan(x)

def futhark_acos16(x):
  return np.arccos(x)

def futhark_asin16(x):
  return np.arcsin(x)

def futhark_atan16(x):
  return np.arctan(x)

def futhark_cosh16(x):
  return np.cosh(x)

def futhark_sinh16(x):
  return np.sinh(x)

def futhark_tanh16(x):
  return np.tanh(x)

def futhark_acosh16(x):
  return np.arccosh(x)

def futhark_asinh16(x):
  return np.arcsinh(x)

def futhark_atanh16(x):
  return np.arctanh(x)

def futhark_atan2_16(x, y):
  return np.arctan2(x, y)

def futhark_hypot16(x, y):
  return np.hypot(x, y)

def futhark_gamma16(x):
  return np.float16(math.gamma(x))

def futhark_lgamma16(x):
  return np.float16(math.lgamma(x))

def futhark_erf16(x):
  return np.float16(math.erf(x))

def futhark_erfc16(x):
  return np.float16(math.erfc(x))

def futhark_round16(x):
  return np.round(x)

def futhark_ceil16(x):
  return np.ceil(x)

def futhark_floor16(x):
  return np.floor(x)

def futhark_nextafter16(x, y):
  return np.nextafter(x, y)

def futhark_isnan16(x):
  return np.isnan(x)

def futhark_isinf16(x):
  return np.isinf(x)

def futhark_to_bits16(x):
  s = struct.pack('>e', x)
  return np.int16(struct.unpack('>H', s)[0])

def futhark_from_bits16(x):
  s = struct.pack('>H', np.uint16(x))
  return np.float16(struct.unpack('>e', s)[0])

def futhark_lerp16(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad16(a, b, c):
  return a * b + c

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma16(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
# Start of server.py

import sys
import time
import shlex # For string splitting

class Server:
    def __init__(self, ctx):
        self._ctx = ctx
        self._vars = {}

    class Failure(BaseException):
        def __init__(self, msg):
            self.msg = msg

    def _get_arg(self, args, i):
        if i < len(args):
            return args[i]
        else:
            raise self.Failure('Insufficient command args')

    def _get_entry_point(self, entry):
        if entry in self._ctx.entry_points:
            return self._ctx.entry_points[entry]
        else:
            raise self.Failure('Unknown entry point: %s' % entry)

    def _check_var(self, vname):
        if not vname in self._vars:
            raise self.Failure('Unknown variable: %s' % vname)

    def _check_new_var(self, vname):
        if vname in self._vars:
            raise self.Failure('Variable already exists: %s' % vname)

    def _get_var(self, vname):
        self._check_var(vname)
        return self._vars[vname]

    def _cmd_inputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[0]:
            print(t)

    def _cmd_outputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[1]:
            print(t)

    def _cmd_dummy(self, args):
        pass

    def _cmd_free(self, args):
        for vname in args:
            self._check_var(vname)
            del self._vars[vname]

    def _cmd_rename(self, args):
        oldname = self._get_arg(args, 0)
        newname = self._get_arg(args, 1)
        self._check_var(oldname)
        self._check_new_var(newname)
        self._vars[newname] = self._vars[oldname]
        del self._vars[oldname]

    def _cmd_call(self, args):
        entry = self._get_entry_point(self._get_arg(args, 0))
        num_ins = len(entry[0])
        num_outs = len(entry[1])
        exp_len = 1 + num_outs + num_ins

        if len(args) != exp_len:
            raise self.Failure('Invalid argument count, expected %d' % exp_len)

        out_vnames = args[1:num_outs+1]

        for out_vname in out_vnames:
            self._check_new_var(out_vname)

        in_vnames = args[1+num_outs:]
        ins = [ self._get_var(in_vname) for in_vname in in_vnames ]

        try:
            (runtime, vals) = getattr(self._ctx, args[0])(*ins)
        except Exception as e:
            raise self.Failure(str(e))

        print('runtime: %d' % runtime)

        if num_outs == 1:
            self._vars[out_vnames[0]] = vals
        else:
            for (out_vname, val) in zip(out_vnames, vals):
                self._vars[out_vname] = val

    def _store_val(self, f, value):
        # In case we are using the PyOpenCL backend, we first
        # need to convert OpenCL arrays to ordinary NumPy
        # arrays.  We do this in a nasty way.
        if isinstance(value, opaque):
            for component in value.data:
                self._store_val(f, component)
        elif isinstance(value, np.number) or isinstance(value, bool) or isinstance(value, np.bool_) or isinstance(value, np.ndarray):
            # Ordinary NumPy value.
            f.write(construct_binary_value(value))
        else:
            # Assuming PyOpenCL array.
            f.write(construct_binary_value(value.get()))

    def _cmd_store(self, args):
        fname = self._get_arg(args, 0)

        with open(fname, 'wb') as f:
            for i in range(1, len(args)):
                self._store_val(f, self._get_var(args[i]))

    def _restore_val(self, reader, typename):
        if typename in self._ctx.opaques:
            vs = []
            for t in self._ctx.opaques[typename]:
                vs += [read_value(t, reader)]
            return opaque(typename, *vs)
        else:
            return read_value(typename, reader)

    def _cmd_restore(self, args):
        if len(args) % 2 == 0:
            raise self.Failure('Invalid argument count')

        fname = args[0]
        args = args[1:]

        with open(fname, 'rb') as f:
            reader = ReaderInput(f)
            while args != []:
                vname = args[0]
                typename = args[1]
                args = args[2:]

                if vname in self._vars:
                    raise self.Failure('Variable already exists: %s' % vname)

                try:
                    self._vars[vname] = self._restore_val(reader, typename)
                except ValueError:
                    raise self.Failure('Failed to restore variable %s.\n'
                                       'Possibly malformed data in %s.\n'
                                       % (vname, fname))

            skip_spaces(reader)
            if reader.get_char() != b'':
                raise self.Failure('Expected EOF after reading values')

    def _cmd_types(self, args):
        for k in self._ctx.opaques.keys():
            print(k)

    def _cmd_entry_points(self, args):
        for k in self._ctx.entry_points.keys():
            print(k)

    _commands = { 'inputs': _cmd_inputs,
                  'outputs': _cmd_outputs,
                  'call': _cmd_call,
                  'restore': _cmd_restore,
                  'store': _cmd_store,
                  'free': _cmd_free,
                  'rename': _cmd_rename,
                  'clear': _cmd_dummy,
                  'pause_profiling': _cmd_dummy,
                  'unpause_profiling': _cmd_dummy,
                  'report': _cmd_dummy,
                  'types': _cmd_types,
                  'entry_points': _cmd_entry_points,
                 }

    def _process_line(self, line):
        words = shlex.split(line)
        if words == []:
            raise self.Failure('Empty line')
        else:
            cmd = words[0]
            args = words[1:]
            if cmd in self._commands:
                self._commands[cmd](self, args)
            else:
                raise self.Failure('Unknown command: %s' % cmd)

    def run(self):
        while True:
            print('%%% OK', flush=True)
            line = sys.stdin.readline()
            if line == '':
                return
            try:
                self._process_line(line)
            except self.Failure as e:
                print('%%% FAILURE')
                print(e.msg)

# End of server.py
class __engine:
  entry_points = {"main": (["i64", "i64", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "f32", "[]u32", "[]f32", "i64"], ["[][]u32"])}
  opaques = {}
  def __init__(self, build_options=build_options, command_queue=None, interactive=False, platform_pref=preferred_platform, device_pref=preferred_device, default_group_size=default_group_size, default_num_groups=default_num_groups, default_tile_size=default_tile_size, default_reg_tile_size=default_reg_tile_size, default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.GPU, "num_groups", lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))), ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("", cl.device_type.GPU, "tile_size", lambda device: np.int32(16)), ("", cl.device_type.GPU, "reg_tile_size", lambda device: np.int32(4)), ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("", cl.device_type.CPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.CPU, "num_groups", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))), ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("", cl.device_type.CPU, "tile_size", lambda device: np.int32(4)), ("", cl.device_type.CPU, "reg_tile_size", lambda device: np.int32(1)), ("", cl.device_type.CPU, "threshold", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 6
    self.failure_msgs=["Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:241:49-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:242:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:243:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:244:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:245:49-57\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:246:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:247:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:247:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:248:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:248:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:249:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:249:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:250:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:250:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:251:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:251:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:252:57-65\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:252:47-55\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:253:49-57\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:254:21-29\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:240:10-254:29\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n", "Index [{}, {}, {}] out of bounds for array of shape [{}][{}][{}].\n-> #0  src/futhark/dda.fut:95:87-101\n   #1  src/futhark/dda.fut:168:15-35\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  src/futhark/dda.fut:166:5-169:23\n   #8  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:230:17-231:18\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:230:17-232:18\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:230:17-233:18\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:230:17-234:18\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:241:49-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:242:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:243:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:244:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:245:49-57\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:246:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:247:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:247:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:248:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:248:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:249:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:249:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:250:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:250:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:251:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:251:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:252:57-65\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:252:47-55\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:253:49-57\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:254:21-29\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n", "Index [{}] out of bounds for array of shape [{}].\n-> #0  src/futhark/tape.fut:240:10-254:29\n   #1  src/futhark/dda.fut:113:16-117:29\n   #2  src/futhark/dda.fut:169:10-22\n   #3  /prelude/soacs.fut:59:3-10\n   #4  /prelude/array.fut:200:3-17\n   #5  /prelude/functional.fut:39:59-65\n   #6  /prelude/soacs.fut:59:3-10\n   #7  /prelude/array.fut:208:3-34\n   #8  src/futhark/dda.fut:166:5-169:23\n   #9  src/futhark/dda.fut:126:1-169:23\n"]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       build_options=build_options,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_reg_tile_size=default_reg_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i8", "i32", "i64", "f32", "bool", "unit"],
                                       user_sizes=sizes,
                                       all_sizes={"main.segmap_group_size_24098": {"class": "group_size", "value": None}, "main.segmap_group_size_24175": {"class": "group_size", "value": None}, "main.segmap_group_size_25199": {"class": "group_size", "value": None}})
    self.mainzisegmap_24124_var = program.mainzisegmap_24124
    self.mainzisegmap_25000_var = program.mainzisegmap_25000
    self.mainzisegmap_26336_var = program.mainzisegmap_26336
    self.constants = {}
  def futhark_entry_main(self, tape_instrs_mem_26933, tape_constants_mem_26934, dz2080U_16203, dz2081U_16204, pixel_width_16205, pixel_height_16206, cam_pos_x_16207, cam_pos_y_16208, cam_pos_zz_16209, cam_forward_x_16210, cam_forward_y_16211, cam_forward_zz_16212, cam_right_x_16213, cam_right_y_16214, cam_right_zz_16215, cam_up_x_16216, cam_up_y_16217, cam_up_zz_16218, cam_fov_rad_16219, tape_slot_count_16222):
    bytes_26936 = smax64(np.int64(0), dz2080U_16203)
    nest_sizze_26330 = (pixel_width_16205 * pixel_height_16206)
    binop_y_27014 = (np.int64(4) * nest_sizze_26330)
    bytes_27015 = smax64(np.int64(0), binop_y_27014)
    segmap_group_sizze_24117 = self.sizes["main.segmap_group_size_24098"]
    segmap_usable_groups_24118 = sdiv_up64(dz2080U_16203, segmap_group_sizze_24117)
    mem_26937 = opencl_alloc(self, bytes_26936, "mem_26937")
    mem_26939 = opencl_alloc(self, bytes_26936, "mem_26939")
    mem_26941 = opencl_alloc(self, bytes_26936, "mem_26941")
    mem_26943 = opencl_alloc(self, bytes_26936, "mem_26943")
    virt_num_groups_27052 = sext_i64_i32(sdiv_up64(dz2080U_16203, segmap_group_sizze_24117))
    if ((1 * (np.int64(segmap_usable_groups_24118) * np.int64(segmap_group_sizze_24117))) != 0):
      self.mainzisegmap_24124_var.set_args(self.global_failure, ct.c_int64(dz2080U_16203), tape_instrs_mem_26933, mem_26937, mem_26939, mem_26941, mem_26943)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_24124_var, ((np.int64(segmap_usable_groups_24118) * np.int64(segmap_group_sizze_24117)),), (np.int64(segmap_group_sizze_24117),))
      if synchronous:
        sync(self)
    y_22711 = slt64(np.int64(0), tape_slot_count_16222)
    index_certs_22712 = True
    assert y_22711, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  src/futhark/tape.fut:230:17-231:18\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n" % ("Index [", np.int64(0), "] out of bounds for array of shape [", tape_slot_count_16222, "]."))
    y_22713 = slt64(np.int64(1), tape_slot_count_16222)
    index_certs_22714 = True
    assert y_22713, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  src/futhark/tape.fut:230:17-232:18\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n" % ("Index [", np.int64(1), "] out of bounds for array of shape [", tape_slot_count_16222, "]."))
    y_22715 = slt64(np.int64(2), tape_slot_count_16222)
    index_certs_22716 = True
    assert y_22715, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  src/futhark/tape.fut:230:17-233:18\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n" % ("Index [", np.int64(2), "] out of bounds for array of shape [", tape_slot_count_16222, "]."))
    y_22717 = slt64(np.int64(3), tape_slot_count_16222)
    index_certs_22718 = True
    assert y_22717, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  src/futhark/tape.fut:230:17-234:18\n   #1  src/futhark/dda.fut:163:15-66\n   #2  /prelude/soacs.fut:59:3-10\n   #3  /prelude/array.fut:200:3-17\n   #4  /prelude/functional.fut:39:59-65\n   #5  /prelude/soacs.fut:59:3-10\n   #6  /prelude/array.fut:208:3-34\n   #7  /prelude/functional.fut:39:59-65\n   #8  /prelude/soacs.fut:59:3-10\n   #9  /prelude/array.fut:216:3-39\n   #10 src/futhark/dda.fut:161:5-164:18\n   #11 src/futhark/dda.fut:126:1-169:23\n" % ("Index [", np.int64(3), "] out of bounds for array of shape [", tape_slot_count_16222, "]."))
    segmap_group_sizze_24994 = self.sizes["main.segmap_group_size_24175"]
    segmap_usable_groups_24995 = sdiv_up64(np.int64(16777216), segmap_group_sizze_24994)
    binop_y_26945 = (np.int64(4) * tape_slot_count_16222)
    bytes_26946 = smax64(np.int64(0), binop_y_26945)
    mem_26959 = opencl_alloc(self, np.int64(16777216), "mem_26959")
    num_threads_27044 = (segmap_group_sizze_24994 * segmap_usable_groups_24995)
    total_sizze_27045 = (bytes_26946 * num_threads_27044)
    color_27039 = opencl_alloc(self, total_sizze_27045, "color_27039")
    virt_num_groups_27061 = sext_i64_i32(sdiv_up64(np.int64(16777216), segmap_group_sizze_24994))
    if ((1 * (np.int64(segmap_usable_groups_24995) * np.int64(segmap_group_sizze_24994))) != 0):
      self.mainzisegmap_25000_var.set_args(self.global_failure, self.failure_is_an_option, self.global_failure_args, ct.c_int64(dz2080U_16203), ct.c_int64(dz2081U_16204), ct.c_int64(tape_slot_count_16222), tape_constants_mem_26934, mem_26937, mem_26939, mem_26941, mem_26943, mem_26959, color_27039)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25000_var, ((np.int64(segmap_usable_groups_24995) * np.int64(segmap_group_sizze_24994)),), (np.int64(segmap_group_sizze_24994),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    color_27039 = None
    bounds_invalid_upwards_23452 = slt64(pixel_width_16205, np.int64(0))
    valid_23453 = not(bounds_invalid_upwards_23452)
    range_valid_c_23454 = True
    assert valid_23453, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:95:3-10\n   #1  src/futhark/dda.fut:126:1-169:23\n" % ("Range ", np.int64(0), "..", np.int64(1), "..<", pixel_width_16205, " is invalid."))
    bounds_invalid_upwards_23457 = slt64(pixel_height_16206, np.int64(0))
    valid_23458 = not(bounds_invalid_upwards_23457)
    range_valid_c_23459 = True
    assert valid_23458, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:95:3-10\n   #1  src/futhark/dda.fut:126:1-169:23\n" % ("Range ", np.int64(0), "..", np.int64(1), "..<", pixel_height_16206, " is invalid."))
    tan_arg_22916 = (cam_fov_rad_16219 / np.float32(2.0))
    tan_res_22917 = futhark_tan32(tan_arg_22916)
    screen_world_sizze_x_22918 = (np.float32(2.0) * tan_res_22917)
    i64_res_22919 = sitofp_i64_f32(pixel_height_16206)
    i64_res_22920 = sitofp_i64_f32(pixel_width_16205)
    arg_22921 = (i64_res_22919 / i64_res_22920)
    screen_world_sizze_y_22922 = (screen_world_sizze_x_22918 * arg_22921)
    defunc_1_f_res_23467 = (np.float32(-10.0) - cam_pos_x_16207)
    defunc_1_f_res_23468 = (np.float32(-10.0) - cam_pos_y_16208)
    defunc_1_f_res_23469 = (np.float32(-10.0) - cam_pos_zz_16209)
    defunc_1_f_res_23485 = (np.float32(10.0) - cam_pos_x_16207)
    defunc_1_f_res_23486 = (np.float32(10.0) - cam_pos_y_16208)
    defunc_1_f_res_23487 = (np.float32(10.0) - cam_pos_zz_16209)
    segmap_group_sizze_26331 = self.sizes["main.segmap_group_size_25199"]
    segmap_usable_groups_26332 = sdiv_up64(nest_sizze_26330, segmap_group_sizze_26331)
    mem_27016 = opencl_alloc(self, bytes_27015, "mem_27016")
    num_threads_27046 = (segmap_group_sizze_26331 * segmap_usable_groups_26332)
    total_sizze_27047 = (bytes_26946 * num_threads_27046)
    color_27040 = opencl_alloc(self, total_sizze_27047, "color_27040")
    total_sizze_27048 = (bytes_26946 * num_threads_27046)
    color_27041 = opencl_alloc(self, total_sizze_27048, "color_27041")
    total_sizze_27049 = (bytes_26946 * num_threads_27046)
    color_27042 = opencl_alloc(self, total_sizze_27049, "color_27042")
    total_sizze_27050 = (bytes_26946 * num_threads_27046)
    color_27043 = opencl_alloc(self, total_sizze_27050, "color_27043")
    virt_num_groups_27076 = sext_i64_i32(sdiv_up64((pixel_width_16205 * pixel_height_16206), segmap_group_sizze_26331))
    if ((1 * (np.int64(segmap_usable_groups_26332) * np.int64(segmap_group_sizze_26331))) != 0):
      self.mainzisegmap_26336_var.set_args(self.global_failure, self.failure_is_an_option, self.global_failure_args, ct.c_int64(dz2080U_16203), ct.c_int64(dz2081U_16204), ct.c_int64(pixel_width_16205), ct.c_int64(pixel_height_16206), ct.c_float(cam_pos_x_16207), ct.c_float(cam_pos_y_16208), ct.c_float(cam_pos_zz_16209), ct.c_float(cam_forward_x_16210), ct.c_float(cam_forward_y_16211), ct.c_float(cam_forward_zz_16212), ct.c_float(cam_right_x_16213), ct.c_float(cam_right_y_16214), ct.c_float(cam_right_zz_16215), ct.c_float(cam_up_x_16216), ct.c_float(cam_up_y_16217), ct.c_float(cam_up_zz_16218), ct.c_int64(tape_slot_count_16222), ct.c_float(screen_world_sizze_x_22918), ct.c_float(i64_res_22919), ct.c_float(i64_res_22920), ct.c_float(screen_world_sizze_y_22922), ct.c_float(defunc_1_f_res_23467), ct.c_float(defunc_1_f_res_23468), ct.c_float(defunc_1_f_res_23469), ct.c_float(defunc_1_f_res_23485), ct.c_float(defunc_1_f_res_23486), ct.c_float(defunc_1_f_res_23487), ct.c_int64(num_threads_27046), tape_constants_mem_26934, mem_26937, mem_26939, mem_26941, mem_26943, mem_26959, mem_27016, color_27040, color_27041, color_27042, color_27043)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26336_var, ((np.int64(segmap_usable_groups_26332) * np.int64(segmap_group_sizze_26331)),), (np.int64(segmap_group_sizze_26331),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    mem_26937 = None
    mem_26939 = None
    mem_26941 = None
    mem_26943 = None
    mem_26959 = None
    color_27040 = None
    color_27041 = None
    color_27042 = None
    color_27043 = None
    mem_out_27051 = mem_27016
    return mem_out_27051
  def main(self, pixel_width_16205_ext, pixel_height_16206_ext, cam_pos_x_16207_ext, cam_pos_y_16208_ext, cam_pos_zz_16209_ext, cam_forward_x_16210_ext, cam_forward_y_16211_ext, cam_forward_zz_16212_ext, cam_right_x_16213_ext, cam_right_y_16214_ext, cam_right_zz_16215_ext, cam_up_x_16216_ext, cam_up_y_16217_ext, cam_up_zz_16218_ext, cam_fov_rad_16219_ext, tape_instrs_mem_26933_ext, tape_constants_mem_26934_ext, tape_slot_count_16222_ext):
    dz2080U_16203 = None
    dz2081U_16204 = None
    try:
      pixel_width_16205 = np.int64(ct.c_int64(pixel_width_16205_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i64", type(pixel_width_16205_ext), pixel_width_16205_ext))
    try:
      pixel_height_16206 = np.int64(ct.c_int64(pixel_height_16206_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i64", type(pixel_height_16206_ext), pixel_height_16206_ext))
    try:
      cam_pos_x_16207 = np.float32(cam_pos_x_16207_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_pos_x_16207_ext), cam_pos_x_16207_ext))
    try:
      cam_pos_y_16208 = np.float32(cam_pos_y_16208_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_pos_y_16208_ext), cam_pos_y_16208_ext))
    try:
      cam_pos_zz_16209 = np.float32(cam_pos_zz_16209_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_pos_zz_16209_ext), cam_pos_zz_16209_ext))
    try:
      cam_forward_x_16210 = np.float32(cam_forward_x_16210_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_forward_x_16210_ext), cam_forward_x_16210_ext))
    try:
      cam_forward_y_16211 = np.float32(cam_forward_y_16211_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_forward_y_16211_ext), cam_forward_y_16211_ext))
    try:
      cam_forward_zz_16212 = np.float32(cam_forward_zz_16212_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_forward_zz_16212_ext), cam_forward_zz_16212_ext))
    try:
      cam_right_x_16213 = np.float32(cam_right_x_16213_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #8 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_right_x_16213_ext), cam_right_x_16213_ext))
    try:
      cam_right_y_16214 = np.float32(cam_right_y_16214_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #9 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_right_y_16214_ext), cam_right_y_16214_ext))
    try:
      cam_right_zz_16215 = np.float32(cam_right_zz_16215_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #10 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_right_zz_16215_ext), cam_right_zz_16215_ext))
    try:
      cam_up_x_16216 = np.float32(cam_up_x_16216_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #11 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_up_x_16216_ext), cam_up_x_16216_ext))
    try:
      cam_up_y_16217 = np.float32(cam_up_y_16217_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #12 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_up_y_16217_ext), cam_up_y_16217_ext))
    try:
      cam_up_zz_16218 = np.float32(cam_up_zz_16218_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #13 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_up_zz_16218_ext), cam_up_zz_16218_ext))
    try:
      cam_fov_rad_16219 = np.float32(cam_fov_rad_16219_ext)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #14 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32", type(cam_fov_rad_16219_ext), cam_fov_rad_16219_ext))
    try:
      assert ((type(tape_instrs_mem_26933_ext) in [np.ndarray, cl.array.Array]) and (tape_instrs_mem_26933_ext.dtype == np.uint32)), "Parameter has unexpected type"
      if (dz2080U_16203 == None):
        dz2080U_16203 = np.int64(tape_instrs_mem_26933_ext.shape[0])
      else:
        assert (dz2080U_16203 == tape_instrs_mem_26933_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (type(tape_instrs_mem_26933_ext) == cl.array.Array):
        tape_instrs_mem_26933 = tape_instrs_mem_26933_ext.data
      else:
        tape_instrs_mem_26933 = opencl_alloc(self, np.int64(tape_instrs_mem_26933_ext.nbytes), "tape_instrs_mem_26933")
        if (np.int64(tape_instrs_mem_26933_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, tape_instrs_mem_26933, normaliseArray(tape_instrs_mem_26933_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #15 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]u32", type(tape_instrs_mem_26933_ext), tape_instrs_mem_26933_ext))
    try:
      assert ((type(tape_constants_mem_26934_ext) in [np.ndarray, cl.array.Array]) and (tape_constants_mem_26934_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (dz2081U_16204 == None):
        dz2081U_16204 = np.int64(tape_constants_mem_26934_ext.shape[0])
      else:
        assert (dz2081U_16204 == tape_constants_mem_26934_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (type(tape_constants_mem_26934_ext) == cl.array.Array):
        tape_constants_mem_26934 = tape_constants_mem_26934_ext.data
      else:
        tape_constants_mem_26934 = opencl_alloc(self, np.int64(tape_constants_mem_26934_ext.nbytes), "tape_constants_mem_26934")
        if (np.int64(tape_constants_mem_26934_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, tape_constants_mem_26934, normaliseArray(tape_constants_mem_26934_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #16 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]f32", type(tape_constants_mem_26934_ext), tape_constants_mem_26934_ext))
    try:
      tape_slot_count_16222 = np.int64(ct.c_int64(tape_slot_count_16222_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #17 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i64", type(tape_slot_count_16222_ext), tape_slot_count_16222_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      mem_out_27051 = self.futhark_entry_main(tape_instrs_mem_26933, tape_constants_mem_26934, dz2080U_16203, dz2081U_16204, pixel_width_16205, pixel_height_16206, cam_pos_x_16207, cam_pos_y_16208, cam_pos_zz_16209, cam_forward_x_16210, cam_forward_y_16211, cam_forward_zz_16212, cam_right_x_16213, cam_right_y_16214, cam_right_zz_16215, cam_up_x_16216, cam_up_y_16217, cam_up_zz_16218, cam_fov_rad_16219, tape_slot_count_16222)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return cl.array.Array(self.queue, (pixel_width_16205, pixel_height_16206), np.uint32, data=mem_out_27051)